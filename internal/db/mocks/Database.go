// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	db "gitlab.services.mts.ru/jocasta/pipeliner/internal/db"
	entity "gitlab.services.mts.ru/jocasta/pipeliner/internal/entity"

	mock "github.com/stretchr/testify/mock"

	store "gitlab.services.mts.ru/jocasta/pipeliner/internal/store"

	time "time"

	uuid "github.com/google/uuid"
)

// MockedDatabase is an autogenerated mock type for the Database type
type MockedDatabase struct {
	mock.Mock
}

// ActiveAlertNGSA provides a mock function with given fields: ctx, sever, state, source, eventType, cause, addInf, addTxt, moID, specProb, notID, usertext, moi, moc
func (_m *MockedDatabase) ActiveAlertNGSA(ctx context.Context, sever int, state string, source string, eventType string, cause string, addInf string, addTxt string, moID string, specProb string, notID string, usertext string, moi string, moc string) error {
	ret := _m.Called(ctx, sever, state, source, eventType, cause, addInf, addTxt, moID, specProb, notID, usertext, moi, moc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string, string, string, string, string, string, string, string, string, string) error); ok {
		r0 = rf(ctx, sever, state, source, eventType, cause, addInf, addTxt, moID, specProb, notID, usertext, moi, moc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddExternalSystemToVersion provides a mock function with given fields: ctx, versionID, systemID
func (_m *MockedDatabase) AddExternalSystemToVersion(ctx context.Context, versionID string, systemID string) error {
	ret := _m.Called(ctx, versionID, systemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, versionID, systemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AllowRunAsOthers provides a mock function with given fields: ctx, versionID, systemID, allowRunAsOthers
func (_m *MockedDatabase) AllowRunAsOthers(ctx context.Context, versionID string, systemID string, allowRunAsOthers bool) error {
	ret := _m.Called(ctx, versionID, systemID, allowRunAsOthers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, versionID, systemID, allowRunAsOthers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttachTag provides a mock function with given fields: ctx, id, p
func (_m *MockedDatabase) AttachTag(ctx context.Context, id uuid.UUID, p *entity.EriusTagInfo) error {
	ret := _m.Called(ctx, id, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.EriusTagInfo) error); ok {
		r0 = rf(ctx, id, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckIsArchived provides a mock function with given fields: ctx, taskID
func (_m *MockedDatabase) CheckIsArchived(ctx context.Context, taskID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, taskID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckIsTest provides a mock function with given fields: ctx, taskID
func (_m *MockedDatabase) CheckIsTest(ctx context.Context, taskID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, taskID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckPipelineNameExists provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockedDatabase) CheckPipelineNameExists(_a0 context.Context, _a1 string, _a2 bool) (*bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *bool
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUserCanEditForm provides a mock function with given fields: ctx, workNumber, stepName, login
func (_m *MockedDatabase) CheckUserCanEditForm(ctx context.Context, workNumber string, stepName string, login string) (bool, error) {
	ret := _m.Called(ctx, workNumber, stepName, login)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, workNumber, stepName, login)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, workNumber, stepName, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearAlertNGSA provides a mock function with given fields: ctx, name
func (_m *MockedDatabase) ClearAlertNGSA(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitTransaction provides a mock function with given fields: ctx
func (_m *MockedDatabase) CommitTransaction(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePipeline provides a mock function with given fields: c, p, author, pipelineData
func (_m *MockedDatabase) CreatePipeline(c context.Context, p *entity.EriusScenario, author string, pipelineData []byte) error {
	ret := _m.Called(c, p, author, pipelineData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.EriusScenario, string, []byte) error); ok {
		r0 = rf(c, p, author, pipelineData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTag provides a mock function with given fields: ctx, e, author
func (_m *MockedDatabase) CreateTag(ctx context.Context, e *entity.EriusTagInfo, author string) (*entity.EriusTagInfo, error) {
	ret := _m.Called(ctx, e, author)

	var r0 *entity.EriusTagInfo
	if rf, ok := ret.Get(0).(func(context.Context, *entity.EriusTagInfo, string) *entity.EriusTagInfo); ok {
		r0 = rf(ctx, e, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusTagInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.EriusTagInfo, string) error); ok {
		r1 = rf(ctx, e, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTask provides a mock function with given fields: ctx, dto
func (_m *MockedDatabase) CreateTask(ctx context.Context, dto *db.CreateTaskDTO) (*entity.EriusTask, error) {
	ret := _m.Called(ctx, dto)

	var r0 *entity.EriusTask
	if rf, ok := ret.Get(0).(func(context.Context, *db.CreateTaskDTO) *entity.EriusTask); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *db.CreateTaskDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVersion provides a mock function with given fields: ctx, p, author, pipelineData, oldVersionID
func (_m *MockedDatabase) CreateVersion(ctx context.Context, p *entity.EriusScenario, author string, pipelineData []byte, oldVersionID uuid.UUID) error {
	ret := _m.Called(ctx, p, author, pipelineData, oldVersionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.EriusScenario, string, []byte, uuid.UUID) error); ok {
		r0 = rf(ctx, p, author, pipelineData, oldVersionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePipeline provides a mock function with given fields: ctx, id
func (_m *MockedDatabase) DeletePipeline(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVersion provides a mock function with given fields: ctx, versionID
func (_m *MockedDatabase) DeleteVersion(ctx context.Context, versionID uuid.UUID) error {
	ret := _m.Called(ctx, versionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, versionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachTag provides a mock function with given fields: ctx, id, p
func (_m *MockedDatabase) DetachTag(ctx context.Context, id uuid.UUID, p *entity.EriusTagInfo) error {
	ret := _m.Called(ctx, id, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.EriusTagInfo) error); ok {
		r0 = rf(ctx, id, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditTag provides a mock function with given fields: ctx, e
func (_m *MockedDatabase) EditTag(ctx context.Context, e *entity.EriusTagInfo) error {
	ret := _m.Called(ctx, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.EriusTagInfo) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdditionalForms provides a mock function with given fields: workNumber, nodeName
func (_m *MockedDatabase) GetAdditionalForms(workNumber string, nodeName string) ([]string, error) {
	ret := _m.Called(workNumber, nodeName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(workNumber, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(workNumber, nodeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTags provides a mock function with given fields: ctx
func (_m *MockedDatabase) GetAllTags(ctx context.Context) ([]entity.EriusTagInfo, error) {
	ret := _m.Called(ctx)

	var r0 []entity.EriusTagInfo
	if rf, ok := ret.Get(0).(func(context.Context) []entity.EriusTagInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EriusTagInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationData provides a mock function with given fields: workNumber
func (_m *MockedDatabase) GetApplicationData(workNumber string) (string, error) {
	ret := _m.Called(workNumber)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(workNumber)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(workNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApproveActionNames provides a mock function with given fields: ctx
func (_m *MockedDatabase) GetApproveActionNames(ctx context.Context) ([]entity.ApproveActionName, error) {
	ret := _m.Called(ctx)

	var r0 []entity.ApproveActionName
	if rf, ok := ret.Get(0).(func(context.Context) []entity.ApproveActionName); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ApproveActionName)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApproveStatuses provides a mock function with given fields: ctx
func (_m *MockedDatabase) GetApproveStatuses(ctx context.Context) ([]entity.ApproveStatus, error) {
	ret := _m.Called(ctx)

	var r0 []entity.ApproveStatus
	if rf, ok := ret.Get(0).(func(context.Context) []entity.ApproveStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ApproveStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApprovedVersions provides a mock function with given fields: ctx
func (_m *MockedDatabase) GetApprovedVersions(ctx context.Context) ([]entity.EriusScenarioInfo, error) {
	ret := _m.Called(ctx)

	var r0 []entity.EriusScenarioInfo
	if rf, ok := ret.Get(0).(func(context.Context) []entity.EriusScenarioInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EriusScenarioInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockDataFromVersion provides a mock function with given fields: ctx, workNumber, blockName
func (_m *MockedDatabase) GetBlockDataFromVersion(ctx context.Context, workNumber string, blockName string) (*entity.EriusFunc, error) {
	ret := _m.Called(ctx, workNumber, blockName)

	var r0 *entity.EriusFunc
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.EriusFunc); ok {
		r0 = rf(ctx, workNumber, blockName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusFunc)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, workNumber, blockName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockInputs provides a mock function with given fields: ctx, blockName, workNumber
func (_m *MockedDatabase) GetBlockInputs(ctx context.Context, blockName string, workNumber string) (entity.BlockInputs, error) {
	ret := _m.Called(ctx, blockName, workNumber)

	var r0 entity.BlockInputs
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.BlockInputs); ok {
		r0 = rf(ctx, blockName, workNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.BlockInputs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, blockName, workNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockOutputs provides a mock function with given fields: ctx, blockId, blockName
func (_m *MockedDatabase) GetBlockOutputs(ctx context.Context, blockId string, blockName string) (entity.BlockOutputs, error) {
	ret := _m.Called(ctx, blockId, blockName)

	var r0 entity.BlockOutputs
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.BlockOutputs); ok {
		r0 = rf(ctx, blockId, blockName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.BlockOutputs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, blockId, blockName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlocksBreachedSLA provides a mock function with given fields: ctx
func (_m *MockedDatabase) GetBlocksBreachedSLA(ctx context.Context) ([]db.StepBreachedSLA, error) {
	ret := _m.Called(ctx)

	var r0 []db.StepBreachedSLA
	if rf, ok := ret.Get(0).(func(context.Context) []db.StepBreachedSLA); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.StepBreachedSLA)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlocksOutputs provides a mock function with given fields: ctx, blockId
func (_m *MockedDatabase) GetBlocksOutputs(ctx context.Context, blockId string) (entity.BlockOutputs, error) {
	ret := _m.Called(ctx, blockId)

	var r0 entity.BlockOutputs
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.BlockOutputs); ok {
		r0 = rf(ctx, blockId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.BlockOutputs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, blockId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDraftVersions provides a mock function with given fields: ctx, author
func (_m *MockedDatabase) GetDraftVersions(ctx context.Context, author string) ([]entity.EriusScenarioInfo, error) {
	ret := _m.Called(ctx, author)

	var r0 []entity.EriusScenarioInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.EriusScenarioInfo); ok {
		r0 = rf(ctx, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EriusScenarioInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutableByName provides a mock function with given fields: ctx, name
func (_m *MockedDatabase) GetExecutableByName(ctx context.Context, name string) (*entity.EriusScenario, error) {
	ret := _m.Called(ctx, name)

	var r0 *entity.EriusScenario
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.EriusScenario); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusScenario)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutableScenarios provides a mock function with given fields: ctx
func (_m *MockedDatabase) GetExecutableScenarios(ctx context.Context) ([]entity.EriusScenario, error) {
	ret := _m.Called(ctx)

	var r0 []entity.EriusScenario
	if rf, ok := ret.Get(0).(func(context.Context) []entity.EriusScenario); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EriusScenario)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutorsFromPrevExecutionBlockRun provides a mock function with given fields: ctx, taskID, name
func (_m *MockedDatabase) GetExecutorsFromPrevExecutionBlockRun(ctx context.Context, taskID uuid.UUID, name string) (map[string]struct{}, error) {
	ret := _m.Called(ctx, taskID, name)

	var r0 map[string]struct{}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) map[string]struct{}); ok {
		r0 = rf(ctx, taskID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, taskID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutorsFromPrevWorkVersionExecutionBlockRun provides a mock function with given fields: ctx, workNumber, name
func (_m *MockedDatabase) GetExecutorsFromPrevWorkVersionExecutionBlockRun(ctx context.Context, workNumber string, name string) (map[string]struct{}, error) {
	ret := _m.Called(ctx, workNumber, name)

	var r0 map[string]struct{}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]struct{}); ok {
		r0 = rf(ctx, workNumber, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, workNumber, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskEventsByWorkNumber provides a mock function with given fields: ctx, workNumber, systemID
func (_m *MockedDatabase) GetTaskEventsParamsByWorkNumber(ctx context.Context, workNumber string, systemID string) (
	entity.ExternalSystemSubscriptionParams, error) {
	ret := _m.Called(ctx, workNumber, systemID)

	var r0 entity.ExternalSystemSubscriptionParams
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.ExternalSystemSubscriptionParams); ok {
		r0 = rf(ctx, workNumber, systemID)
	} else {
		r0 = ret.Get(0).(entity.ExternalSystemSubscriptionParams)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, workNumber, systemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExternalSystemTaskSubscriptions provides a mock function with given fields: ctx, versionID, systemID
func (_m *MockedDatabase) GetExternalSystemTaskSubscriptions(ctx context.Context, versionID string, systemID string) (entity.ExternalSystemSubscriptionParams, error) {
	ret := _m.Called(ctx, versionID, systemID)

	var r0 entity.ExternalSystemSubscriptionParams
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.ExternalSystemSubscriptionParams); ok {
		r0 = rf(ctx, versionID, systemID)
	} else {
		r0 = ret.Get(0).(entity.ExternalSystemSubscriptionParams)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, versionID, systemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExternalSystemSettings provides a mock function with given fields: ctx, versionID, systemID
func (_m *MockedDatabase) GetExternalSystemSettings(ctx context.Context, versionID string, systemID string) (entity.ExternalSystem, error) {
	ret := _m.Called(ctx, versionID, systemID)

	var r0 entity.ExternalSystem
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.ExternalSystem); ok {
		r0 = rf(ctx, versionID, systemID)
	} else {
		r0 = ret.Get(0).(entity.ExternalSystem)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, versionID, systemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExternalSystemsIDs provides a mock function with given fields: ctx, versionID
func (_m *MockedDatabase) GetExternalSystemsIDs(ctx context.Context, versionID string) ([]uuid.UUID, error) {
	ret := _m.Called(ctx, versionID)

	var r0 []uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, string) []uuid.UUID); ok {
		r0 = rf(ctx, versionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, versionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastDebugTask provides a mock function with given fields: ctx, versionID, author
func (_m *MockedDatabase) GetLastDebugTask(ctx context.Context, versionID uuid.UUID, author string) (*entity.EriusTask, error) {
	ret := _m.Called(ctx, versionID, author)

	var r0 *entity.EriusTask
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *entity.EriusTask); ok {
		r0 = rf(ctx, versionID, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, versionID, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeanTaskSolveTime provides a mock function with given fields: ctx, pipelineId
func (_m *MockedDatabase) GetMeanTaskSolveTime(ctx context.Context, pipelineId string) ([]entity.TaskCompletionInterval, error) {
	ret := _m.Called(ctx, pipelineId)

	var r0 []entity.TaskCompletionInterval
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.TaskCompletionInterval); ok {
		r0 = rf(ctx, pipelineId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TaskCompletionInterval)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pipelineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMergedVariableStorage provides a mock function with given fields: ctx, workId, blockIds
func (_m *MockedDatabase) GetMergedVariableStorage(ctx context.Context, workId uuid.UUID, blockIds []string) (*store.VariableStore, error) {
	ret := _m.Called(ctx, workId, blockIds)

	var r0 *store.VariableStore
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []string) *store.VariableStore); ok {
		r0 = rf(ctx, workId, blockIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.VariableStore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []string) error); ok {
		r1 = rf(ctx, workId, blockIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOnApproveVersions provides a mock function with given fields: ctx
func (_m *MockedDatabase) GetOnApproveVersions(ctx context.Context) ([]entity.EriusScenarioInfo, error) {
	ret := _m.Called(ctx)

	var r0 []entity.EriusScenarioInfo
	if rf, ok := ret.Get(0).(func(context.Context) []entity.EriusScenarioInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EriusScenarioInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParentTaskStepByName provides a mock function with given fields: ctx, workID, stepName
func (_m *MockedDatabase) GetParentTaskStepByName(ctx context.Context, workID uuid.UUID, stepName string) (*entity.Step, error) {
	ret := _m.Called(ctx, workID, stepName)

	var r0 *entity.Step
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *entity.Step); ok {
		r0 = rf(ctx, workID, stepName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Step)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, workID, stepName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipeline provides a mock function with given fields: ctx, id
func (_m *MockedDatabase) GetPipeline(ctx context.Context, id uuid.UUID) (*entity.EriusScenario, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.EriusScenario
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.EriusScenario); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusScenario)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelineTag provides a mock function with given fields: ctx, id
func (_m *MockedDatabase) GetPipelineTag(ctx context.Context, id uuid.UUID) ([]entity.EriusTagInfo, error) {
	ret := _m.Called(ctx, id)

	var r0 []entity.EriusTagInfo
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []entity.EriusTagInfo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EriusTagInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelineTasks provides a mock function with given fields: ctx, pipelineID
func (_m *MockedDatabase) GetPipelineTasks(ctx context.Context, pipelineID uuid.UUID) (*entity.EriusTasks, error) {
	ret := _m.Called(ctx, pipelineID)

	var r0 *entity.EriusTasks
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.EriusTasks); ok {
		r0 = rf(ctx, pipelineID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusTasks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pipelineID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelineVersion provides a mock function with given fields: ctx, id, checkNotDeleted
func (_m *MockedDatabase) GetPipelineVersion(ctx context.Context, id uuid.UUID, checkNotDeleted bool) (*entity.EriusScenario, error) {
	ret := _m.Called(ctx, id, checkNotDeleted)

	var r0 *entity.EriusScenario
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) *entity.EriusScenario); ok {
		r0 = rf(ctx, id, checkNotDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusScenario)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = rf(ctx, id, checkNotDeleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelineVersions provides a mock function with given fields: ctx, id
func (_m *MockedDatabase) GetPipelineVersions(ctx context.Context, id uuid.UUID) ([]entity.EriusVersionInfo, error) {
	ret := _m.Called(ctx, id)

	var r0 []entity.EriusVersionInfo
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []entity.EriusVersionInfo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EriusVersionInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelinesByNameOrId provides a mock function with given fields: ctx, dto
func (_m *MockedDatabase) GetPipelinesByNameOrId(ctx context.Context, dto *db.SearchPipelineRequest) ([]entity.SearchPipeline, error) {
	ret := _m.Called(ctx, dto)

	var r0 []entity.SearchPipeline
	if rf, ok := ret.Get(0).(func(context.Context, *db.SearchPipelineRequest) []entity.SearchPipeline); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SearchPipeline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *db.SearchPipelineRequest) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelinesWithLatestVersion provides a mock function with given fields: ctx, authorLogin, publishedPipelines, page, perPage, filter
func (_m *MockedDatabase) GetPipelinesWithLatestVersion(ctx context.Context, authorLogin string, publishedPipelines bool, page *int, perPage *int, filter string) ([]entity.EriusScenarioInfo, error) {
	ret := _m.Called(ctx, authorLogin, publishedPipelines, page, perPage, filter)

	var r0 []entity.EriusScenarioInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, *int, *int, string) []entity.EriusScenarioInfo); ok {
		r0 = rf(ctx, authorLogin, publishedPipelines, page, perPage, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EriusScenarioInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool, *int, *int, string) error); ok {
		r1 = rf(ctx, authorLogin, publishedPipelines, page, perPage, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRejectedVersions provides a mock function with given fields: ctx
func (_m *MockedDatabase) GetRejectedVersions(ctx context.Context) ([]entity.EriusScenarioInfo, error) {
	ret := _m.Called(ctx)

	var r0 []entity.EriusScenarioInfo
	if rf, ok := ret.Get(0).(func(context.Context) []entity.EriusScenarioInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EriusScenarioInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSlaVersionSettings provides a mock function with given fields: ctx, versionID
func (_m *MockedDatabase) GetSlaVersionSettings(ctx context.Context, versionID string) (entity.SlaVersionSettings, error) {
	ret := _m.Called(ctx, versionID)

	var r0 entity.SlaVersionSettings
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.SlaVersionSettings); ok {
		r0 = rf(ctx, versionID)
	} else {
		r0 = ret.Get(0).(entity.SlaVersionSettings)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, versionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTag provides a mock function with given fields: ctx, e
func (_m *MockedDatabase) GetTag(ctx context.Context, e *entity.EriusTagInfo) (*entity.EriusTagInfo, error) {
	ret := _m.Called(ctx, e)

	var r0 *entity.EriusTagInfo
	if rf, ok := ret.Get(0).(func(context.Context, *entity.EriusTagInfo) *entity.EriusTagInfo); ok {
		r0 = rf(ctx, e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusTagInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.EriusTagInfo) error); ok {
		r1 = rf(ctx, e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: ctx, delegationsApprover, delegationsExecution, currentUser, workNumber
func (_m *MockedDatabase) GetTask(ctx context.Context, delegationsApprover []string, delegationsExecution []string, currentUser string, workNumber string) (*entity.EriusTask, error) {
	ret := _m.Called(ctx, delegationsApprover, delegationsExecution, currentUser, workNumber)

	var r0 *entity.EriusTask
	if rf, ok := ret.Get(0).(func(context.Context, []string, []string, string, string) *entity.EriusTask); ok {
		r0 = rf(ctx, delegationsApprover, delegationsExecution, currentUser, workNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, []string, string, string) error); ok {
		r1 = rf(ctx, delegationsApprover, delegationsExecution, currentUser, workNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskForMonitoring provides a mock function with given fields: ctx, workNumber
func (_m *MockedDatabase) GetTaskForMonitoring(ctx context.Context, workNumber string) ([]entity.MonitoringTaskNode, error) {
	ret := _m.Called(ctx, workNumber)

	var r0 []entity.MonitoringTaskNode
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.MonitoringTaskNode); ok {
		r0 = rf(ctx, workNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MonitoringTaskNode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskFormSchemaID provides a mock function with given fields: workNumber, formID
func (_m *MockedDatabase) GetTaskFormSchemaID(workNumber string, formID string) (string, error) {
	ret := _m.Called(workNumber, formID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(workNumber, formID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(workNumber, formID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskInWorkTime provides a mock function with given fields: ctx, workNumber
func (_m *MockedDatabase) GetTaskInWorkTime(ctx context.Context, workNumber string) (*entity.TaskCompletionInterval, error) {
	ret := _m.Called(ctx, workNumber)

	var r0 *entity.TaskCompletionInterval
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.TaskCompletionInterval); ok {
		r0 = rf(ctx, workNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskCompletionInterval)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskMembers provides a mock function with given fields: ctx, workNumber
func (_m *MockedDatabase) GetTaskMembers(ctx context.Context, workNumber string) ([]db.DbMember, error) {
	ret := _m.Called(ctx, workNumber)

	var r0 []db.DbMember
	if rf, ok := ret.Get(0).(func(context.Context, string) []db.DbMember); ok {
		r0 = rf(ctx, workNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.DbMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskRunContext provides a mock function with given fields: ctx, workNumber
func (_m *MockedDatabase) GetTaskRunContext(ctx context.Context, workNumber string) (entity.TaskRunContext, error) {
	ret := _m.Called(ctx, workNumber)

	var r0 entity.TaskRunContext
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.TaskRunContext); ok {
		r0 = rf(ctx, workNumber)
	} else {
		r0 = ret.Get(0).(entity.TaskRunContext)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskStatus provides a mock function with given fields: ctx, taskID
func (_m *MockedDatabase) GetTaskStatus(ctx context.Context, taskID uuid.UUID) (int, error) {
	ret := _m.Called(ctx, taskID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskHumanStatus provides a mock function with given fields: ctx, taskID
func (_m *MockedDatabase) GetTaskHumanStatus(ctx context.Context, taskID uuid.UUID) (string, error) {
	ret := _m.Called(ctx, taskID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskStatusWithReadableString provides a mock function with given fields: ctx, taskID
func (_m *MockedDatabase) GetTaskStatusWithReadableString(ctx context.Context, taskID uuid.UUID) (int, string, error) {
	ret := _m.Called(ctx, taskID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) string); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID) error); ok {
		r2 = rf(ctx, taskID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTaskStepById provides a mock function with given fields: ctx, id
func (_m *MockedDatabase) GetTaskStepById(ctx context.Context, id uuid.UUID) (*entity.Step, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Step
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Step); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Step)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCancelledTaskSteps provides a mock function with given fields: ctx, workNumber
func (_m *MockedDatabase) GetCancelledTaskSteps(ctx context.Context, workNumber string) ([]entity.Step, error) {
	ret := _m.Called(ctx, workNumber)

	var r0 []entity.Step
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Step); ok {
		r0 = rf(ctx, workNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Step)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskStepByName provides a mock function with given fields: ctx, workID, stepName
func (_m *MockedDatabase) GetTaskStepByName(ctx context.Context, workID uuid.UUID, stepName string) (*entity.Step, error) {
	ret := _m.Called(ctx, workID, stepName)

	var r0 *entity.Step
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *entity.Step); ok {
		r0 = rf(ctx, workID, stepName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Step)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, workID, stepName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskSteps provides a mock function with given fields: ctx, id
func (_m *MockedDatabase) GetTaskSteps(ctx context.Context, id uuid.UUID) (entity.TaskSteps, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.TaskSteps
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.TaskSteps); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.TaskSteps)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskStepsToWait provides a mock function with given fields: ctx, workNumber, blockName
func (_m *MockedDatabase) GetTaskStepsToWait(ctx context.Context, workNumber string, blockName string) ([]string, error) {
	ret := _m.Called(ctx, workNumber, blockName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(ctx, workNumber, blockName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, workNumber, blockName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: ctx, filters, delegations
func (_m *MockedDatabase) GetTasks(ctx context.Context, filters entity.TaskFilter, delegations []string) (*entity.EriusTasksPage, error) {
	ret := _m.Called(ctx, filters, delegations)

	var r0 *entity.EriusTasksPage
	if rf, ok := ret.Get(0).(func(context.Context, entity.TaskFilter, []string) *entity.EriusTasksPage); ok {
		r0 = rf(ctx, filters, delegations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusTasksPage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.TaskFilter, []string) error); ok {
		r1 = rf(ctx, filters, delegations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksCount provides a mock function with given fields: ctx, currentUser, delegationsByApprovement, delegationsByExecution
func (_m *MockedDatabase) GetTasksCount(ctx context.Context, currentUser string, delegationsByApprovement []string, delegationsByExecution []string) (*entity.CountTasks, error) {
	ret := _m.Called(ctx, currentUser, delegationsByApprovement, delegationsByExecution)

	var r0 *entity.CountTasks
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, []string) *entity.CountTasks); ok {
		r0 = rf(ctx, currentUser, delegationsByApprovement, delegationsByExecution)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.CountTasks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string, []string) error); ok {
		r1 = rf(ctx, currentUser, delegationsByApprovement, delegationsByExecution)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksForMonitoring provides a mock function with given fields: ctx, filters
func (_m *MockedDatabase) GetTasksForMonitoring(ctx context.Context, filters *entity.TasksForMonitoringFilters) (*entity.TasksForMonitoring, error) {
	ret := _m.Called(ctx, filters)

	var r0 *entity.TasksForMonitoring
	if rf, ok := ret.Get(0).(func(context.Context, *entity.TasksForMonitoringFilters) *entity.TasksForMonitoring); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TasksForMonitoring)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.TasksForMonitoringFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnfinishedTaskStepsByWorkIdAndStepType provides a mock function with given fields: ctx, id, stepType, action
func (_m *MockedDatabase) GetUnfinishedTaskStepsByWorkIdAndStepType(ctx context.Context, id uuid.UUID, stepType string, action entity.TaskUpdateAction) (entity.TaskSteps, error) {
	ret := _m.Called(ctx, id, stepType, action)

	var r0 entity.TaskSteps
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, entity.TaskUpdateAction) entity.TaskSteps); ok {
		r0 = rf(ctx, id, stepType, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.TaskSteps)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, entity.TaskUpdateAction) error); ok {
		r1 = rf(ctx, id, stepType, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariableStorageForStep provides a mock function with given fields: ctx, taskID, stepType
func (_m *MockedDatabase) GetVariableStorageForStep(ctx context.Context, taskID uuid.UUID, stepType string) (*store.VariableStore, error) {
	ret := _m.Called(ctx, taskID, stepType)

	var r0 *store.VariableStore
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *store.VariableStore); ok {
		r0 = rf(ctx, taskID, stepType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.VariableStore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, taskID, stepType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionByPipelineID provides a mock function with given fields: ctx, pipelineId
func (_m *MockedDatabase) GetVersionByPipelineID(ctx context.Context, pipelineId string) (*entity.EriusScenario, error) {
	ret := _m.Called(ctx, pipelineId)

	var r0 *entity.EriusScenario
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.EriusScenario); ok {
		r0 = rf(ctx, pipelineId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusScenario)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pipelineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionByWorkNumber provides a mock function with given fields: ctx, workNumber
func (_m *MockedDatabase) GetVersionByWorkNumber(ctx context.Context, workNumber string) (*entity.EriusScenario, error) {
	ret := _m.Called(ctx, workNumber)

	var r0 *entity.EriusScenario
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.EriusScenario); ok {
		r0 = rf(ctx, workNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusScenario)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionSettings provides a mock function with given fields: ctx, versionID
func (_m *MockedDatabase) GetVersionSettings(ctx context.Context, versionID string) (entity.ProcessSettings, error) {
	ret := _m.Called(ctx, versionID)

	var r0 entity.ProcessSettings
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.ProcessSettings); ok {
		r0 = rf(ctx, versionID)
	} else {
		r0 = ret.Get(0).(entity.ProcessSettings)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, versionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionTasks provides a mock function with given fields: ctx, versionID
func (_m *MockedDatabase) GetVersionTasks(ctx context.Context, versionID uuid.UUID) (*entity.EriusTasks, error) {
	ret := _m.Called(ctx, versionID)

	var r0 *entity.EriusTasks
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.EriusTasks); ok {
		r0 = rf(ctx, versionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusTasks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, versionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionsByStatus provides a mock function with given fields: ctx, status, author
func (_m *MockedDatabase) GetVersionsByStatus(ctx context.Context, status int, author string) ([]entity.EriusScenarioInfo, error) {
	ret := _m.Called(ctx, status, author)

	var r0 []entity.EriusScenarioInfo
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []entity.EriusScenarioInfo); ok {
		r0 = rf(ctx, status, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EriusScenarioInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, status, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkedVersions provides a mock function with given fields: ctx
func (_m *MockedDatabase) GetWorkedVersions(ctx context.Context) ([]entity.EriusScenario, error) {
	ret := _m.Called(ctx)

	var r0 []entity.EriusScenario
	if rf, ok := ret.Get(0).(func(context.Context) []entity.EriusScenario); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EriusScenario)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorksForUserWithGivenTimeRange provides a mock function with given fields: ctx, hours, login, versionID, excludeWorkNumber
func (_m *MockedDatabase) GetWorksForUserWithGivenTimeRange(ctx context.Context, hours int, login string, versionID string, excludeWorkNumber string) ([]*entity.EriusTask, error) {
	ret := _m.Called(ctx, hours, login, versionID, excludeWorkNumber)

	var r0 []*entity.EriusTask
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string) []*entity.EriusTask); ok {
		r0 = rf(ctx, hours, login, versionID, excludeWorkNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.EriusTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string, string, string) error); ok {
		r1 = rf(ctx, hours, login, versionID, excludeWorkNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParallelIsFinished provides a mock function with given fields: ctx, workNumber, blockName
func (_m *MockedDatabase) ParallelIsFinished(ctx context.Context, workNumber string, blockName string) (bool, error) {
	ret := _m.Called(ctx, workNumber, blockName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, workNumber, blockName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, workNumber, blockName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *MockedDatabase) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PipelineRemovable provides a mock function with given fields: ctx, id
func (_m *MockedDatabase) PipelineRemovable(ctx context.Context, id uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveExternalSystemTaskSubscriptions provides a mock function with given fields: ctx, versionID, systemID
func (_m *MockedDatabase) RemoveExternalSystemTaskSubscriptions(ctx context.Context, versionID string, systemID string) error {
	ret := _m.Called(ctx, versionID, systemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, versionID, systemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveExternalSystem provides a mock function with given fields: ctx, versionID, systemID
func (_m *MockedDatabase) RemoveExternalSystem(ctx context.Context, versionID string, systemID string) error {
	ret := _m.Called(ctx, versionID, systemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, versionID, systemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveObsoleteMapping provides a mock function with given fields: ctx, id
func (_m *MockedDatabase) RemoveObsoleteMapping(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePipelineTags provides a mock function with given fields: ctx, id
func (_m *MockedDatabase) RemovePipelineTags(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveTag provides a mock function with given fields: ctx, id
func (_m *MockedDatabase) RemoveTag(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenamePipeline provides a mock function with given fields: ctx, id, name
func (_m *MockedDatabase) RenamePipeline(ctx context.Context, id uuid.UUID, name string) error {
	ret := _m.Called(ctx, id, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackTransaction provides a mock function with given fields: ctx
func (_m *MockedDatabase) RollbackTransaction(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackVersion provides a mock function with given fields: ctx, pipelineID, versionID
func (_m *MockedDatabase) RollbackVersion(ctx context.Context, pipelineID uuid.UUID, versionID uuid.UUID) error {
	ret := _m.Called(ctx, pipelineID, versionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, pipelineID, versionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveExternalSystemSettings provides a mock function with given fields: ctx, versionID, settings, schemaFlag
func (_m *MockedDatabase) SaveExternalSystemSettings(ctx context.Context, versionID string, settings entity.ExternalSystem, schemaFlag *string) error {
	ret := _m.Called(ctx, versionID, settings, schemaFlag)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.ExternalSystem, *string) error); ok {
		r0 = rf(ctx, versionID, settings, schemaFlag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSlaVersionSettings provides a mock function with given fields: ctx, versionID, s
func (_m *MockedDatabase) SaveSlaVersionSettings(ctx context.Context, versionID string, s entity.SlaVersionSettings) error {
	ret := _m.Called(ctx, versionID, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.SlaVersionSettings) error); ok {
		r0 = rf(ctx, versionID, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveStepContext provides a mock function with given fields: ctx, dto
func (_m *MockedDatabase) SaveStepContext(ctx context.Context, dto *db.SaveStepRequest) (uuid.UUID, time.Time, error) {
	ret := _m.Called(ctx, dto)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, *db.SaveStepRequest) uuid.UUID); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(context.Context, *db.SaveStepRequest) time.Time); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *db.SaveStepRequest) error); ok {
		r2 = rf(ctx, dto)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SaveExternalSystemSubscriptionParams provides a mock function with given fields: ctx, versionID, params
func (_m *MockedDatabase) SaveExternalSystemSubscriptionParams(ctx context.Context, versionID string,
	params *entity.ExternalSystemSubscriptionParams) error {
	ret := _m.Called(ctx, versionID, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *entity.ExternalSystemSubscriptionParams) error); ok {
		r0 = rf(ctx, versionID, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveVersionMainSettings provides a mock function with given fields: ctx, settings
func (_m *MockedDatabase) SaveVersionMainSettings(ctx context.Context, settings entity.ProcessSettings) error {
	ret := _m.Called(ctx, settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ProcessSettings) error); ok {
		r0 = rf(ctx, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveVersionSettings provides a mock function with given fields: ctx, settings, schemaFlag
func (_m *MockedDatabase) SaveVersionSettings(ctx context.Context, settings entity.ProcessSettings, schemaFlag *string) error {
	ret := _m.Called(ctx, settings, schemaFlag)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ProcessSettings, *string) error); ok {
		r0 = rf(ctx, settings, schemaFlag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendTaskToArchive provides a mock function with given fields: ctx, taskID
func (_m *MockedDatabase) SendTaskToArchive(ctx context.Context, taskID uuid.UUID) error {
	ret := _m.Called(ctx, taskID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartTransaction provides a mock function with given fields: ctx
func (_m *MockedDatabase) StartTransaction(ctx context.Context) (db.Database, error) {
	ret := _m.Called(ctx)

	var r0 db.Database
	if rf, ok := ret.Get(0).(func(context.Context) db.Database); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Database)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopTaskBlocks provides a mock function with given fields: ctx, taskID
func (_m *MockedDatabase) StopTaskBlocks(ctx context.Context, taskID uuid.UUID) error {
	ret := _m.Called(ctx, taskID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SwitchApproved provides a mock function with given fields: ctx, pipelineID, versionID, author
func (_m *MockedDatabase) SwitchApproved(ctx context.Context, pipelineID uuid.UUID, versionID uuid.UUID, author string) error {
	ret := _m.Called(ctx, pipelineID, versionID, author)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r0 = rf(ctx, pipelineID, versionID, author)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SwitchRejected provides a mock function with given fields: ctx, versionID, comment, author
func (_m *MockedDatabase) SwitchRejected(ctx context.Context, versionID uuid.UUID, comment string, author string) error {
	ret := _m.Called(ctx, versionID, comment, author)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) error); ok {
		r0 = rf(ctx, versionID, comment, author)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDraft provides a mock function with given fields: ctx, p, pipelineData
func (_m *MockedDatabase) UpdateDraft(ctx context.Context, p *entity.EriusScenario, pipelineData []byte) error {
	ret := _m.Called(ctx, p, pipelineData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.EriusScenario, []byte) error); ok {
		r0 = rf(ctx, p, pipelineData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEndingSystemSettings provides a mock function with given fields: ctx, versionID, systemID, settings
func (_m *MockedDatabase) UpdateEndingSystemSettings(ctx context.Context, versionID string, systemID string, settings entity.EndSystemSettings) error {
	ret := _m.Called(ctx, versionID, systemID, settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, entity.EndSystemSettings) error); ok {
		r0 = rf(ctx, versionID, systemID, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStepContext provides a mock function with given fields: ctx, dto
func (_m *MockedDatabase) UpdateStepContext(ctx context.Context, dto *db.UpdateStepRequest) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.UpdateStepRequest) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTaskBlocksData provides a mock function with given fields: ctx, dto
func (_m *MockedDatabase) UpdateTaskBlocksData(ctx context.Context, dto *db.UpdateTaskBlocksDataRequest) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.UpdateTaskBlocksDataRequest) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTaskHumanStatus provides a mock function with given fields: ctx, taskID, status
func (_m *MockedDatabase) UpdateTaskHumanStatus(ctx context.Context, taskID uuid.UUID, status string) (*entity.EriusTask, error) {
	ret := _m.Called(ctx, taskID, status)

	var r0 *entity.EriusTask
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *entity.EriusTask); ok {
		r0 = rf(ctx, taskID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.EriusTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, taskID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskRate provides a mock function with given fields: ctx, req
func (_m *MockedDatabase) UpdateTaskRate(ctx context.Context, req *db.UpdateTaskRate) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.UpdateTaskRate) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTaskStatus provides a mock function with given fields: ctx, taskID, status, comment, author
func (_m *MockedDatabase) UpdateTaskStatus(ctx context.Context, taskID uuid.UUID, status int, comment string, author string) error {
	ret := _m.Called(ctx, taskID, status, comment, author)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, string, string) error); ok {
		r0 = rf(ctx, taskID, status, comment, author)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VersionEditable provides a mock function with given fields: ctx, versionID
func (_m *MockedDatabase) VersionEditable(ctx context.Context, versionID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, versionID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, versionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, versionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockedDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockedDatabase creates a new instance of MockedDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockedDatabase(t mockConstructorTestingTNewMockedDatabase) *MockedDatabase {
	mock := &MockedDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
