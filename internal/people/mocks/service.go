// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	people "gitlab.services.mts.ru/jocasta/pipeliner/internal/people"

	retryablehttp "github.com/hashicorp/go-retryablehttp"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: ctx, search, onlyEnabled
func (_m *Service) GetUser(ctx context.Context, search string, onlyEnabled bool) (people.SSOUser, error) {
	ret := _m.Called(ctx, search, onlyEnabled)

	var r0 people.SSOUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (people.SSOUser, error)); ok {
		return rf(ctx, search, onlyEnabled)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) people.SSOUser); ok {
		r0 = rf(ctx, search, onlyEnabled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(people.SSOUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, search, onlyEnabled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserEmail provides a mock function with given fields: ctx, username
func (_m *Service) GetUserEmail(ctx context.Context, username string) (string, error) {
	ret := _m.Called(ctx, username)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, search, limit, filter, enabled
func (_m *Service) GetUsers(ctx context.Context, search string, limit *int, filter []string, enabled bool) ([]people.SSOUser, error) {
	ret := _m.Called(ctx, search, limit, filter, enabled)

	var r0 []people.SSOUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *int, []string, bool) ([]people.SSOUser, error)); ok {
		return rf(ctx, search, limit, filter, enabled)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *int, []string, bool) []people.SSOUser); ok {
		r0 = rf(ctx, search, limit, filter, enabled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]people.SSOUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *int, []string, bool) error); ok {
		r1 = rf(ctx, search, limit, filter, enabled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *Service) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCli provides a mock function with given fields: cli
func (_m *Service) SetCli(cli *retryablehttp.Client) {
	_m.Called(cli)
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
