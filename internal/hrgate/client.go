// Package hrgate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package hrgate

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	OAuth2Scopes = "oAuth2.Scopes"
)

// Defines values for CalendarDayType.
const (
	CalendarDayTypeHoliday CalendarDayType = "holiday"

	CalendarDayTypePreHoliday CalendarDayType = "pre-holiday"

	CalendarDayTypeWorkday CalendarDayType = "workday"
)

// Defines values for ChangeableAllowanceKind.
const (
	ChangeableAllowanceKindCash ChangeableAllowanceKind = "cash"

	ChangeableAllowanceKindPercent ChangeableAllowanceKind = "percent"
)

// Defines values for ChangeablePersonalScheduleWeekType.
const (
	ChangeablePersonalScheduleWeekTypeNormal ChangeablePersonalScheduleWeekType = "normal"

	ChangeablePersonalScheduleWeekTypeNotfull ChangeablePersonalScheduleWeekType = "notfull"

	ChangeablePersonalScheduleWeekTypeNotfullshort ChangeablePersonalScheduleWeekType = "notfullshort"

	ChangeablePersonalScheduleWeekTypeShort ChangeablePersonalScheduleWeekType = "short"
)

// Defines values for ChangeableProductEntityType.
const (
	ChangeableProductEntityTypeProduct ChangeableProductEntityType = "Product"

	ChangeableProductEntityTypeStream ChangeableProductEntityType = "Stream"

	ChangeableProductEntityTypeTeam ChangeableProductEntityType = "Team"
)

// Defines values for CombinationStatus.
const (
	CombinationStatusВнешнееСовместительство CombinationStatus = "Внешнее совместительство"

	CombinationStatusВнутреннееСовместительство CombinationStatus = "Внутреннее совместительство"

	CombinationStatusОсновноеНазначение CombinationStatus = "Основное назначение"

	CombinationStatusПрочее CombinationStatus = "Прочее"
)

// Defines values for ComplexAssignmentRequiredEntities.
const (
	ComplexAssignmentRequiredEntitiesDistWork ComplexAssignmentRequiredEntities = "distWork"

	ComplexAssignmentRequiredEntitiesEmployee ComplexAssignmentRequiredEntities = "employee"

	ComplexAssignmentRequiredEntitiesPerson ComplexAssignmentRequiredEntities = "person"

	ComplexAssignmentRequiredEntitiesStaffUnit ComplexAssignmentRequiredEntities = "staffUnit"
)

// Defines values for EmployeePersonalDataPhoneSrcSystemName.
const (
	EmployeePersonalDataPhoneSrcSystemNameOebs EmployeePersonalDataPhoneSrcSystemName = "oebs"

	EmployeePersonalDataPhoneSrcSystemNameOim EmployeePersonalDataPhoneSrcSystemName = "oim"

	EmployeePersonalDataPhoneSrcSystemNameZup1c EmployeePersonalDataPhoneSrcSystemName = "zup1c"
)

// Defines values for EventKind.
const (
	EventKindCreate EventKind = "create"

	EventKindDelete EventKind = "delete"

	EventKindPatch EventKind = "patch"
)

// Defines values for ObjectKind.
const (
	ObjectKindAbsence ObjectKind = "absence"

	ObjectKindAbsenceType ObjectKind = "absenceType"

	ObjectKindAllowance ObjectKind = "allowance"

	ObjectKindApplicant ObjectKind = "applicant"

	ObjectKindAssignment ObjectKind = "assignment"

	ObjectKindAssignmentCategory ObjectKind = "assignmentCategory"

	ObjectKindAssignmentStatus ObjectKind = "assignmentStatus"

	ObjectKindAssignmentType ObjectKind = "assignmentType"

	ObjectKindAssignmentWithHistory ObjectKind = "assignmentWithHistory"

	ObjectKindBackBonusPaymentCategory ObjectKind = "backBonusPaymentCategory"

	ObjectKindBalanceUnit ObjectKind = "balanceUnit"

	ObjectKindBank ObjectKind = "bank"

	ObjectKindCalendar ObjectKind = "calendar"

	ObjectKindCalendarDay ObjectKind = "calendarDay"

	ObjectKindCluster ObjectKind = "cluster"

	ObjectKindContract ObjectKind = "contract"

	ObjectKindContractStatus ObjectKind = "contractStatus"

	ObjectKindContractType ObjectKind = "contractType"

	ObjectKindCostCenter ObjectKind = "costCenter"

	ObjectKindDgphDonor ObjectKind = "dgphDonor"

	ObjectKindDisabilityCategory ObjectKind = "disabilityCategory"

	ObjectKindDistWork ObjectKind = "distWork"

	ObjectKindDocument ObjectKind = "document"

	ObjectKindEarningPolicy ObjectKind = "earningPolicy"

	ObjectKindEmployee ObjectKind = "employee"

	ObjectKindEmployeeRole ObjectKind = "employeeRole"

	ObjectKindEmployeeType ObjectKind = "employeeType"

	ObjectKindFunctionalBlock ObjectKind = "functionalBlock"

	ObjectKindGrade ObjectKind = "grade"

	ObjectKindHierarchies ObjectKind = "hierarchies"

	ObjectKindHierarchyLink ObjectKind = "hierarchyLink"

	ObjectKindHourlyRate ObjectKind = "hourlyRate"

	ObjectKindLeavingReason ObjectKind = "leavingReason"

	ObjectKindLocation ObjectKind = "location"

	ObjectKindOffice ObjectKind = "office"

	ObjectKindOrganization ObjectKind = "organization"

	ObjectKindPaoBonusPaymentCategory ObjectKind = "paoBonusPaymentCategory"

	ObjectKindPayType ObjectKind = "payType"

	ObjectKindPerson ObjectKind = "person"

	ObjectKindPersonEducation ObjectKind = "personEducation"

	ObjectKindPersonalSchedule ObjectKind = "personalSchedule"

	ObjectKindPosition ObjectKind = "position"

	ObjectKindPositionCategory ObjectKind = "positionCategory"

	ObjectKindProduct ObjectKind = "product"

	ObjectKindProductEntity ObjectKind = "productEntity"

	ObjectKindProductEntityLink ObjectKind = "productEntityLink"

	ObjectKindProductStatus ObjectKind = "productStatus"

	ObjectKindSalary ObjectKind = "salary"

	ObjectKindSchedule ObjectKind = "schedule"

	ObjectKindScheduleDay ObjectKind = "scheduleDay"

	ObjectKindShiftType ObjectKind = "shiftType"

	ObjectKindStaffAvailabilityStatus ObjectKind = "staffAvailabilityStatus"

	ObjectKindStaffRole ObjectKind = "staffRole"

	ObjectKindStaffType ObjectKind = "staffType"

	ObjectKindStaffUnit ObjectKind = "staffUnit"

	ObjectKindStaffUnitWithHistory ObjectKind = "staffUnitWithHistory"

	ObjectKindTimekeeper ObjectKind = "timekeeper"

	ObjectKindTimekeeperGroup ObjectKind = "timekeeperGroup"

	ObjectKindUnit ObjectKind = "unit"

	ObjectKindUnitType ObjectKind = "unitType"

	ObjectKindVacationBalance ObjectKind = "vacationBalance"

	ObjectKindVacationPeriod ObjectKind = "vacationPeriod"

	ObjectKindVhi ObjectKind = "vhi"

	ObjectKindWorkWeekHours ObjectKind = "workWeekHours"

	ObjectKindWorkingHours ObjectKind = "workingHours"
)

// Defines values for OrganizationStructureRequiredFiledEnum.
const (
	OrganizationStructureRequiredFiledEnumActiveFrom OrganizationStructureRequiredFiledEnum = "activeFrom"

	OrganizationStructureRequiredFiledEnumActiveTo OrganizationStructureRequiredFiledEnum = "activeTo"

	OrganizationStructureRequiredFiledEnumAltDescription OrganizationStructureRequiredFiledEnum = "altDescription"

	OrganizationStructureRequiredFiledEnumBalanceUnitID OrganizationStructureRequiredFiledEnum = "balanceUnitID"

	OrganizationStructureRequiredFiledEnumBudmanID OrganizationStructureRequiredFiledEnum = "budmanID"

	OrganizationStructureRequiredFiledEnumCalendarID OrganizationStructureRequiredFiledEnum = "calendarID"

	OrganizationStructureRequiredFiledEnumClusterID OrganizationStructureRequiredFiledEnum = "clusterID"

	OrganizationStructureRequiredFiledEnumCostCenterID OrganizationStructureRequiredFiledEnum = "costCenterID"

	OrganizationStructureRequiredFiledEnumCreatedAt OrganizationStructureRequiredFiledEnum = "createdAt"

	OrganizationStructureRequiredFiledEnumDeletedAt OrganizationStructureRequiredFiledEnum = "deletedAt"

	OrganizationStructureRequiredFiledEnumDescription OrganizationStructureRequiredFiledEnum = "description"

	OrganizationStructureRequiredFiledEnumFunctionalBlockID OrganizationStructureRequiredFiledEnum = "functionalBlockID"

	OrganizationStructureRequiredFiledEnumIsVisible OrganizationStructureRequiredFiledEnum = "isVisible"

	OrganizationStructureRequiredFiledEnumLocationID OrganizationStructureRequiredFiledEnum = "locationID"

	OrganizationStructureRequiredFiledEnumOrgCode OrganizationStructureRequiredFiledEnum = "orgCode"

	OrganizationStructureRequiredFiledEnumOrganizationID OrganizationStructureRequiredFiledEnum = "organizationID"

	OrganizationStructureRequiredFiledEnumProductID OrganizationStructureRequiredFiledEnum = "productID"

	OrganizationStructureRequiredFiledEnumShortName OrganizationStructureRequiredFiledEnum = "shortName"

	OrganizationStructureRequiredFiledEnumSupervisorID OrganizationStructureRequiredFiledEnum = "supervisorID"

	OrganizationStructureRequiredFiledEnumTitle OrganizationStructureRequiredFiledEnum = "title"

	OrganizationStructureRequiredFiledEnumUnitTypeID OrganizationStructureRequiredFiledEnum = "unitTypeID"

	OrganizationStructureRequiredFiledEnumUpdatedAt OrganizationStructureRequiredFiledEnum = "updatedAt"

	OrganizationStructureRequiredFiledEnumVirtualBalanceUnitID OrganizationStructureRequiredFiledEnum = "virtualBalanceUnitID"
)

// Defines values for TaskState.
const (
	TaskStateComplete TaskState = "Complete"

	TaskStateCreated TaskState = "Created"

	TaskStateInProgress TaskState = "InProgress"
)

// Defines values for TaskStatus.
const (
	TaskStatusError TaskStatus = "Error"

	TaskStatusSuccess TaskStatus = "Success"
)

// Defines values for TaskStatusRespBodyState.
const (
	TaskStatusRespBodyStateComplete TaskStatusRespBodyState = "complete"

	TaskStatusRespBodyStateCreated TaskStatusRespBodyState = "created"

	TaskStatusRespBodyStateInProgress TaskStatusRespBodyState = "inProgress"
)

// Defines values for TaskStatusRespBodyStatus.
const (
	TaskStatusRespBodyStatusError TaskStatusRespBodyStatus = "error"

	TaskStatusRespBodyStatusSuccess TaskStatusRespBodyStatus = "success"
)

// APIError defines model for APIError.
type APIError struct {
	// Сообщение об ошибке
	Message string `json:"message"`
}

// Absence defines model for Absence.
type Absence struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAbsence)
	ChangeableAbsence `yaml:",inline"`
}

// AbsenceAdditionalAttributes defines model for AbsenceAdditionalAttributes.
type AbsenceAdditionalAttributes struct {
	// PipelineID объекта
	AssignmentID UUID `json:"assignmentID"`

	// Дата приказа на отсутствие
	OrderDate *openapi_types.Date `json:"orderDate,omitempty"`

	// Номер приказа на отсутствие
	OrderNumber *string `json:"orderNumber,omitempty"`
}

// AbsenceToCreate defines model for AbsenceToCreate.
type AbsenceToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAbsence)
	ChangeableAbsence `yaml:",inline"`
}

// AbsenceToUpdate defines model for AbsenceToUpdate.
type AbsenceToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAbsence)
	ChangeableAbsence `yaml:",inline"`
}

// AbsenceType defines model for AbsenceType.
type AbsenceType struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAbsenceType)
	ChangeableAbsenceType `yaml:",inline"`
}

// AbsenceTypeToCreate defines model for AbsenceTypeToCreate.
type AbsenceTypeToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAbsenceType)
	ChangeableAbsenceType `yaml:",inline"`
}

// AbsenceTypeToUpdate defines model for AbsenceTypeToUpdate.
type AbsenceTypeToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAbsenceType)
	ChangeableAbsenceType `yaml:",inline"`
}

// период активности объекта
type Activity struct {
	// дата начала действия
	From *openapi_types.Date `json:"from,omitempty"`

	// дата окончания действия
	To *openapi_types.Date `json:"to,omitempty"`
}

// Информация об адресе проживания человека
type Address struct {
	// Корпус
	Building *string `json:"building,omitempty"`

	// Город
	City *string `json:"city,omitempty"`

	// Страна
	Country *string `json:"country,omitempty"`

	// Район (???)
	Distr *string `json:"distr,omitempty"`

	// Квартира
	Flat *string `json:"flat,omitempty"`

	// Дом
	House *string `json:"house,omitempty"`

	// Округ (???)
	Location *string `json:"location,omitempty"`

	// Почтовый индекс
	Postal *string `json:"postal,omitempty"`

	// Регион, города регионального значения
	Region *string `json:"region,omitempty"`

	// Улица
	Street *string `json:"street,omitempty"`
}

// Allowance defines model for Allowance.
type Allowance struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAllowance)
	ChangeableAllowance `yaml:",inline"`
}

// AllowanceToCreate defines model for AllowanceToCreate.
type AllowanceToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAllowance)
	ChangeableAllowance `yaml:",inline"`
}

// AllowanceToUpdate defines model for AllowanceToUpdate.
type AllowanceToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAllowance)
	ChangeableAllowance `yaml:",inline"`
}

// Applicant defines model for Applicant.
type Applicant struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableApplicant)
	ChangeableApplicant `yaml:",inline"`
}

// ApplicantToCreate defines model for ApplicantToCreate.
type ApplicantToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableApplicant)
	ChangeableApplicant `yaml:",inline"`
}

// ApplicantToUpdate defines model for ApplicantToUpdate.
type ApplicantToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableApplicant)
	ChangeableApplicant `yaml:",inline"`
}

// Assignment defines model for Assignment.
type Assignment struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAssignment)
	ChangeableAssignment `yaml:",inline"`
}

// AssignmentCategory defines model for AssignmentCategory.
type AssignmentCategory struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAssignmentCategory)
	ChangeableAssignmentCategory `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// AssignmentStatus defines model for AssignmentStatus.
type AssignmentStatus struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAssignmentStatus)
	ChangeableAssignmentStatus `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// AssignmentToCreate defines model for AssignmentToCreate.
type AssignmentToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAssignment)
	ChangeableAssignment `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ForceCombinationStatus)
	ForceCombinationStatus `yaml:",inline"`
}

// AssignmentToUpdate defines model for AssignmentToUpdate.
type AssignmentToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAssignment)
	ChangeableAssignment `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ForceCombinationStatus)
	ForceCombinationStatus `yaml:",inline"`
}

// AssignmentType defines model for AssignmentType.
type AssignmentType struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAssignmentType)
	ChangeableAssignmentType `yaml:",inline"`
}

// AssignmentWithEmployee defines model for AssignmentWithEmployee.
type AssignmentWithEmployee struct {
	// Embedded struct due to allOf(#/components/schemas/Assignment)
	Assignment `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Employee *EmployeeWithPerson `json:"employee,omitempty"`

	// Штатная единица - позиция в организационной структуре, занимаемая работником
	StaffUnit *StaffUnit `json:"staffUnit,omitempty"`
}

// AssignmentsWithHistoryToCreate defines model for AssignmentsWithHistoryToCreate.
type AssignmentsWithHistoryToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAssignmentWithHistory)
	ChangeableAssignmentWithHistory `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ForceCombinationStatus)
	ForceCombinationStatus `yaml:",inline"`
}

// AssignmentsWithHistoryToUpdate defines model for AssignmentsWithHistoryToUpdate.
type AssignmentsWithHistoryToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableAssignmentWithHistory)
	ChangeableAssignmentWithHistory `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ForceCombinationStatus)
	ForceCombinationStatus `yaml:",inline"`
}

// BackBonusPaymentCategory defines model for BackBonusPaymentCategory.
type BackBonusPaymentCategory struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableBackBonusPaymentCategory)
	ChangeableBackBonusPaymentCategory `yaml:",inline"`
}

// BackBonusPaymentCategoryToCreate defines model for BackBonusPaymentCategoryToCreate.
type BackBonusPaymentCategoryToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableBackBonusPaymentCategory)
	ChangeableBackBonusPaymentCategory `yaml:",inline"`
}

// BackBonusPaymentCategoryToUpdate defines model for BackBonusPaymentCategoryToUpdate.
type BackBonusPaymentCategoryToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableBackBonusPaymentCategory)
	ChangeableBackBonusPaymentCategory `yaml:",inline"`
}

// BalanceUnit defines model for BalanceUnit.
type BalanceUnit struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableBalanceUnit)
	ChangeableBalanceUnit `yaml:",inline"`
}

// Bank defines model for Bank.
type Bank struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableBank)
	ChangeableBank `yaml:",inline"`
}

// BankToCreate defines model for BankToCreate.
type BankToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableBank)
	ChangeableBank `yaml:",inline"`
}

// BankToUpdate defines model for BankToUpdate.
type BankToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableBank)
	ChangeableBank `yaml:",inline"`
}

// Стандартный набор полей, генерящихся в сервисе для каждой сущности
type BasicObject struct {
	// Дата создания объекта
	CreatedAt time.Time `json:"createdAt"`

	// Дата удаления объекта
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// PipelineID объекта
	Id UUID `json:"id"`

	// Дата изменения объекта
	UpdatedAt time.Time `json:"updatedAt"`
}

// Стандартный набор полей, генерящихся в сервисе для каждой сущности без обязательных createdAt, updatedAt
type BasicObjectWithoutRequiredCreatedAtUpdatedAt struct {
	// Дата создания объекта
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Дата удаления объекта
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// PipelineID объекта
	Id UUID `json:"id"`

	// Дата изменения объекта
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// BatchCreatedItem defines model for BatchCreatedItem.
type BatchCreatedItem struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/CreatedItem)
	CreatedItem `yaml:",inline"`
}

// Calendar defines model for Calendar.
type Calendar struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableCalendar)
	ChangeableCalendar `yaml:",inline"`
}

// CalendarDay defines model for CalendarDay.
type CalendarDay struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableCalendarDay)
	ChangeableCalendarDay `yaml:",inline"`
}

// CalendarDayToCreate defines model for CalendarDayToCreate.
type CalendarDayToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableCalendarDay)
	ChangeableCalendarDay `yaml:",inline"`
}

// CalendarDayToUpdate defines model for CalendarDayToUpdate.
type CalendarDayToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableCalendarDay)
	ChangeableCalendarDay `yaml:",inline"`
}

// CalendarDayType defines model for CalendarDayType.
type CalendarDayType string

// CalendarToCreate defines model for CalendarToCreate.
type CalendarToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableCalendar)
	ChangeableCalendar `yaml:",inline"`
}

// CalendarToUpdate defines model for CalendarToUpdate.
type CalendarToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableCalendar)
	ChangeableCalendar `yaml:",inline"`
}

// ChangPersonWithDoc defines model for ChangPersonWithDoc.
type ChangPersonWithDoc struct {
	// Embedded struct due to allOf(#/components/schemas/ChangeablePerson)
	ChangeablePerson `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Documents *ChangeableDocument `json:"documents,omitempty"`
}

// ChangeableAbsence defines model for ChangeableAbsence.
type ChangeableAbsence struct {
	// период активности объекта
	Activity Activity `json:"activity"`

	// Кол-во дней отсутствия
	Days *int `json:"days,omitempty"`

	// PipelineID объекта
	EmployeeID               UUID                          `json:"employeeID"`
	ListAdditionalAttributes []AbsenceAdditionalAttributes `json:"listAdditionalAttributes"`

	// PipelineID объекта
	ParentAbsenceID *UUID `json:"parentAbsenceID,omitempty"`

	// PipelineID объекта
	TypeID UUID `json:"typeID"`
}

// причина отсутствия работника на рабочем месте
type ChangeableAbsenceType struct {
	// альтернативное название типа отсутствия
	AltName *string `json:"altName,omitempty"`

	// категория типа отсутствия (латиница)
	CategoryCode *string `json:"categoryCode,omitempty"`

	// категория отсутствия для отчета
	LegalCategory *string `json:"legalCategory,omitempty"`

	// название типа отсутствия
	Name string `json:"name"`

	// Полное имя отсутствия для отчетности
	ReportFullName *string `json:"reportFullName,omitempty"`

	// название вида отпуска (может быть uuid)
	VacacionName *string `json:"vacacionName,omitempty"`
}

// Технический объект для внутреннего использования
type ChangeableAllowance struct {
	// период активности объекта
	Activity *Activity `json:"activity,omitempty"`

	// Альтернативный код надбавки
	AltCode *string `json:"altCode,omitempty"`

	// Идентификатор назначения
	AssignmentID string `json:"assignmentID"`

	// Код надбавки
	Code *string `json:"code,omitempty"`

	// Буквенный код валюты в соответствии с ISO 4217, заполнено только если kind = cash
	Currency *string `json:"currency,omitempty"`

	// PipelineID объекта
	DonorStaffUnitID *UUID                   `json:"donorStaffUnitID,omitempty"`
	Kind             ChangeableAllowanceKind `json:"kind"`

	// Описание надбавки
	Name *string `json:"name,omitempty"`

	// Размер надбавки
	Value string `json:"value"`
}

// ChangeableAllowanceKind defines model for ChangeableAllowance.Kind.
type ChangeableAllowanceKind string

// Претендент
type ChangeableApplicant struct {
	// Идентификатор претендента
	ApplicationCode string `json:"applicationCode"`

	// Дата окончания рассмотрения претендента
	ConsiderationEnd *openapi_types.Date `json:"considerationEnd,omitempty"`

	// Дата приема претендента на рассмотрение
	ConsiderationStart *openapi_types.Date `json:"considerationStart,omitempty"`
	EmployeeID         *string             `json:"employeeID,omitempty"`
	StaffUnitID        *string             `json:"staffUnitID,omitempty"`
}

// ChangeableAssignment defines model for ChangeableAssignment.
type ChangeableAssignment struct {
	// Рабочая нагрузка сотрудника на назначении
	FTE *float64 `json:"FTE,omitempty"`

	// период активности объекта
	Activity *Activity `json:"activity,omitempty"`

	// Дата увольнения
	ActualTerminationDate *openapi_types.Date `json:"actualTerminationDate,omitempty"`

	// Версия объекта назначения
	AssignmentObjectVersion *string `json:"assignmentObjectVersion,omitempty"`

	// PipelineID объекта
	BalanceUnitID *UUID `json:"balanceUnitID,omitempty"`

	// Версия объекта бюджета
	BudjetObjectVersion *string `json:"budjetObjectVersion,omitempty"`

	// PipelineID объекта
	CategoryID *UUID `json:"categoryID,omitempty"`

	// Тип совместительства назначения, вычисляется на основе атрибутов assignment category и primary.
	CombinationStatus *CombinationStatus `json:"combinationStatus,omitempty"`

	// PipelineID договора
	ContractID *string `json:"contractID,omitempty"`

	// PipelineID центра затрат
	CostCenterId *string `json:"costCenterId,omitempty"`

	// PipelineID сотрудника-руководителя, указывается только для сотрудников на договоре ГПХ
	DgphSupervisorID *string `json:"dgphSupervisorID,omitempty"`

	// Районный коэффициент
	DistrictCoefficient *string `json:"districtCoefficient,omitempty"`

	// Сотруднику доступна электронная подпись документ
	ESignAllowed *bool `json:"eSignAllowed,omitempty"`

	// Окончание действия электронной подписи документов
	ESignAllowedEnd *openapi_types.Date `json:"eSignAllowedEnd,omitempty"`

	// Начало действия электронной подписи документов
	ESignAllowedStart *openapi_types.Date `json:"eSignAllowedStart,omitempty"`

	// PipelineID сотрудника
	EmployeeId *string `json:"employeeId,omitempty"`

	// Дата найма
	HireDate *openapi_types.Date `json:"hireDate,omitempty"`

	// признак временного назначения
	IsTemporary *bool `json:"isTemporary,omitempty"`

	// PipelineID объекта
	LeavingReasonID *UUID `json:"leavingReasonID,omitempty"`

	// id локации
	LocationId *string `json:"locationId,omitempty"`

	// employeeId руководителя
	ManagerId *string `json:"managerId,omitempty"`

	// PipelineID объекта
	PayTypeID *UUID `json:"payTypeID,omitempty"`

	// Данное назначение является основным для сотрудника
	Primary *bool `json:"primary,omitempty"`

	// Дата окончания испытательного срока
	ProbationEndDate *openapi_types.Date `json:"probationEndDate,omitempty"`

	// PipelineID продукта
	ProductID *string `json:"productID,omitempty"`

	// Планируемая дата увольнения
	ProjectedTerminationDate *openapi_types.Date `json:"projectedTerminationDate,omitempty"`

	// Категория персонала
	StaffCategory *string `json:"staffCategory,omitempty"`

	// PipelineID штатной единицы
	StaffUnitId *string `json:"staffUnitId,omitempty"`

	// PipelineID статуса назначения
	StatusId *string `json:"statusId,omitempty"`

	// Табельный номер
	TabNum *string `json:"tabNum,omitempty"`

	// PipelineID типа назначения
	TypeId *string `json:"typeId,omitempty"`

	// PipelineID объекта
	UnitID *UUID `json:"unitID,omitempty"`

	// PipelineID объекта
	VirtualBalanceUnitID *UUID `json:"virtualBalanceUnitID,omitempty"`
}

// ChangeableAssignmentCategory defines model for ChangeableAssignmentCategory.
type ChangeableAssignmentCategory struct {
	// Описание категории назначения
	Title *string `json:"title,omitempty"`
}

// ChangeableAssignmentStatus defines model for ChangeableAssignmentStatus.
type ChangeableAssignmentStatus struct {
	// Описание статуса назначения
	Title *string `json:"title,omitempty"`
}

// ChangeableAssignmentType defines model for ChangeableAssignmentType.
type ChangeableAssignmentType struct {
	// Описание типа назначения
	Title *string `json:"title,omitempty"`
}

// ChangeableAssignmentWithHistory defines model for ChangeableAssignmentWithHistory.
type ChangeableAssignmentWithHistory struct {
	// Embedded struct due to allOf(#/components/schemas/ChangeableAssignment)
	ChangeableAssignment `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	AssignmentID string `json:"assignmentID"`
}

// ChangeableBackBonusPaymentCategory defines model for ChangeableBackBonusPaymentCategory.
type ChangeableBackBonusPaymentCategory struct {
	// категория премирования сотрудников бэкофиса
	Code string `json:"code"`

	// Описание БД на ШЕ
	Name string `json:"name"`
}

// ChangeableBalanceUnit defines model for ChangeableBalanceUnit.
type ChangeableBalanceUnit struct {
	// Код балансовой единицы
	Code *string `json:"code,omitempty"`

	// Название балансовой единицы
	Title *string `json:"title,omitempty"`
}

// Информация о банке
type ChangeableBank struct {
	// БИК головного банка
	BankBIC string `json:"bankBIC"`

	// Наименование головного банка
	BankName string `json:"bankName"`

	// БИК филиала банка
	BranchBIC string `json:"branchBIC"`

	// Наименование филиала банка
	BranchName string `json:"branchName"`

	// корреспондентский счет банка
	CorrespondentAccount *string `json:"correspondentAccount,omitempty"`

	// Страна банка
	Country string `json:"country"`
}

// ChangeableCalendar defines model for ChangeableCalendar.
type ChangeableCalendar struct {
	// Название календаря праздников
	HolidayCalendar string `json:"holidayCalendar"`

	// Календарь является основным. Основной пятидневный
	Primary *bool `json:"primary,omitempty"`

	// PipelineID объекта
	UnitID UUID `json:"unitID"`

	// Тип рабочей недели
	WeekType *string `json:"weekType,omitempty"`
}

// ChangeableCalendarDay defines model for ChangeableCalendarDay.
type ChangeableCalendarDay struct {
	// PipelineID календаря
	CalendarID string `json:"calendarID"`

	// Дата
	Date        openapi_types.Date `json:"date"`
	DayType     *CalendarDayType   `json:"dayType,omitempty"`
	HolidayName *string            `json:"holidayName,omitempty"`

	// Дата на которую перенесен данный тип дня
	TransDate *openapi_types.Date `json:"transDate,omitempty"`
}

// ChangeableCluster defines model for ChangeableCluster.
type ChangeableCluster struct {
	// Описание кластера
	Description *string `json:"description,omitempty"`

	// Название кластера
	Title string `json:"title"`
}

// ChangeableContract defines model for ChangeableContract.
type ChangeableContract struct {
	// PipelineID сотрудника
	EmployeeId *string `json:"employeeId,omitempty"`

	// контракт действует по
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// PipelineID объекта
	LocationID *UUID `json:"locationID,omitempty"`

	// порядковый номер договора
	Number *string `json:"number,omitempty"`

	// Количество дней удаленной работы
	RemoteDays *string `json:"remoteDays,omitempty"`

	// контракт действует с
	StartDate *openapi_types.Date `json:"startDate,omitempty"`

	// PipelineID статуса контракта
	StatusId *string `json:"statusId,omitempty"`

	// PipelineID типа контракта
	TypeId *string `json:"typeId,omitempty"`
}

// ChangeableContractStatus defines model for ChangeableContractStatus.
type ChangeableContractStatus struct {
	// Наименование статуса контракта
	Name *string `json:"name,omitempty"`
}

// ChangeableContractType defines model for ChangeableContractType.
type ChangeableContractType struct {
	// Описание типа контракта
	Title *string `json:"title,omitempty"`
}

// ChangeableCostCenter defines model for ChangeableCostCenter.
type ChangeableCostCenter struct {
	Code string `json:"code"`

	// Описание центра затрат
	Description *string `json:"description,omitempty"`

	// Категория персонала
	GroupName *string `json:"groupName,omitempty"`

	// Руководитель ЦФО
	ManagerID *string  `json:"managerID,omitempty"`
	ParentIDs *IDsList `json:"parentIDs,omitempty"`
}

// Изменяемые параметры данных об источнике финансирования ДГПХ
type ChangeableDGPHDonor struct {
	// период активности объекта
	Activity     *Activity `json:"activity,omitempty"`
	AssignmentID string    `json:"assignmentID"`

	// доноры бюджета ДГПХ
	Donors []DGPHBudgetDonor `json:"donors"`

	// максимальная сумма ДГПХ
	MaxSum *string `json:"maxSum,omitempty"`

	// период выплат
	PaymentPeriod *string `json:"paymentPeriod,omitempty"`
	PersonID      string  `json:"personID"`

	// роль ДГПХ сотрудника
	Role        *string `json:"role,omitempty"`
	StaffUnitID string  `json:"staffUnitID"`

	// тип ДГПХ
	Type *string `json:"type,omitempty"`
}

// Параметры категории нетрудоспособности
type ChangeableDisabilityCategory struct {
	// Код категории нетрудоспособности
	Code string `json:"code"`

	// Наименование категории нетрудоспособности
	Title string `json:"title"`
}

// Изменяемые параметры данных о дистанционной работе
type ChangeableDistWork struct {
	// период активности объекта
	Activity *Activity `json:"activity,omitempty"`

	// PipelineID объекта
	AssignmentID UUID `json:"assignmentID"`

	// дата
	Date *openapi_types.Date `json:"date,omitempty"`

	// количество дней в неделю дист. труда
	DayDist *string `json:"dayDist,omitempty"`

	// расположение
	Location *string `json:"location,omitempty"`

	// номер
	Number *string `json:"number,omitempty"`

	// PipelineID объекта
	PersonID UUID `json:"personID"`

	// график работы
	TimeSchedule *string `json:"timeSchedule,omitempty"`

	// тип труда
	TypeDistWork *string `json:"typeDistWork,omitempty"`
}

// ChangeableDocument defines model for ChangeableDocument.
type ChangeableDocument struct {
	// Информация об адресе проживания человека
	Address *Address `json:"address,omitempty"`

	// Гражданство
	Citizenship *string `json:"citizenship,omitempty"`

	// Дата рождения
	DateOfBirth *openapi_types.Date `json:"dateOfBirth,omitempty"`

	// PipelineID объекта
	DisabilityCategoryID *UUID `json:"disabilityCategoryID,omitempty"`

	// Информация о трудовой книжке
	EmploymentRecord *EmploymentRecord `json:"employmentRecord,omitempty"`

	// ИНН
	Inn *string `json:"inn,omitempty"`

	// Информация о категории годности к службе и типе документа
	MilitaryData *MilitaryData `json:"militaryData,omitempty"`

	// Паспортные данные
	Passport *Passport `json:"passport,omitempty"`

	// СНИЛС в формате 00000000000. Без разделителей, пробелов, только 11 чисел
	Snils *string `json:"snils,omitempty"`
}

// Изменяемые параметры объекта режима оплаты
type ChangeableEarningPolicy struct {
	// Наименование режима оплаты
	Title string `json:"title"`

	// Идентификатор организации
	UnitID string `json:"unitID"`
}

// ChangeableEmployee defines model for ChangeableEmployee.
type ChangeableEmployee struct {
	// период активности объекта
	Activity *Activity `json:"activity,omitempty"`

	// наличие корпоративного такси
	CorpTaxiAgreement *bool `json:"corpTaxiAgreement,omitempty"`

	// Адрес электронной почты
	Email *string `json:"email,omitempty"`

	// Логин
	Login *string `json:"login,omitempty"`

	// Идентификатор организации
	OrganizationId *string `json:"organizationId,omitempty"`

	// наличие разрешения на обработку персональных данных, в т.ч. на отображение на портале
	PdProcessingAllowed bool `json:"pdProcessingAllowed"`

	// Идентификатор человека
	PersonId *string `json:"personId,omitempty"`

	// Телефон
	Phone *string `json:"phone,omitempty"`

	// Идентификатор роли, мало у кого имеется
	RoleID *string `json:"roleID,omitempty"`

	// Табельный номер сотрудника
	TabNum *string `json:"tabNum,omitempty"`

	// PipelineID типа сотрудника
	TypeID *string `json:"typeID,omitempty"`
}

// ChangeableEmployeeRole defines model for ChangeableEmployeeRole.
type ChangeableEmployeeRole struct {
	// Описание роли
	Title *string `json:"title,omitempty"`
}

// ChangeableEmployeeType defines model for ChangeableEmployeeType.
type ChangeableEmployeeType struct {
	// Наименование типа сотрудника
	Name *string `json:"name,omitempty"`
}

// ChangeableFunctionalBlock defines model for ChangeableFunctionalBlock.
type ChangeableFunctionalBlock struct {
	// Название функционального блока
	Name string `json:"name"`

	// Сокращение названия функционального блока
	ShortName string `json:"shortName"`
}

// ChangeableGrade defines model for ChangeableGrade.
type ChangeableGrade struct {
	// Код грейда
	Code string `json:"code"`

	// Максимальная вилка грейда
	Max *string `json:"max,omitempty"`

	// Средняя вилка грейда
	Mid *string `json:"mid,omitempty"`

	// Минимальная вилка грейда
	Min *string `json:"min,omitempty"`

	// Название грейда
	Name string `json:"name"`

	// PipelineID объекта
	UnitID *UUID `json:"unitID,omitempty"`
}

// ChangeableHierarchy defines model for ChangeableHierarchy.
type ChangeableHierarchy struct {
	// Является ли данная иерархия основной
	IsPrimary *bool `json:"isPrimary,omitempty"`

	// Наименование иерархии
	Name *string `json:"name,omitempty"`
}

// ChangeableHierarchyLink defines model for ChangeableHierarchyLink.
type ChangeableHierarchyLink struct {
	// PipelineID подразделения-наследника, находящегося в иерархическом подчинении у подразделения родителя
	ChildID string `json:"childID"`

	// PipelineID иерархии подразделений
	HierarchyID string `json:"hierarchyID"`

	// PipelineID подразделения-родителя, выше стоящего в иерархии
	ParentID *string `json:"parentID,omitempty"`
}

// Изменяемые параметры данных о часовой тарифной ставки должности
type ChangeableHourlyRate struct {
	// период активности объекта
	Activity *Activity `json:"activity,omitempty"`

	// Код области
	AreaCode *string `json:"areaCode,omitempty"`

	// Название области
	AreaName *string `json:"areaName,omitempty"`

	// Код города
	CityCode *string `json:"cityCode,omitempty"`

	// Название города
	CityName *string `json:"cityName,omitempty"`

	// Код страны
	CountryCode *string `json:"countryCode,omitempty"`

	// Название страны
	CountryName *string `json:"countryName,omitempty"`

	// размер оплаты
	PayRate float32 `json:"payRate"`

	// идентификатор должности
	PositionID string `json:"positionID"`

	// Код региона
	RegionCode *string `json:"regionCode,omitempty"`

	// Название региона
	RegionName *string `json:"regionName,omitempty"`

	// Код населенного пункта
	SettlementCode *string `json:"settlementCode,omitempty"`

	// Название населенного пункта
	SettlementName *string `json:"settlementName,omitempty"`

	// PipelineID объекта
	UnitID UUID `json:"unitID"`
}

// ChangeableLeavingReason defines model for ChangeableLeavingReason.
type ChangeableLeavingReason struct {
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
}

// ChangeableLocation defines model for ChangeableLocation.
type ChangeableLocation struct {
	// код территории (КЛАДР)
	AreaCode *string `json:"areaCode,omitempty"`

	// город
	City *string `json:"city,omitempty"`

	// город, код территории (КЛАДР)
	CityCode *string `json:"cityCode,omitempty"`

	// префикс города
	CityPrefix *string `json:"cityPrefix,omitempty"`

	// страна
	CountryName *string `json:"countryName,omitempty"`

	// район
	District *string `json:"district,omitempty"`

	// Районный коэффициент
	DistrictCoefficient *string `json:"districtCoefficient,omitempty"`

	// префикс района
	DistrictPrefix *string `json:"districtPrefix,omitempty"`

	// дом
	House *string `json:"house,omitempty"`

	// дата прекращения использования
	InactiveDate *openapi_types.Date `json:"inactiveDate,omitempty"`

	// офис
	Office *string `json:"office,omitempty"`

	// Почтовый индекс
	PostalCode *string `json:"postalCode,omitempty"`

	// регион
	Region *string `json:"region,omitempty"`

	// регион, код территории (КЛАДР)
	RegionCode *string `json:"regionCode,omitempty"`

	// префикс региона
	RegionPrefix *string `json:"regionPrefix,omitempty"`

	// населенный пункт
	Sattlement *string `json:"sattlement,omitempty"`

	// префикс нас. пункта
	SattlementPrefix *string `json:"sattlementPrefix,omitempty"`

	// корпус
	Section *string `json:"section,omitempty"`

	// Код КЛАДР населённого пункта
	SettlementCode *string `json:"settlementCode,omitempty"`

	// улица
	Street *string `json:"street,omitempty"`

	// улица, код территории (КЛАДР)
	StreetCode *string `json:"streetCode,omitempty"`

	// префикс улицы
	StreetPrefix *string `json:"streetPrefix,omitempty"`

	// Местонахождение
	Whereabouts *string `json:"whereabouts,omitempty"`
}

// Изменяемые параметры офиса
type ChangeableOffice struct {
	// PipelineID локации, где находится офис
	LocationID string `json:"locationID"`

	// Наименование офиса
	Name string `json:"name"`
}

// ChangeableOrganization defines model for ChangeableOrganization.
type ChangeableOrganization struct {
	// PipelineID календаря
	CalendarId *string `json:"calendarId,omitempty"`

	// ИНН
	Inn *string `json:"inn,omitempty"`

	// КПП
	Kpp *string `json:"kpp,omitempty"`

	// ОГРН
	Ogrn *string `json:"ogrn,omitempty"`

	// организационная единица - подразделение/отдел/организация
	Unit *Unit `json:"unit,omitempty"`
}

// ChangeablePAOBonusPaymentCategory defines model for ChangeablePAOBonusPaymentCategory.
type ChangeablePAOBonusPaymentCategory struct {
	// PipelineID премирования ПАО
	Code string `json:"code"`

	// название категории премирования
	Name string `json:"name"`
}

// Изменяемые параметры объекта типа оплаты
type ChangeablePayType struct {
	// Дата последнего обновления типа оплаты
	LastUpdateDate time.Time `json:"lastUpdateDate"`

	// Наименование типа оплаты
	Title string `json:"title"`
}

// ChangeablePerson defines model for ChangeablePerson.
type ChangeablePerson struct {
	// Код физлица 1С
	Code1C *string `json:"code1C,omitempty"`

	// PipelineID физлица, который считается оригинальным в случае дублирования
	DeduplicatedID *string `json:"deduplicatedID,omitempty"`

	// Имя
	FirstName *string `json:"firstName,omitempty"`

	// Пол
	Gender *string `json:"gender,omitempty"`

	// Фамилия
	LastName *string `json:"lastName,omitempty"`

	// Отчество/дополнительные имена
	MiddleNames *string `json:"middleNames,omitempty"`

	// PipelineID объекта
	PictureID *UUID `json:"pictureID,omitempty"`

	// Дата обновления фото
	PictureUpdateDate *openapi_types.Date `json:"pictureUpdateDate,omitempty"`
}

// Изменяемые параметры данных об образовании сотрудника
type ChangeablePersonEducation struct {
	// Дата выдачи диплома/сертификата
	DocDate *openapi_types.Date `json:"docDate,omitempty"`

	// Номер документа
	DocNum *string `json:"docNum,omitempty"`

	// Серия документа
	DocSeries *string `json:"docSeries,omitempty"`

	// Тип документа
	DocType *string `json:"docType,omitempty"`

	// дата окончания обучения
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// Форма получения образования
	Form *string `json:"form,omitempty"`

	// ОКСО
	Okso *string `json:"okso,omitempty"`

	// id физ лица
	PersonID string `json:"personID"`

	// Квалификация
	Qualification *string `json:"qualification,omitempty"`

	// описание специальности
	Speciality *string `json:"speciality,omitempty"`

	// дата начала обучения
	StartDate *openapi_types.Date `json:"startDate,omitempty"`

	// Тип образования
	Type *string `json:"type,omitempty"`

	// учебное заведение
	University *string `json:"university,omitempty"`
}

// ChangeablePersonalSchedule defines model for ChangeablePersonalSchedule.
type ChangeablePersonalSchedule struct {
	// период активности объекта
	Activity *Activity `json:"activity,omitempty"`

	// PipelineID объекта
	AssignmentID UUID `json:"assignmentID"`

	// PipelineID объекта
	EarningPolicyID *UUID `json:"earningPolicyID,omitempty"`

	// Суммированный учет
	NormDay *bool `json:"normDay,omitempty"`

	// PipelineID объекта
	ScheduleID UUID `json:"scheduleID"`

	// PipelineID типа рабочего графика, используется только для записи
	ShiftTypeID *string                             `json:"shiftTypeID,omitempty"`
	WeekType    *ChangeablePersonalScheduleWeekType `json:"weekType,omitempty"`

	// PipelineID длительность рабочей недели, используется только для записи
	WorkWeekHoursID *string `json:"workWeekHoursID,omitempty"`
}

// ChangeablePersonalScheduleWeekType defines model for ChangeablePersonalSchedule.WeekType.
type ChangeablePersonalScheduleWeekType string

// ChangeablePosition defines model for ChangeablePosition.
type ChangeablePosition struct {
	// Идентификатор категории должности
	CategoryID *string `json:"categoryID,omitempty"`

	// Название позиции
	Title *string `json:"title,omitempty"`
}

// ChangeablePositionCategory defines model for ChangeablePositionCategory.
type ChangeablePositionCategory struct {
	Description string `json:"description"`
}

// ChangeableProduct defines model for ChangeableProduct.
type ChangeableProduct struct {
	// код продукта
	Code string `json:"code"`

	// название продукта
	Name string `json:"name"`
}

// Изменяемые параметры данных о продуктовых структурах
type ChangeableProductEntity struct {
	// Дополнительные атрибуты (для каждого типа продуктовой структуры свои)
	Attributes *map[string]interface{} `json:"attributes,omitempty"`

	// Наименование стрима
	Name string `json:"name"`

	// Тип продуктовой структуры
	Type ChangeableProductEntityType `json:"type"`
}

// Тип продуктовой структуры
type ChangeableProductEntityType string

// Изменяемые параметры о иерархии продуктовых структур
type ChangeableProductEntityLink struct {
	// Идентификатор продуктовой структуры ребенка
	ChildID string `json:"childID"`

	// Идентификатор продуктовой структуры родителя
	ParentID string `json:"parentID"`
}

// Изменяемые параметры данных о статусах продукта
type ChangeableProductStatuses struct {
	// Наименование стрима
	Name string `json:"name"`
}

// ChangeableSalary defines model for ChangeableSalary.
type ChangeableSalary struct {
	// период активности объекта
	Activity *Activity `json:"activity,omitempty"`

	// Идентификатор назначения
	AssignmentId string `json:"assignmentId"`

	// Буквенный код валюты в соответствии с ISO 4217
	Currency string `json:"currency"`

	// Cумма зарплаты
	Value string `json:"value"`
}

// ChangeableSchedule defines model for ChangeableSchedule.
type ChangeableSchedule struct {
	// Флаг, показывающий согласовано ли данное расписание
	ApprovalStatus *bool `json:"approvalStatus,omitempty"`

	// Описание формата и размера перерывов за смену
	BreakDescription string `json:"breakDescription"`

	// PipelineID объекта
	CalendarID *UUID `json:"calendarID,omitempty"`

	// Описание расписания
	Description string `json:"description"`

	// PipelineID объекта
	ShiftTypeID *UUID `json:"shiftTypeID,omitempty"`

	// Название расписания
	Title string `json:"title"`

	// PipelineID объекта
	UnitID *UUID `json:"unitID,omitempty"`
}

// ChangeableScheduleDay defines model for ChangeableScheduleDay.
type ChangeableScheduleDay struct {
	// Описание формата и размера перерывов за смену
	Date openapi_types.Date `json:"date"`

	// ссылка на рабочие часы указанной даты, в слу
	HoursID *string `json:"hoursID,omitempty"`

	// PipelineID объекта
	ScheduleID UUID `json:"scheduleID"`
}

// Тип графика работ, например: Гибкий график с одной сменой
type ChangeableShiftType struct {
	Description string `json:"description"`
}

// ChangeableStaffAvailabilityStatus defines model for ChangeableStaffAvailabilityStatus.
type ChangeableStaffAvailabilityStatus struct {
	Title string `json:"title"`
}

// ChangeableStaffRoles defines model for ChangeableStaffRoles.
type ChangeableStaffRoles struct {
	// Код роли
	Code *string `json:"code,omitempty"`

	// Название роли
	Name *string `json:"name,omitempty"`
}

// ChangeableStaffType defines model for ChangeableStaffType.
type ChangeableStaffType struct {
	// Наименование типа
	Name string `json:"name"`
}

// ChangeableStaffUnit defines model for ChangeableStaffUnit.
type ChangeableStaffUnit struct {
	// Cтавка сотрудника на штатной единице
	FTE      *float64 `json:"FTE,omitempty"`
	Activity *struct {
		End   *openapi_types.Date `json:"end,omitempty"`
		Start *openapi_types.Date `json:"start,omitempty"`
	} `json:"activity,omitempty"`

	// PipelineID штатной единицы административного руководителя
	AdministrativeSupervisorID *string `json:"administrativeSupervisorID,omitempty"`

	// PipelineID статуса доступности штатной единицы
	AvailabilityID *string `json:"availabilityID,omitempty"`

	// PipelineID категории премирования сотрудников бэкофиса
	BackBonusPaymentCategoryID *string `json:"backBonusPaymentCategoryID,omitempty"`

	// Бюджет штатной единицы
	Budget *string `json:"budget,omitempty"`

	// Буквенный код валюты бюджета ШЕ в соответствии с ISO 4217
	BudgetCurrency *string `json:"budgetCurrency,omitempty"`

	// PipelineID для budman
	BudmanID *string `json:"budmanID,omitempty"`

	// PipelineID календаря
	CalendarId *string `json:"calendarId,omitempty"`

	// Дата вывода штатной единицы
	CloseDate *openapi_types.Date `json:"closeDate,omitempty"`

	// Причина вывода штатной единицы
	CloseReason *string `json:"closeReason,omitempty"`

	// Категория критичности для бизнеса
	CriticalityCategory *string `json:"criticalityCategory,omitempty"`

	// Наименование должности (на портале)
	DisplayName *string `json:"displayName,omitempty"`

	// Код оборудования
	EquipmentCategory *string `json:"equipmentCategory,omitempty"`

	// PipelineID функционального блока на ШЕ
	FunctionalBlockID *string `json:"functionalBlockID,omitempty"`

	// PipelineID штатной единицы функционального руководителя
	FunctionalSupervisorID *string `json:"functionalSupervisorID,omitempty"`

	// PipelineID грейда
	GradeId *string `json:"gradeId,omitempty"`

	// код дополнительных выходных за вредные условия труда
	HarmWorkHolidayCode *string `json:"harmWorkHolidayCode,omitempty"`

	// код процентной выработки вредных условий труда
	HarmWorkOutturnCode *string `json:"harmWorkOutturnCode,omitempty"`

	// код процента вредности труда
	HarmWorkPercentCode *string `json:"harmWorkPercentCode,omitempty"`

	// класс вредности
	HarmfullClass *string `json:"harmfullClass,omitempty"`

	// есть ли доступ к инсайдерской информации
	InsideInfoPermission *bool `json:"insideInfoPermission,omitempty"`

	// Признак "Массовая ШЕ (РТК)"
	IsMassStaffUnit *bool `json:"isMassStaffUnit,omitempty"`

	// признак "образующая структуру"
	IsStructForming *bool `json:"isStructForming,omitempty"`

	// Признак руководителя штатной единицы. (Устанавливается вручную)
	IsSupervisor *bool `json:"isSupervisor,omitempty"`

	// Расчетный статус руководителя. True, если существуют другие экземпляры ШЕ, для которых данная ШЕ является руководящей
	IsSupervisorCalc *bool `json:"isSupervisorCalc,omitempty"`

	// Входит ли штатная единица в целевую структуру компании
	IsTargetStructure *bool `json:"isTargetStructure,omitempty"`

	// id локации на которой должен работать сотрудник в рамках данной штатной единицы
	LocationId *string `json:"locationId,omitempty"`

	// Версия ШЕ объекта
	ObjectVersionNumber *string `json:"objectVersionNumber,omitempty"`

	// Проект, по которому введена ШЕ
	OpenProject *string `json:"openProject,omitempty"`

	// Причина ввода штатной единицы
	OpenReason *string `json:"openReason,omitempty"`

	// PipelineID категории премирования ПАО
	PaoBonusPaymentCategoryID *string `json:"paoBonusPaymentCategoryID,omitempty"`

	// PipelineID должности
	PositionId *string `json:"positionId,omitempty"`

	// PipelineID  продукта PPInfo ввода ШЕ
	ProductEntityID *string `json:"productEntityID,omitempty"`

	// Планируемая дата вывода штатной единицы
	ProjectedCloseDate *openapi_types.Date `json:"projectedCloseDate,omitempty"`

	// Номер штатной единицы
	StaffCode *string `json:"staffCode,omitempty"`

	// PipelineID ШЕ предшественника
	StaffPredecessorID *string `json:"staffPredecessorID,omitempty"`

	// Идентификатор роли
	StaffRoleID *string `json:"staffRoleID,omitempty"`

	// Дата начала действия роли
	StaffRoleStart *openapi_types.Date `json:"staffRoleStart,omitempty"`

	// Дата начала доступности ШЕ
	StaffStartDate *openapi_types.Date `json:"staffStartDate,omitempty"`

	// PipelineID руководящей штатной единицы
	SupervisorStaffID *string `json:"supervisorStaffID,omitempty"`

	// Идентификатор вакансии в TEAM
	TeamVacancyCode *string `json:"teamVacancyCode,omitempty"`

	// PipelineID объекта
	TypeID *UUID `json:"typeID,omitempty"`

	// PipelineID отдела к которому относится штатная единица
	UnitId string `json:"unitId"`

	// период активности объекта
	Vacant *Activity `json:"vacant,omitempty"`
}

// ChangeableStaffWithHistory defines model for ChangeableStaffWithHistory.
type ChangeableStaffWithHistory struct {
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffUnit)
	ChangeableStaffUnit `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	StaffID string `json:"staffID"`
}

// Табельщик. Сущность представляет связь между сотрудником и подразделением/назначением, на который назначен данный сотрудник(timekeeperID)
type ChangeableTimekeeper struct {
	// PipelineID объекта
	AssignmentID *UUID `json:"assignmentID,omitempty"`

	// PipelineID объекта
	GroupID UUID `json:"groupID"`

	// PipelineID сотрудника (сущность Employee)
	TimekeeperID string `json:"timekeeperID"`

	// PipelineID объекта
	UnitID UUID `json:"unitID"`
}

// ChangeableTimekeeperGroup defines model for ChangeableTimekeeperGroup.
type ChangeableTimekeeperGroup struct {
	// Наименование группы табельщиков
	Name *string `json:"name,omitempty"`
}

// ChangeableUnit defines model for ChangeableUnit.
type ChangeableUnit struct {
	// период активности объекта
	Activity *Activity `json:"activity,omitempty"`

	// Наименование подразделения для BPM Eludia. Будет удалено в ближайшей перспективе
	AltDescription *string `json:"altDescription,omitempty"`

	// PipelineID объекта
	BalanceUnitID *UUID `json:"balanceUnitID,omitempty"`

	// PipelineID для budman
	BudmanID *string `json:"budmanID,omitempty"`

	// PipelineID кластера посчитанный по основной иерархии
	CalcClusterID *string `json:"calcClusterID,omitempty"`

	// PipelineID календаря
	CalendarId *string `json:"calendarId,omitempty"`

	// PipelineID кластера
	ClusterId *string `json:"clusterId,omitempty"`

	// PipelineID центра затрат
	CostCenterId *string `json:"costCenterId,omitempty"`

	// Описание подразделения/отдела
	Description *string `json:"description,omitempty"`

	// PipelineID функционального блока
	FunctionalBlockID *string `json:"functionalBlockID,omitempty"`

	// Признак видимости подразделения на портале Пульс
	IsVisible *bool `json:"isVisible,omitempty"`

	// id локации
	LocationId *string `json:"locationId,omitempty"`

	// Code организации
	OrgCode *string `json:"orgCode,omitempty"`

	// PipelineID организации, в структуре которой находится подразделение
	OrganizationID *string `json:"organizationID,omitempty"`

	// PipelineID родительского подразделения/отдела
	ParentId *string `json:"parentId,omitempty"`

	// PipelineID продукта
	ProductID *string `json:"productID,omitempty"`

	// Сокращенное имя организации
	ShortName *string `json:"shortName,omitempty"`

	// PipelineID **штатной единицы** руководителя
	SupervisorId *string `json:"supervisorId,omitempty"`

	// Название подразделения/отдела
	Title *string `json:"title,omitempty"`

	// PipelineID типа подразделения
	UnitTypeId *string `json:"unitTypeId,omitempty"`

	// PipelineID объекта
	VirtualBalanceUnitID *UUID `json:"virtualBalanceUnitID,omitempty"`
}

// ChangeableUnitType defines model for ChangeableUnitType.
type ChangeableUnitType struct {
	// Описание типа подразделения
	Title *string `json:"title,omitempty"`
}

// ChangeableVHI defines model for ChangeableVHI.
type ChangeableVHI struct {
	// период активности объекта
	Activity Activity `json:"activity"`

	// PipelineID объекта
	AssignmentID UUID `json:"assignmentID"`

	// категория ДМС - пакет услуг, входящих в полис
	Category string `json:"category"`

	// город, где полис был оформлен
	City string `json:"city"`

	// номер полиса ДМС
	Number string `json:"number"`
}

// ChangeableVacationBalance defines model for ChangeableVacationBalance.
type ChangeableVacationBalance struct {
	// идентификатор типа отсутствия
	AbsenceTypeID string `json:"absenceTypeID"`

	// PipelineID объекта
	AssignmentID UUID `json:"assignmentID"`

	// количество оставшихся дней отпуска данного типа в году
	RemainingDays float32 `json:"remainingDays"`

	// год расчета отпускных дней
	Year int `json:"year"`
}

// ChangeableVacationPeriod defines model for ChangeableVacationPeriod.
type ChangeableVacationPeriod struct {
	// PipelineID объекта
	AbsenceID UUID `json:"absenceID"`

	// PipelineID объекта
	AssignmentID UUID                  `json:"assignmentID"`
	Periods      []LegalVacationPeriod `json:"periods"`
}

// Количество часов в рабочей неделе
type ChangeableWorkWeekHours struct {
	Description string `json:"description"`
}

// ChangeableWorkingHours defines model for ChangeableWorkingHours.
type ChangeableWorkingHours struct {
	// Количество рабочих часов
	Duration float32 `json:"duration"`

	// Конец рабочего дня
	End *string `json:"end,omitempty"`

	// Начало рабочего дня
	Start *string `json:"start,omitempty"`
}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableCluster)
	ChangeableCluster `yaml:",inline"`
}

// ClusterReqBody defines model for ClusterReqBody.
type ClusterReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/ChangeableCluster)
	ChangeableCluster `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// Тип совместительства назначения, вычисляется на основе атрибутов assignment category и primary.
type CombinationStatus string

// ComplexAssignment defines model for ComplexAssignment.
type ComplexAssignment struct {
	// Embedded struct due to allOf(#/components/schemas/FullAssignment)
	FullAssignment `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Employee *EmployeeWithPerson `json:"employee,omitempty"`
}

// Перечисление возможных сущностей, которые могут вернуться в ответе. При указании person вернется и employee
type ComplexAssignmentRequiredEntities string

// ComplexAssignmentV2 defines model for ComplexAssignmentV2.
type ComplexAssignmentV2 struct {
	// Embedded struct due to allOf(#/components/schemas/Assignment)
	Assignment `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Employee   *EmployeeWithPerson    `json:"employee,omitempty"`
	RemoteWork *RemoteWork            `json:"remoteWork,omitempty"`
	StaffUnit  *StaffUnitWithPosition `json:"staffUnit,omitempty"`
}

// вычисляемые параметры
type ComputedUnit struct {
	// PipelineID объекта
	UnitManagerId *UUID `json:"unitManagerId,omitempty"`
}

// Contract defines model for Contract.
type Contract struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableContract)
	ChangeableContract `yaml:",inline"`
}

// ContractStatus defines model for ContractStatus.
type ContractStatus struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableContractStatus)
	ChangeableContractStatus `yaml:",inline"`
}

// ContractToCreate defines model for ContractToCreate.
type ContractToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableContract)
	ChangeableContract `yaml:",inline"`
}

// ContractToUpdate defines model for ContractToUpdate.
type ContractToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableContract)
	ChangeableContract `yaml:",inline"`
}

// ContractType defines model for ContractType.
type ContractType struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableContractType)
	ChangeableContractType `yaml:",inline"`
}

// CostCenter defines model for CostCenter.
type CostCenter struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableCostCenter)
	ChangeableCostCenter `yaml:",inline"`
}

// CreatedItem defines model for CreatedItem.
type CreatedItem struct {
	// PipelineID созданного объекта
	Id string `json:"id"`
}

// донор ДГПХ
type DGPHBudgetDonor struct {
	// объем передаваемого бюджета с ШЕ донора
	Budget *string `json:"budget,omitempty"`

	// идентификатор ШЕ донора
	StaffUnitID string `json:"staffUnitID"`
}

// DGPHDonor defines model for DGPHDonor.
type DGPHDonor struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableDGPHDonor)
	ChangeableDGPHDonor `yaml:",inline"`
}

// DGPHDonorToCreate defines model for DGPHDonorToCreate.
type DGPHDonorToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableDGPHDonor)
	ChangeableDGPHDonor `yaml:",inline"`
}

// DGPHDonorToUpdate defines model for DGPHDonorToUpdate.
type DGPHDonorToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableDGPHDonor)
	ChangeableDGPHDonor `yaml:",inline"`
}

// DisabilityCategory defines model for DisabilityCategory.
type DisabilityCategory struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableDisabilityCategory)
	ChangeableDisabilityCategory `yaml:",inline"`
}

// DisabilityCategoryToCreate defines model for DisabilityCategoryToCreate.
type DisabilityCategoryToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableDisabilityCategory)
	ChangeableDisabilityCategory `yaml:",inline"`
}

// DisabilityCategoryToUpdate defines model for DisabilityCategoryToUpdate.
type DisabilityCategoryToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableDisabilityCategory)
	ChangeableDisabilityCategory `yaml:",inline"`
}

// DistWork defines model for DistWork.
type DistWork struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableDistWork)
	ChangeableDistWork `yaml:",inline"`
}

// DistWorkToCreate defines model for DistWorkToCreate.
type DistWorkToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableDistWork)
	ChangeableDistWork `yaml:",inline"`
}

// DistWorkToUpdate defines model for DistWorkToUpdate.
type DistWorkToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableDistWork)
	ChangeableDistWork `yaml:",inline"`
}

// Documents defines model for Documents.
type Documents struct {
	// Embedded struct due to allOf(#/components/schemas/ChangeableDocument)
	ChangeableDocument `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Дата создания записи о документах
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// PipelineID человека, к которому относятся документы
	PersonID string `json:"personID"`

	// Дата изменения записи о документах
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// EarningPolicy defines model for EarningPolicy.
type EarningPolicy struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableEarningPolicy)
	ChangeableEarningPolicy `yaml:",inline"`
}

// EarningPolicyToCreate defines model for EarningPolicyToCreate.
type EarningPolicyToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableEarningPolicy)
	ChangeableEarningPolicy `yaml:",inline"`
}

// EarningPolicyToUpdate defines model for EarningPolicyToUpdate.
type EarningPolicyToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableEarningPolicy)
	ChangeableEarningPolicy `yaml:",inline"`
}

// Employee defines model for Employee.
type Employee struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableEmployee)
	ChangeableEmployee `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Информация о том, является ли данное трудоустройство работника основным
	Primary *bool `json:"primary,omitempty"`
}

// Технический объект для внутреннего использования
type EmployeeForceUpdate struct {
	// Принудительное обновление дедуплицированного сотрудника
	ForceUpdate *bool `json:"forceUpdate,omitempty"`
}

// Объект для записи логина и почты сотрудника
type EmployeePersonalData struct {
	// Почта сотрудника
	Email *string `json:"email,omitempty"`

	// PipelineID объекта
	EmployeeID UUID `json:"employeeID"`

	// Логин сотрудника
	Login string `json:"login"`

	// Телефон сотрудника
	Phone *string `json:"phone,omitempty"`

	// Система - источник данных о телефоне
	PhoneSrcSystemName EmployeePersonalDataPhoneSrcSystemName `json:"phoneSrcSystemName"`
}

// Система - источник данных о телефоне
type EmployeePersonalDataPhoneSrcSystemName string

// EmployeeRole defines model for EmployeeRole.
type EmployeeRole struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableEmployeeRole)
	ChangeableEmployeeRole `yaml:",inline"`
}

// EmployeeRoleReqBody defines model for EmployeeRoleReqBody.
type EmployeeRoleReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/ChangeableEmployeeRole)
	ChangeableEmployeeRole `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// EmployeeToCreate defines model for EmployeeToCreate.
type EmployeeToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableEmployee)
	ChangeableEmployee `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EmployeeForceUpdate)
	EmployeeForceUpdate `yaml:",inline"`
}

// EmployeeToUpdate defines model for EmployeeToUpdate.
type EmployeeToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableEmployee)
	ChangeableEmployee `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EmployeeForceUpdate)
	EmployeeForceUpdate `yaml:",inline"`
}

// EmployeeType defines model for EmployeeType.
type EmployeeType struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableEmployeeType)
	ChangeableEmployeeType `yaml:",inline"`
}

// EmployeeWithPerson defines model for EmployeeWithPerson.
type EmployeeWithPerson struct {
	// Embedded struct due to allOf(#/components/schemas/Employee)
	Employee `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Описывает уникального, реально существующего человека - физ. лицо
	Person *Person `json:"person,omitempty"`
}

// Информация о трудовой книжке
type EmploymentRecord struct {
	// Дата заявления о передаче трудовых данных
	EmplDataHandoverDate *openapi_types.Date `json:"emplDataHandoverDate,omitempty"`

	// Дата заявления на ведение трудовой книжки
	EmplHistoryApplicationDate *openapi_types.Date `json:"emplHistoryApplicationDate,omitempty"`

	// Сведения о ЭТД\ЭТК у др. работодателя
	HaveDigitalEmplHistory *bool `json:"haveDigitalEmplHistory,omitempty"`
}

// Cобытие. Регистрирует факт создания/изменения одной из сущностей сервиса
type Event struct {
	// Дополнительные атрибуты (для каждого типа objectKind свои)
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	CreatedAt  *time.Time              `json:"createdAt,omitempty"`
	Id         string                  `json:"id"`

	// Тип произошедшего события
	Kind     *EventKind `json:"kind,omitempty"`
	ObjectId *string    `json:"objectId,omitempty"`

	// Тип объекта
	ObjectKind *ObjectKind `json:"objectKind,omitempty"`
}

// Тип произошедшего события
type EventKind string

// Объект для записи вычисленного типа совместительства
type ForceCombinationStatus struct {
	// Тип совместительства назначения, вычисляется на основе атрибутов assignment category и primary.
	ForseCombinationStatus *CombinationStatus `json:"forseCombinationStatus,omitempty"`
}

// FullAssignment defines model for FullAssignment.
type FullAssignment struct {
	// Embedded struct due to allOf(#/components/schemas/Assignment)
	Assignment `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	StaffUnit *FullStaffUnit `json:"staffUnit,omitempty"`
	UnitPath  *UnitPath      `json:"unitPath,omitempty"`
}

// FullEmployee defines model for FullEmployee.
type FullEmployee struct {
	// Embedded struct due to allOf(#/components/schemas/Employee)
	Employee `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Assignments *[]FullAssignment `json:"assignments,omitempty"`
}

// FullPersonProfile defines model for FullPersonProfile.
type FullPersonProfile struct {
	// Embedded struct due to allOf(#/components/schemas/Person)
	Person `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Employees *[]FullEmployee `json:"employees,omitempty"`
}

// FullStaffUnit defines model for FullStaffUnit.
type FullStaffUnit struct {
	// Embedded struct due to allOf(#/components/schemas/StaffUnit)
	StaffUnit `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Position *Position `json:"position,omitempty"`

	// Отсортированный массив подразделений от того в которое назначен сотрудник напрямуя до корневого
	Units *[]Unit `json:"units,omitempty"`
}

// FullUnit defines model for FullUnit.
type FullUnit struct {
	// Embedded struct due to allOf(#/components/schemas/Unit)
	Unit `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	HeadAssignment *AssignmentWithEmployee `json:"headAssignment,omitempty"`
}

// FunctionalBlock defines model for FunctionalBlock.
type FunctionalBlock struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableFunctionalBlock)
	ChangeableFunctionalBlock `yaml:",inline"`
}

// FunctionalBlockReqBody defines model for FunctionalBlockReqBody.
type FunctionalBlockReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/FunctionalBlock)
	FunctionalBlock `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// Grade defines model for Grade.
type Grade struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableGrade)
	ChangeableGrade `yaml:",inline"`
}

// GradeToCreate defines model for GradeToCreate.
type GradeToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableGrade)
	ChangeableGrade `yaml:",inline"`
}

// GradeToUpdate defines model for GradeToUpdate.
type GradeToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableGrade)
	ChangeableGrade `yaml:",inline"`
}

// Hierarchy defines model for Hierarchy.
type Hierarchy struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableHierarchy)
	ChangeableHierarchy `yaml:",inline"`
}

// HierarchyLink defines model for HierarchyLink.
type HierarchyLink struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableHierarchyLink)
	ChangeableHierarchyLink `yaml:",inline"`
}

// HierarchyLinkToCreate defines model for HierarchyLinkToCreate.
type HierarchyLinkToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableHierarchyLink)
	ChangeableHierarchyLink `yaml:",inline"`
}

// HierarchyLinkToUpdate defines model for HierarchyLinkToUpdate.
type HierarchyLinkToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableHierarchyLink)
	ChangeableHierarchyLink `yaml:",inline"`
}

// HistoryID defines model for HistoryID.
type HistoryID struct {
	// PipelineID исторической записи (только с параметром history)
	HistoryID *string `json:"historyID,omitempty"`
}

// HourlyRate defines model for HourlyRate.
type HourlyRate struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableHourlyRate)
	ChangeableHourlyRate `yaml:",inline"`
}

// HourlyRateToCreate defines model for HourlyRateToCreate.
type HourlyRateToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableHourlyRate)
	ChangeableHourlyRate `yaml:",inline"`
}

// HourlyRateToUpdate defines model for HourlyRateToUpdate.
type HourlyRateToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableHourlyRate)
	ChangeableHourlyRate `yaml:",inline"`
}

// IDsList defines model for IDsList.
type IDsList []string

// Объект для встраивания в сущности на update, чтобы не передавать поля createdAt, updatedAt, которые заполняются на уровне сервиса
type Identifier struct {
	// PipelineID объекта
	Id UUID `json:"id"`

	// PipelineID объекта
	TaskID *UUID `json:"taskID,omitempty"`
}

// LeavingReason defines model for LeavingReason.
type LeavingReason struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableLeavingReason)
	ChangeableLeavingReason `yaml:",inline"`
}

// LeavingReasonToCreate defines model for LeavingReasonToCreate.
type LeavingReasonToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableLeavingReason)
	ChangeableLeavingReason `yaml:",inline"`
}

// LeavingReasonToUpdate defines model for LeavingReasonToUpdate.
type LeavingReasonToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableLeavingReason)
	ChangeableLeavingReason `yaml:",inline"`
}

// LegalVacationPeriod defines model for LegalVacationPeriod.
type LegalVacationPeriod struct {
	// дней списано на данный период
	DaysSpent int `json:"daysSpent"`

	// дата окончания отчетного периода
	EndDate openapi_types.Date `json:"endDate"`

	// дата начала отчетного периода
	StartDate openapi_types.Date `json:"startDate"`
}

// Location defines model for Location.
type Location struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableLocation)
	ChangeableLocation `yaml:",inline"`
}

// LocationToCreate defines model for LocationToCreate.
type LocationToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableLocation)
	ChangeableLocation `yaml:",inline"`
}

// LocationToUpdate defines model for LocationToUpdate.
type LocationToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableLocation)
	ChangeableLocation `yaml:",inline"`
}

// Информация о категории годности к службе и типе документа
type MilitaryData struct {
	// Номер команды партии
	CommandParty *string `json:"commandParty,omitempty"`

	// Дата мобилизации
	DateMobilized *openapi_types.Date `json:"dateMobilized,omitempty"`

	// Признак мобилизации
	IsMobilized *bool `json:"isMobilized,omitempty"`

	// Тип документа воинского учета
	MilitaryDocType *string `json:"militaryDocType,omitempty"`

	// Категория годности к воен. сл. — описание
	MilitaryService *string `json:"militaryService,omitempty"`

	// Наименование военкомата
	Owner *string `json:"owner,omitempty"`

	// Состав (профиль)
	Profile *string `json:"profile,omitempty"`

	// Воинское звание
	Rank *string `json:"rank,omitempty"`

	// Состоит на воинском учете
	RegType *string `json:"regType,omitempty"`

	// Категория запаса
	ServiceCode *string `json:"serviceCode,omitempty"`

	// Полное кодовое обозначение ВУС
	SpecCode *string `json:"specCode,omitempty"`
}

// Тип объекта
type ObjectKind string

// OfficeToCreate defines model for OfficeToCreate.
type OfficeToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableOffice)
	ChangeableOffice `yaml:",inline"`
}

// OfficeToUpdate defines model for OfficeToUpdate.
type OfficeToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableOffice)
	ChangeableOffice `yaml:",inline"`
}

// Offices defines model for Offices.
type Offices struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableOffice)
	ChangeableOffice `yaml:",inline"`
}

// OperationIdentifier defines model for OperationIdentifier.
type OperationIdentifier struct {
	// временный PipelineID сущности batch операции для однозначного определения ответа
	OperationID string `json:"operationID"`

	// PipelineID объекта
	TaskID *UUID `json:"taskID,omitempty"`
}

// Organization defines model for Organization.
type Organization struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableOrganization)
	ChangeableOrganization `yaml:",inline"`
}

// Данные всех детей переданных подразделение в выбранной иерархии
type OrganizationStructure struct {
	Children *[]OrganizationStructure `json:"children,omitempty"`

	// организационная единица - подразделение/отдел/организация
	UnitData UnitWithoutRequiredBasicObject `json:"unitData"`
}

// Данные всех детей переданных подразделение в выбранной иерархии
type OrganizationStructureRequiredFiledEnum string

// PAOBonusPaymentCategory defines model for PAOBonusPaymentCategory.
type PAOBonusPaymentCategory struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePAOBonusPaymentCategory)
	ChangeablePAOBonusPaymentCategory `yaml:",inline"`
}

// PAOBonusPaymentCategoryToCreate defines model for PAOBonusPaymentCategoryToCreate.
type PAOBonusPaymentCategoryToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePAOBonusPaymentCategory)
	ChangeablePAOBonusPaymentCategory `yaml:",inline"`
}

// PAOBonusPaymentCategoryToUpdate defines model for PAOBonusPaymentCategoryToUpdate.
type PAOBonusPaymentCategoryToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePAOBonusPaymentCategory)
	ChangeablePAOBonusPaymentCategory `yaml:",inline"`
}

// Паспортные данные
type Passport struct {
	// Место рождения
	BirthPlace *string `json:"birthPlace,omitempty"`

	// Код подразделения
	Code *string `json:"code,omitempty"`

	// Дата выдачи
	Date *string `json:"date,omitempty"`

	// Номер паспорта
	Number *string `json:"number,omitempty"`

	// Место выдачи
	Place *string `json:"place,omitempty"`

	// Серия паспорта
	Series *string `json:"series,omitempty"`
}

// PayType defines model for PayType.
type PayType struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePayType)
	ChangeablePayType `yaml:",inline"`
}

// PayTypeToCreate defines model for PayTypeToCreate.
type PayTypeToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePayType)
	ChangeablePayType `yaml:",inline"`
}

// PayTypeToUpdate defines model for PayTypeToUpdate.
type PayTypeToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePayType)
	ChangeablePayType `yaml:",inline"`
}

// Person defines model for Person.
type Person struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePerson)
	ChangeablePerson `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// День и месяц рождения в формате mm-dd
	Birthday *string `json:"birthday,omitempty"`
}

// PersonEducation defines model for PersonEducation.
type PersonEducation struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePersonEducation)
	ChangeablePersonEducation `yaml:",inline"`
}

// PersonEducationToCreate defines model for PersonEducationToCreate.
type PersonEducationToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePersonEducation)
	ChangeablePersonEducation `yaml:",inline"`
}

// PersonEducationToUpdate defines model for PersonEducationToUpdate.
type PersonEducationToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePersonEducation)
	ChangeablePersonEducation `yaml:",inline"`
}

// Объект для воинского учета у person
type PersonMilitary struct {
	// Информация о категории годности к службе и типе документа
	Military MilitaryData `json:"military"`

	// PipelineID объекта
	PersonID UUID `json:"personID"`
}

// Объект для картинки у person
type PersonPictureID struct {
	// PipelineID объекта
	PersonID UUID `json:"personID"`

	// PipelineID объекта
	PictureID UUID `json:"pictureID"`

	// Дата обновления фото
	PictureUpdateDate *openapi_types.Date `json:"pictureUpdateDate,omitempty"`
}

// PersonToCreate defines model for PersonToCreate.
type PersonToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangPersonWithDoc)
	ChangPersonWithDoc `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// период активности объекта
	Activity    *Activity `json:"activity,omitempty"`
	Deduplicate *bool     `json:"deduplicate,omitempty"`
}

// PersonToUpdate defines model for PersonToUpdate.
type PersonToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangPersonWithDoc)
	ChangPersonWithDoc `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// период активности объекта
	Activity    *Activity `json:"activity,omitempty"`
	Deduplicate *bool     `json:"deduplicate,omitempty"`
}

// PersonalSchedule defines model for PersonalSchedule.
type PersonalSchedule struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePersonalSchedule)
	ChangeablePersonalSchedule `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Тип графика работ, например: Гибкий график с одной сменой
	ShiftType ChangeableShiftType `json:"shiftType"`

	// Количество часов в рабочей неделе
	WorkWeekHours ChangeableWorkWeekHours `json:"workWeekHours"`
}

// PersonalScheduleToCreate defines model for PersonalScheduleToCreate.
type PersonalScheduleToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePersonalSchedule)
	ChangeablePersonalSchedule `yaml:",inline"`
}

// PersonalScheduleToUpdate defines model for PersonalScheduleToUpdate.
type PersonalScheduleToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePersonalSchedule)
	ChangeablePersonalSchedule `yaml:",inline"`
}

// Position defines model for Position.
type Position struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePosition)
	ChangeablePosition `yaml:",inline"`
}

// PositionCategory defines model for PositionCategory.
type PositionCategory struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePositionCategory)
	ChangeablePositionCategory `yaml:",inline"`
}

// PositionCategoryToCreate defines model for PositionCategoryToCreate.
type PositionCategoryToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePositionCategory)
	ChangeablePositionCategory `yaml:",inline"`
}

// PositionCategoryToUpdate defines model for PositionCategoryToUpdate.
type PositionCategoryToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeablePositionCategory)
	ChangeablePositionCategory `yaml:",inline"`
}

// Product defines model for Product.
type Product struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProduct)
	ChangeableProduct `yaml:",inline"`
}

// ProductEntity defines model for ProductEntity.
type ProductEntity struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProductEntity)
	ChangeableProductEntity `yaml:",inline"`
}

// ProductEntityLink defines model for ProductEntityLink.
type ProductEntityLink struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProductEntityLink)
	ChangeableProductEntityLink `yaml:",inline"`
}

// ProductEntityLinkToCreate defines model for ProductEntityLinkToCreate.
type ProductEntityLinkToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProductEntityLink)
	ChangeableProductEntityLink `yaml:",inline"`
}

// ProductEntityLinkToUpdate defines model for ProductEntityLinkToUpdate.
type ProductEntityLinkToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProductEntityLink)
	ChangeableProductEntityLink `yaml:",inline"`
}

// ProductEntityToCreate defines model for ProductEntityToCreate.
type ProductEntityToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProductEntity)
	ChangeableProductEntity `yaml:",inline"`
}

// ProductEntityToUpdate defines model for ProductEntityToUpdate.
type ProductEntityToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProductEntity)
	ChangeableProductEntity `yaml:",inline"`
}

// ProductStatus defines model for ProductStatus.
type ProductStatus struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProductStatuses)
	ChangeableProductStatuses `yaml:",inline"`
}

// ProductStatusToCreate defines model for ProductStatusToCreate.
type ProductStatusToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProductStatuses)
	ChangeableProductStatuses `yaml:",inline"`
}

// ProductStatusToUpdate defines model for ProductStatusToUpdate.
type ProductStatusToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProductStatuses)
	ChangeableProductStatuses `yaml:",inline"`
}

// ProductToCreate defines model for ProductToCreate.
type ProductToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProduct)
	ChangeableProduct `yaml:",inline"`
}

// ProductToUpdate defines model for ProductToUpdate.
type ProductToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableProduct)
	ChangeableProduct `yaml:",inline"`
}

// RemoteWork defines model for RemoteWork.
type RemoteWork struct {
	// Признак удаленной работы
	IsRemote bool `json:"isRemote"`

	// график работы
	TimeSchedule *string `json:"timeSchedule,omitempty"`
}

// Salary defines model for Salary.
type Salary struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableSalary)
	ChangeableSalary `yaml:",inline"`
}

// SalaryToCreate defines model for SalaryToCreate.
type SalaryToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableSalary)
	ChangeableSalary `yaml:",inline"`
}

// SalaryToUpdate defines model for SalaryToUpdate.
type SalaryToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableSalary)
	ChangeableSalary `yaml:",inline"`
}

// Schedule defines model for Schedule.
type Schedule struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableSchedule)
	ChangeableSchedule `yaml:",inline"`
}

// ScheduleDay defines model for ScheduleDay.
type ScheduleDay struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableScheduleDay)
	ChangeableScheduleDay `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Флаг выходного дня на указанную дату рабочего графика
	Weekend *bool `json:"weekend,omitempty"`
}

// ScheduleDayToCreate defines model for ScheduleDayToCreate.
type ScheduleDayToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableScheduleDay)
	ChangeableScheduleDay `yaml:",inline"`
}

// ScheduleDayToUpdate defines model for ScheduleDayToUpdate.
type ScheduleDayToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableScheduleDay)
	ChangeableScheduleDay `yaml:",inline"`
}

// ScheduleToCreate defines model for ScheduleToCreate.
type ScheduleToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableSchedule)
	ChangeableSchedule `yaml:",inline"`
}

// ScheduleToUpdate defines model for ScheduleToUpdate.
type ScheduleToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableSchedule)
	ChangeableSchedule `yaml:",inline"`
}

// ShiftType defines model for ShiftType.
type ShiftType struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableShiftType)
	ChangeableShiftType `yaml:",inline"`
}

// ShiftTypeToCreate defines model for ShiftTypeToCreate.
type ShiftTypeToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableShiftType)
	ChangeableShiftType `yaml:",inline"`
}

// ShiftTypeToUpdate defines model for ShiftTypeToUpdate.
type ShiftTypeToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableShiftType)
	ChangeableShiftType `yaml:",inline"`
}

// StaffAvailabilityStatus defines model for StaffAvailabilityStatus.
type StaffAvailabilityStatus struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffAvailabilityStatus)
	ChangeableStaffAvailabilityStatus `yaml:",inline"`
}

// StaffAvailabilityStatusToUpdate defines model for StaffAvailabilityStatusToUpdate.
type StaffAvailabilityStatusToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffAvailabilityStatus)
	ChangeableStaffAvailabilityStatus `yaml:",inline"`
}

// StaffAvailabilityToCreate defines model for StaffAvailabilityToCreate.
type StaffAvailabilityToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffAvailabilityStatus)
	ChangeableStaffAvailabilityStatus `yaml:",inline"`
}

// StaffRoles defines model for StaffRoles.
type StaffRoles struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffRoles)
	ChangeableStaffRoles `yaml:",inline"`
}

// StaffRolesToCreate defines model for StaffRolesToCreate.
type StaffRolesToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffRoles)
	ChangeableStaffRoles `yaml:",inline"`
}

// StaffRolesToUpdate defines model for StaffRolesToUpdate.
type StaffRolesToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffRoles)
	ChangeableStaffRoles `yaml:",inline"`
}

// StaffType defines model for StaffType.
type StaffType struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffType)
	ChangeableStaffType `yaml:",inline"`
}

// StaffTypeToCreate defines model for StaffTypeToCreate.
type StaffTypeToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffType)
	ChangeableStaffType `yaml:",inline"`
}

// StaffTypeToUpdate defines model for StaffTypeToUpdate.
type StaffTypeToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffType)
	ChangeableStaffType `yaml:",inline"`
}

// StaffUnit defines model for StaffUnit.
type StaffUnit struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffUnit)
	ChangeableStaffUnit `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/HistoryID)
	HistoryID `yaml:",inline"`
}

// StaffUnitToCreate defines model for StaffUnitToCreate.
type StaffUnitToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffUnit)
	ChangeableStaffUnit `yaml:",inline"`
}

// StaffUnitToUpdate defines model for StaffUnitToUpdate.
type StaffUnitToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffUnit)
	ChangeableStaffUnit `yaml:",inline"`
}

// StaffUnitWithPosition defines model for StaffUnitWithPosition.
type StaffUnitWithPosition struct {
	// Embedded struct due to allOf(#/components/schemas/StaffUnit)
	StaffUnit `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Position *Position `json:"position,omitempty"`
}

// StaffUnitsWithHistoryToCreate defines model for StaffUnitsWithHistoryToCreate.
type StaffUnitsWithHistoryToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffWithHistory)
	ChangeableStaffWithHistory `yaml:",inline"`
}

// StaffUnitsWithHistoryToUpdate defines model for StaffUnitsWithHistoryToUpdate.
type StaffUnitsWithHistoryToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableStaffWithHistory)
	ChangeableStaffWithHistory `yaml:",inline"`
}

// Task defines model for Task.
type Task struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Дополнительная информация в произвольном виде.
	// Стоит использовать для дебага, передается напрямую от ERP.
	Message *string `json:"message,omitempty"`

	// Состояние выполнения задачи
	State TaskState `json:"state"`

	// Результат выполнения задачи. Доступно только в Complete состоянии
	Status *TaskStatus `json:"status,omitempty"`
}

// Состояние выполнения задачи
type TaskState string

// Результат выполнения задачи. Доступно только в Complete состоянии
type TaskStatus string

// PipelineID задача в рамках которой были выполнены действия над объектом
type TaskID struct {
	// PipelineID объекта
	TaskID *UUID `json:"taskID,omitempty"`
}

// Статус задачи
type TaskStatusRespBody struct {
	// дата и время создания статуса задачи
	CreatedAt time.Time `json:"created_at"`

	// события произошедшие в процессе выполнения задачи
	Events *[]Event `json:"events,omitempty"`

	// PipelineID объекта
	Id UUID `json:"id"`

	// произвольное сообщение
	Message *string `json:"message,omitempty"`

	// состояние задачи
	State TaskStatusRespBodyState `json:"state"`

	// статус задачи
	Status *TaskStatusRespBodyStatus `json:"status,omitempty"`
}

// состояние задачи
type TaskStatusRespBodyState string

// статус задачи
type TaskStatusRespBodyStatus string

// Timekeeper defines model for Timekeeper.
type Timekeeper struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableTimekeeper)
	ChangeableTimekeeper `yaml:",inline"`
}

// TimekeeperGroup defines model for TimekeeperGroup.
type TimekeeperGroup struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableTimekeeperGroup)
	ChangeableTimekeeperGroup `yaml:",inline"`
}

// TimekeeperGroupToCreate defines model for TimekeeperGroupToCreate.
type TimekeeperGroupToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableTimekeeperGroup)
	ChangeableTimekeeperGroup `yaml:",inline"`
}

// TimekeeperGroupToUpdate defines model for TimekeeperGroupToUpdate.
type TimekeeperGroupToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableTimekeeperGroup)
	ChangeableTimekeeperGroup `yaml:",inline"`
}

// TimekeeperToCreate defines model for TimekeeperToCreate.
type TimekeeperToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableTimekeeper)
	ChangeableTimekeeper `yaml:",inline"`
}

// PipelineID объекта
type UUID string

// Unit defines model for Unit.
type Unit struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableUnit)
	ChangeableUnit `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ComputedUnit)
	ComputedUnit `yaml:",inline"`
}

// UnitPath defines model for UnitPath.
type UnitPath struct {
	// PipelineID подразделения/отдела
	UnitId string `json:"unitId"`

	// Отсортированный массив подразделений от корневого до требуемого
	Units *[]Unit `json:"units,omitempty"`
}

// UnitToCreate defines model for UnitToCreate.
type UnitToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableUnit)
	ChangeableUnit `yaml:",inline"`
}

// UnitToUpdate defines model for UnitToUpdate.
type UnitToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableUnit)
	ChangeableUnit `yaml:",inline"`
}

// UnitType defines model for UnitType.
type UnitType struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableUnitType)
	ChangeableUnitType `yaml:",inline"`
}

// UnitWithoutRequiredBasicObject defines model for UnitWithoutRequiredBasicObject.
type UnitWithoutRequiredBasicObject struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObjectWithoutRequiredCreatedAtUpdatedAt)
	BasicObjectWithoutRequiredCreatedAtUpdatedAt `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableUnit)
	ChangeableUnit `yaml:",inline"`
}

// VHI defines model for VHI.
type VHI struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableVHI)
	ChangeableVHI `yaml:",inline"`
}

// VHIToCreate defines model for VHIToCreate.
type VHIToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableVHI)
	ChangeableVHI `yaml:",inline"`
}

// VHIToUpdate defines model for VHIToUpdate.
type VHIToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableVHI)
	ChangeableVHI `yaml:",inline"`
}

// VacationBalance defines model for VacationBalance.
type VacationBalance struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableVacationBalance)
	ChangeableVacationBalance `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// PipelineID объекта
	EmployeeID *UUID `json:"employeeID,omitempty"`
}

// VacationBalanceToCreate defines model for VacationBalanceToCreate.
type VacationBalanceToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableVacationBalance)
	ChangeableVacationBalance `yaml:",inline"`
}

// VacationBalanceToUpdate defines model for VacationBalanceToUpdate.
type VacationBalanceToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableVacationBalance)
	ChangeableVacationBalance `yaml:",inline"`
}

// VacationPeriod defines model for VacationPeriod.
type VacationPeriod struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableVacationPeriod)
	ChangeableVacationPeriod `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// PipelineID объекта
	EmployeeID *UUID `json:"employeeID,omitempty"`
}

// VacationPeriodToCreate defines model for VacationPeriodToCreate.
type VacationPeriodToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableVacationPeriod)
	ChangeableVacationPeriod `yaml:",inline"`
}

// VacationPeriodToUpdate defines model for VacationPeriodToUpdate.
type VacationPeriodToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableVacationPeriod)
	ChangeableVacationPeriod `yaml:",inline"`
}

// WorkWeekHoursToCreate defines model for WorkWeekHoursToCreate.
type WorkWeekHoursToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableWorkWeekHours)
	ChangeableWorkWeekHours `yaml:",inline"`
}

// WorkWeekHoursToUpdate defines model for WorkWeekHoursToUpdate.
type WorkWeekHoursToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableWorkWeekHours)
	ChangeableWorkWeekHours `yaml:",inline"`
}

// WorkingHours defines model for WorkingHours.
type WorkingHours struct {
	// Embedded struct due to allOf(#/components/schemas/BasicObject)
	BasicObject `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableWorkingHours)
	ChangeableWorkingHours `yaml:",inline"`
}

// WorkingHoursToCreate defines model for WorkingHoursToCreate.
type WorkingHoursToCreate struct {
	// Embedded struct due to allOf(#/components/schemas/OperationIdentifier)
	OperationIdentifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableWorkingHours)
	ChangeableWorkingHours `yaml:",inline"`
}

// WorkingHoursToUpdate defines model for WorkingHoursToUpdate.
type WorkingHoursToUpdate struct {
	// Embedded struct due to allOf(#/components/schemas/Identifier)
	Identifier `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ChangeableWorkingHours)
	ChangeableWorkingHours `yaml:",inline"`
}

// ActivityFilters defines model for ActivityFilters.
type ActivityFilters struct {
	// фильтровать по активности заканчивающейся с *endFrom* включительно
	EndFrom *openapi_types.Date `json:"endFrom,omitempty"`

	// фильтровать по активности заканчивающейся до *startTo*, не включая указанную дату
	EndTo *openapi_types.Date `json:"endTo,omitempty"`

	// фильтровать по активности объекта на текущую дату
	//
	// isActive = true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	IsActive *bool `json:"isActive,omitempty"`

	// фильтровать по активности начинающейся с *startFrom* включительно
	StartFrom *openapi_types.Date `json:"startFrom,omitempty"`

	// фильтровать по активности начинающейся до *startTo*, не включая указанную дату
	StartTo *openapi_types.Date `json:"startTo,omitempty"`
}

// AssignmentIDs defines model for AssignmentIDs.
type AssignmentIDs IDsList

// AssignmentStatusIdsFilterParam defines model for AssignmentStatusIdsFilterParam.
type AssignmentStatusIdsFilterParam []string

// AssignmentTypeIdsFilterParam defines model for AssignmentTypeIdsFilterParam.
type AssignmentTypeIdsFilterParam []string

// CostCenterCodesParam defines model for CostCenterCodesParam.
type CostCenterCodesParam []string

// EmployeeIDs defines model for EmployeeIDs.
type EmployeeIDs IDsList

// EmployeeTypeIdsFilterParam defines model for EmployeeTypeIdsFilterParam.
type EmployeeTypeIdsFilterParam []string

// EventsObjectKindsFilterParam defines model for EventsObjectKindsFilterParam.
type EventsObjectKindsFilterParam []ObjectKind

// GradesIdsFilterParam defines model for GradesIdsFilterParam.
type GradesIdsFilterParam []string

// HierarchyLinksChildFilterParam defines model for HierarchyLinksChildFilterParam.
type HierarchyLinksChildFilterParam []string

// HierarchyLinksHierarchyFilterParam defines model for HierarchyLinksHierarchyFilterParam.
type HierarchyLinksHierarchyFilterParam []string

// HierarchyLinksParentFilterParam defines model for HierarchyLinksParentFilterParam.
type HierarchyLinksParentFilterParam []string

// HierarchyParam defines model for HierarchyParam.
type HierarchyParam string

// Limit defines model for Limit.
type Limit int

// LoginFilterParam defines model for LoginFilterParam.
type LoginFilterParam []string

// OfficeNames defines model for OfficeNames.
type OfficeNames []string

// Offset defines model for Offset.
type Offset int

// OrderBy defines model for OrderBy.
type OrderBy []string

// OrganizationStructureHierarchyIDFilterParam defines model for OrganizationStructureHierarchyIDFilterParam.
type OrganizationStructureHierarchyIDFilterParam string

// OrganizationStructureRequiredFieldsFilterParam defines model for OrganizationStructureRequiredFieldsFilterParam.
type OrganizationStructureRequiredFieldsFilterParam []OrganizationStructureRequiredFiledEnum

// OrganizationStructureUnitIDsFilterParam defines model for OrganizationStructureUnitIDsFilterParam.
type OrganizationStructureUnitIDsFilterParam []string

// OrgsIdsFilterParam defines model for OrgsIdsFilterParam.
type OrgsIdsFilterParam IDsList

// PersonIDsParam defines model for PersonIDsParam.
type PersonIDsParam IDsList

// ProductEntitiesCodes defines model for ProductEntitiesCodes.
type ProductEntitiesCodes []string

// ProductEntitiesLinksChildIDs defines model for ProductEntitiesLinksChildIDs.
type ProductEntitiesLinksChildIDs []string

// ProductEntitiesLinksParentIDs defines model for ProductEntitiesLinksParentIDs.
type ProductEntitiesLinksParentIDs []string

// ProductEntitiesNames defines model for ProductEntitiesNames.
type ProductEntitiesNames []string

// ProductEntitiesTypes defines model for ProductEntitiesTypes.
type ProductEntitiesTypes []string

// ProductStatusNames defines model for ProductStatusNames.
type ProductStatusNames []string

// QueryFilters defines model for QueryFilters.
type QueryFilters struct {
	// объекты с временем создания с createdAtFrom включительно
	CreatedAtFrom *time.Time `json:"createdAtFrom,omitempty"`

	// объекты с временем создания по createdAtTo не включительно
	CreatedAtTo *time.Time `json:"createdAtTo,omitempty"`

	// фильтр по списку идентификаторов
	Ids *[]string `json:"ids,omitempty"`

	// максимальное количество записей для получения
	Limit *int `json:"limit,omitempty"`

	// получение записей начиная с n-й
	Offset *int `json:"offset,omitempty"`

	// порядок сортировки получаемых записей
	OrderBy *[]string `json:"orderBy,omitempty"`

	// объекты с временем изменения с updatedAtFrom включительно
	UpdatedAtFrom *time.Time `json:"updatedAtFrom,omitempty"`

	// объекты с временем изменения по updatedAtTo не включительно
	UpdatedAtTo *time.Time `json:"updatedAtTo,omitempty"`

	// получить также записи удаленные из источника
	WithDeleted *bool `json:"withDeleted,omitempty"`
}

// RequiredEntitiesComplexAssignmentV2 defines model for RequiredEntitiesComplexAssignmentV2.
type RequiredEntitiesComplexAssignmentV2 []ComplexAssignmentRequiredEntities

// ScheduleIDs defines model for ScheduleIDs.
type ScheduleIDs IDsList

// StaffCodeSubstring defines model for StaffCodeSubstring.
type StaffCodeSubstring string

// StaffCodes defines model for StaffCodes.
type StaffCodes []string

// StaffUnitIDs defines model for StaffUnitIDs.
type StaffUnitIDs IDsList

// TypeIDs defines model for TypeIDs.
type TypeIDs IDsList

// UUIDPathObjectID defines model for UUIDPathObjectID.
type UUIDPathObjectID string

// UnitIDs defines model for UnitIDs.
type UnitIDs IDsList

// UnitTypesIdsFilterParam defines model for UnitTypesIdsFilterParam.
type UnitTypesIdsFilterParam []string

// CreatedItemResponse defines model for CreatedItemResponse.
type CreatedItemResponse CreatedItem

// DefaultErrResponse defines model for DefaultErrResponse.
type DefaultErrResponse APIError

// MultipleBatchCreatedItemResp defines model for MultipleBatchCreatedItemResp.
type MultipleBatchCreatedItemResp []BatchCreatedItem

// MultipleBatchUpdatedItemResp defines model for MultipleBatchUpdatedItemResp.
type MultipleBatchUpdatedItemResp []CreatedItem

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// Сообщение
	Message string `json:"message"`
}

// AssignmentCategoryReqBody defines model for AssignmentCategoryReqBody.
type AssignmentCategoryReqBody AssignmentCategory

// Статус назначения сотрудника
type AssignmentStatusReqBody AssignmentStatus

// AssignmentTypeReqBody defines model for AssignmentTypeReqBody.
type AssignmentTypeReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/AssignmentType)
	AssignmentType `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// BalanceUnitReqBody defines model for BalanceUnitReqBody.
type BalanceUnitReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/BalanceUnit)
	BalanceUnit `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// ContractStatusReqBody defines model for ContractStatusReqBody.
type ContractStatusReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/ContractStatus)
	ContractStatus `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// ContractTypeReqBody defines model for ContractTypeReqBody.
type ContractTypeReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/ContractType)
	ContractType `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// CostCenterReqBody defines model for CostCenterReqBody.
type CostCenterReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/CostCenter)
	CostCenter `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// EmployeeTypeReqBody defines model for EmployeeTypeReqBody.
type EmployeeTypeReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/EmployeeType)
	EmployeeType `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// GradeReqBody defines model for GradeReqBody.
type GradeReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/Grade)
	Grade `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// HierarchyLinkReqBody defines model for HierarchyLinkReqBody.
type HierarchyLinkReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/ChangeableHierarchyLink)
	ChangeableHierarchyLink `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// HierarchyReqBody defines model for HierarchyReqBody.
type HierarchyReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/ChangeableHierarchy)
	ChangeableHierarchy `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// OrganizationReqBody defines model for OrganizationReqBody.
type OrganizationReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/Organization)
	Organization `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// PositionReqBody defines model for PositionReqBody.
type PositionReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/Position)
	Position `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// UnitTypeReqBody defines model for UnitTypeReqBody.
type UnitTypeReqBody struct {
	// Embedded struct due to allOf(#/components/schemas/UnitType)
	UnitType `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TaskID)
	TaskID `yaml:",inline"`
}

// GetAbsenceTypesParams defines parameters for GetAbsenceTypes.
type GetAbsenceTypesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// Фильтр по кодам категорий отсутствия
	Category *[]string `json:"category,omitempty"`
}

// GetAbsencesParams defines parameters for GetAbsences.
type GetAbsencesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id назначений для фильтрации
	AssIDs *AssignmentIDs `json:"assIDs,omitempty"`

	// список id работников для фильтрации
	EmplIDs *EmployeeIDs `json:"emplIDs,omitempty"`

	// список id типов объекта
	TypeIDs *TypeIDs `json:"typeIDs,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// Фильтр по кодам категорий отсутствия
	Category *[]string `json:"category,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetAllowancesParams defines parameters for GetAllowances.
type GetAllowancesParams struct {
	// список id назначений для фильтрации
	AssIDs *AssignmentIDs `json:"assIDs,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetApplicantsParams defines parameters for GetApplicants.
type GetApplicantsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id работников для фильтрации
	EmplIDs *EmployeeIDs `json:"emplIDs,omitempty"`

	// Фильтр по кодам претендентов
	ApplicationCodes *[]string `json:"applicationCodes,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// PostApplicantsJSONBody defines parameters for PostApplicants.
type PostApplicantsJSONBody struct {
	// Гражданство. Обязательный параметр для создания претендента ПАО МТС
	Citizenship *PostApplicantsJSONBodyCitizenship `json:"citizenship,omitempty"`

	// Дата рождения
	DateOfBirth *openapi_types.Date `json:"dateOfBirth,omitempty"`

	// Личная почта претендента
	Email *string `json:"email,omitempty"`

	// Имя
	FirstName string                       `json:"firstName"`
	Gender    PostApplicantsJSONBodyGender `json:"gender"`

	// Фамилия
	LastName string `json:"lastName"`

	// Логин созданный для этого кандидата
	Login *string `json:"login,omitempty"`

	// Отчество/дополнительные имена
	MiddleNames *string `json:"middleNames,omitempty"`

	// PipelineID объекта
	OfficeID *UUID   `json:"officeID,omitempty"`
	Phone    *string `json:"phone,omitempty"`

	// Информация о размещении в офисе.
	PlaceInOffice *string `json:"placeInOffice,omitempty"`

	// СНИЛС в формате 00000000000. Без разделителей, пробелов, только 11 чисел
	Snils *string `json:"snils,omitempty"`

	// PipelineID объекта
	StaffUnitID *UUID `json:"staffUnitID,omitempty"`

	// PipelineID объекта
	UnitID UUID `json:"unitID"`
}

// PostApplicantsJSONBodyCitizenship defines parameters for PostApplicants.
type PostApplicantsJSONBodyCitizenship string

// PostApplicantsJSONBodyGender defines parameters for PostApplicants.
type PostApplicantsJSONBodyGender string

// GetAssignmentcategoriesParams defines parameters for GetAssignmentcategories.
type GetAssignmentcategoriesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetAssignmentsParams defines parameters for GetAssignments.
type GetAssignmentsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по списку идентификаторов статусов назначений
	StatusIds *AssignmentStatusIdsFilterParam `json:"statusIds,omitempty"`

	// фильтр по списку идентификаторов типов назначений
	TypeIds *AssignmentTypeIdsFilterParam `json:"typeIds,omitempty"`

	// фильтр по списку идентификаторов типов сотрудников
	EmployeeTypeIDs *EmployeeTypeIdsFilterParam `json:"employeeTypeIDs,omitempty"`

	// список id работников для фильтрации
	EmplIDs *EmployeeIDs `json:"emplIDs,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// Фильтр по id категорий назначений
	CategoryIDs *IDsList `json:"categoryIDs,omitempty"`

	// Фильтр по статусу совместительства
	CombinationStatuses *[]CombinationStatus `json:"combinationStatuses,omitempty"`

	// Параметр запроса для уволенных сотрудников начиная с выбранной даты
	ActualTerminationDateFrom *openapi_types.Date `json:"actualTerminationDateFrom,omitempty"`

	// список id ШЕ для фильтрации
	StaffUnitIDs *StaffUnitIDs `json:"staffUnitIDs,omitempty"`

	// фильтр по номерам ШЕ
	StaffCodes *StaffCodes `json:"staffCodes,omitempty"`
	History    *bool       `json:"history,omitempty"`

	// список id юнитов для фильтрации
	UnitIDs *UnitIDs `json:"unitIDs,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetAssignmentstatusParams defines parameters for GetAssignmentstatus.
type GetAssignmentstatusParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetAssignmenttypesParams defines parameters for GetAssignmenttypes.
type GetAssignmenttypesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetBackBonusPaymentCategoriesParams defines parameters for GetBackBonusPaymentCategories.
type GetBackBonusPaymentCategoriesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetBalanceUnitsParams defines parameters for GetBalanceUnits.
type GetBalanceUnitsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetBanksParams defines parameters for GetBanks.
type GetBanksParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по частичному вхождению в branchBIC / branchName / bankName
	SBank *string `json:"sBank,omitempty"`
}

// PostBatchAbsenceTypesJSONBody defines parameters for PostBatchAbsenceTypes.
type PostBatchAbsenceTypesJSONBody struct {
	Objects []AbsenceTypeToCreate `json:"objects"`
}

// PutBatchAbsenceTypesJSONBody defines parameters for PutBatchAbsenceTypes.
type PutBatchAbsenceTypesJSONBody struct {
	Objects []AbsenceTypeToUpdate `json:"objects"`
}

// PostBatchAbsencesJSONBody defines parameters for PostBatchAbsences.
type PostBatchAbsencesJSONBody struct {
	Objects []AbsenceToCreate `json:"objects"`
}

// PutBatchAbsencesJSONBody defines parameters for PutBatchAbsences.
type PutBatchAbsencesJSONBody struct {
	Objects []AbsenceToUpdate `json:"objects"`
}

// PostBatchAllowancesJSONBody defines parameters for PostBatchAllowances.
type PostBatchAllowancesJSONBody struct {
	Objects []AllowanceToCreate `json:"objects"`
}

// PutBatchAllowancesJSONBody defines parameters for PutBatchAllowances.
type PutBatchAllowancesJSONBody struct {
	Objects []AllowanceToUpdate `json:"objects"`
}

// PostBatchApplicantsJSONBody defines parameters for PostBatchApplicants.
type PostBatchApplicantsJSONBody struct {
	Objects []ApplicantToCreate `json:"objects"`
}

// PutBatchApplicantsJSONBody defines parameters for PutBatchApplicants.
type PutBatchApplicantsJSONBody struct {
	Objects []ApplicantToUpdate `json:"objects"`
}

// PostBatchAssignmentsJSONBody defines parameters for PostBatchAssignments.
type PostBatchAssignmentsJSONBody struct {
	Objects []AssignmentToCreate `json:"objects"`
}

// PutBatchAssignmentsJSONBody defines parameters for PutBatchAssignments.
type PutBatchAssignmentsJSONBody struct {
	Objects []AssignmentToUpdate `json:"objects"`
}

// PostBatchAssignmentsWithHistoryJSONBody defines parameters for PostBatchAssignmentsWithHistory.
type PostBatchAssignmentsWithHistoryJSONBody struct {
	Objects []AssignmentsWithHistoryToCreate `json:"objects"`
}

// PutBatchAssignmentsWithHistoryJSONBody defines parameters for PutBatchAssignmentsWithHistory.
type PutBatchAssignmentsWithHistoryJSONBody struct {
	Objects []AssignmentsWithHistoryToUpdate `json:"objects"`
}

// PostBatchBackBonusPaymentCategoriesJSONBody defines parameters for PostBatchBackBonusPaymentCategories.
type PostBatchBackBonusPaymentCategoriesJSONBody struct {
	Objects []BackBonusPaymentCategoryToCreate `json:"objects"`
}

// PutBatchBackBonusPaymentCategoriesJSONBody defines parameters for PutBatchBackBonusPaymentCategories.
type PutBatchBackBonusPaymentCategoriesJSONBody struct {
	Objects []BackBonusPaymentCategoryToUpdate `json:"objects"`
}

// PostBatchBanksJSONBody defines parameters for PostBatchBanks.
type PostBatchBanksJSONBody struct {
	Objects []BankToCreate `json:"objects"`
}

// PutBatchBanksJSONBody defines parameters for PutBatchBanks.
type PutBatchBanksJSONBody struct {
	Objects []BankToUpdate `json:"objects"`
}

// PostBatchCalendarJSONBody defines parameters for PostBatchCalendar.
type PostBatchCalendarJSONBody struct {
	Objects []CalendarToCreate `json:"objects"`
}

// PutBatchCalendarJSONBody defines parameters for PutBatchCalendar.
type PutBatchCalendarJSONBody struct {
	Objects []CalendarToUpdate `json:"objects"`
}

// PostBatchCalendarDaysJSONBody defines parameters for PostBatchCalendarDays.
type PostBatchCalendarDaysJSONBody struct {
	Objects []CalendarDayToCreate `json:"objects"`
}

// PutBatchCalendarDaysJSONBody defines parameters for PutBatchCalendarDays.
type PutBatchCalendarDaysJSONBody struct {
	Objects []CalendarDayToUpdate `json:"objects"`
}

// PostBatchContractsJSONBody defines parameters for PostBatchContracts.
type PostBatchContractsJSONBody struct {
	Objects []ContractToCreate `json:"objects"`
}

// PutBatchContractsJSONBody defines parameters for PutBatchContracts.
type PutBatchContractsJSONBody struct {
	Objects []ContractToUpdate `json:"objects"`
}

// PostBatchDeleteJSONBody defines parameters for PostBatchDelete.
type PostBatchDeleteJSONBody struct {
	Hard *bool `json:"hard,omitempty"`

	// Тип объекта
	ObjectKind ObjectKind `json:"objectKind"`
	Objects    IDsList    `json:"objects"`

	// Каждый id таски соответствует элементу из objects
	TaskIDs *[]TaskID `json:"taskIDs,omitempty"`
}

// PostBatchDgphDonorsJSONBody defines parameters for PostBatchDgphDonors.
type PostBatchDgphDonorsJSONBody struct {
	Objects []DGPHDonorToCreate `json:"objects"`
}

// PutBatchDgphDonorsJSONBody defines parameters for PutBatchDgphDonors.
type PutBatchDgphDonorsJSONBody struct {
	Objects []DGPHDonorToUpdate `json:"objects"`
}

// PostBatchDisabilityCategoriesJSONBody defines parameters for PostBatchDisabilityCategories.
type PostBatchDisabilityCategoriesJSONBody struct {
	Objects []DisabilityCategoryToCreate `json:"objects"`
}

// PutBatchDisabilityCategoriesJSONBody defines parameters for PutBatchDisabilityCategories.
type PutBatchDisabilityCategoriesJSONBody struct {
	Objects []DisabilityCategoryToUpdate `json:"objects"`
}

// PostBatchDistWorkJSONBody defines parameters for PostBatchDistWork.
type PostBatchDistWorkJSONBody struct {
	Objects []DistWorkToCreate `json:"objects"`
}

// PutBatchDistWorkJSONBody defines parameters for PutBatchDistWork.
type PutBatchDistWorkJSONBody struct {
	Objects []DistWorkToUpdate `json:"objects"`
}

// PostBatchEarningPoliciesJSONBody defines parameters for PostBatchEarningPolicies.
type PostBatchEarningPoliciesJSONBody struct {
	Objects []EarningPolicyToCreate `json:"objects"`
}

// PutBatchEarningPoliciesJSONBody defines parameters for PutBatchEarningPolicies.
type PutBatchEarningPoliciesJSONBody struct {
	Objects []EarningPolicyToUpdate `json:"objects"`
}

// PutBatchEmployeePersonalDataJSONBody defines parameters for PutBatchEmployeePersonalData.
type PutBatchEmployeePersonalDataJSONBody struct {
	Objects []EmployeePersonalData `json:"objects"`
}

// PostBatchEmployeesJSONBody defines parameters for PostBatchEmployees.
type PostBatchEmployeesJSONBody struct {
	Objects []EmployeeToCreate `json:"objects"`
}

// PutBatchEmployeesJSONBody defines parameters for PutBatchEmployees.
type PutBatchEmployeesJSONBody struct {
	Objects []EmployeeToUpdate `json:"objects"`
}

// PostBatchGradesJSONBody defines parameters for PostBatchGrades.
type PostBatchGradesJSONBody struct {
	Objects []GradeToCreate `json:"objects"`
}

// PutBatchGradesJSONBody defines parameters for PutBatchGrades.
type PutBatchGradesJSONBody struct {
	Objects []GradeToUpdate `json:"objects"`
}

// PostBatchHierarchyLinksJSONBody defines parameters for PostBatchHierarchyLinks.
type PostBatchHierarchyLinksJSONBody struct {
	Objects []HierarchyLinkToCreate `json:"objects"`
}

// PutBatchHierarchyLinksJSONBody defines parameters for PutBatchHierarchyLinks.
type PutBatchHierarchyLinksJSONBody struct {
	Objects []HierarchyLinkToUpdate `json:"objects"`
}

// PostBatchHourlyRateJSONBody defines parameters for PostBatchHourlyRate.
type PostBatchHourlyRateJSONBody struct {
	Objects []HourlyRateToCreate `json:"objects"`
}

// PutBatchHourlyRateJSONBody defines parameters for PutBatchHourlyRate.
type PutBatchHourlyRateJSONBody struct {
	Objects []HourlyRateToUpdate `json:"objects"`
}

// PostBatchLeavingReasonsJSONBody defines parameters for PostBatchLeavingReasons.
type PostBatchLeavingReasonsJSONBody struct {
	Objects []LeavingReasonToCreate `json:"objects"`
}

// PutBatchLeavingReasonsJSONBody defines parameters for PutBatchLeavingReasons.
type PutBatchLeavingReasonsJSONBody struct {
	Objects []LeavingReasonToUpdate `json:"objects"`
}

// PostBatchLocationsJSONBody defines parameters for PostBatchLocations.
type PostBatchLocationsJSONBody struct {
	Objects []LocationToCreate `json:"objects"`
}

// PutBatchLocationsJSONBody defines parameters for PutBatchLocations.
type PutBatchLocationsJSONBody struct {
	Objects []LocationToUpdate `json:"objects"`
}

// PostBatchOfficesJSONBody defines parameters for PostBatchOffices.
type PostBatchOfficesJSONBody struct {
	Objects []OfficeToCreate `json:"objects"`
}

// PutBatchOfficesJSONBody defines parameters for PutBatchOffices.
type PutBatchOfficesJSONBody struct {
	Objects []OfficeToUpdate `json:"objects"`
}

// PostBatchPaoBonusPaymentCategoriesJSONBody defines parameters for PostBatchPaoBonusPaymentCategories.
type PostBatchPaoBonusPaymentCategoriesJSONBody struct {
	Objects []PAOBonusPaymentCategoryToCreate `json:"objects"`
}

// PutBatchPaoBonusPaymentCategoriesJSONBody defines parameters for PutBatchPaoBonusPaymentCategories.
type PutBatchPaoBonusPaymentCategoriesJSONBody struct {
	Objects []PAOBonusPaymentCategoryToUpdate `json:"objects"`
}

// PostBatchPayTypesJSONBody defines parameters for PostBatchPayTypes.
type PostBatchPayTypesJSONBody struct {
	Objects []PayTypeToCreate `json:"objects"`
}

// PutBatchPayTypesJSONBody defines parameters for PutBatchPayTypes.
type PutBatchPayTypesJSONBody struct {
	Objects []PayTypeToUpdate `json:"objects"`
}

// PostBatchPeopleJSONBody defines parameters for PostBatchPeople.
type PostBatchPeopleJSONBody struct {
	Objects []PersonToCreate `json:"objects"`
}

// PutBatchPeopleJSONBody defines parameters for PutBatchPeople.
type PutBatchPeopleJSONBody struct {
	Objects []PersonToUpdate `json:"objects"`
}

// PostBatchPersonEducationJSONBody defines parameters for PostBatchPersonEducation.
type PostBatchPersonEducationJSONBody struct {
	Objects []PersonEducationToCreate `json:"objects"`
}

// PutBatchPersonEducationJSONBody defines parameters for PutBatchPersonEducation.
type PutBatchPersonEducationJSONBody struct {
	Objects []PersonEducationToUpdate `json:"objects"`
}

// PutBatchPersonMilitaryJSONBody defines parameters for PutBatchPersonMilitary.
type PutBatchPersonMilitaryJSONBody struct {
	Objects []PersonMilitary `json:"objects"`
}

// PutBatchPersonPictureIdJSONBody defines parameters for PutBatchPersonPictureId.
type PutBatchPersonPictureIdJSONBody struct {
	Objects []PersonPictureID `json:"objects"`
}

// PostBatchPersonalSchedulesJSONBody defines parameters for PostBatchPersonalSchedules.
type PostBatchPersonalSchedulesJSONBody struct {
	Objects []PersonalScheduleToCreate `json:"objects"`
}

// PutBatchPersonalSchedulesJSONBody defines parameters for PutBatchPersonalSchedules.
type PutBatchPersonalSchedulesJSONBody struct {
	Objects []PersonalScheduleToUpdate `json:"objects"`
}

// PostBatchPositionCategoriesJSONBody defines parameters for PostBatchPositionCategories.
type PostBatchPositionCategoriesJSONBody struct {
	Objects []PositionCategoryToCreate `json:"objects"`
}

// PutBatchPositionCategoriesJSONBody defines parameters for PutBatchPositionCategories.
type PutBatchPositionCategoriesJSONBody struct {
	Objects []PositionCategoryToUpdate `json:"objects"`
}

// PostBatchProductEntitiesJSONBody defines parameters for PostBatchProductEntities.
type PostBatchProductEntitiesJSONBody struct {
	Objects []ProductEntityToCreate `json:"objects"`
}

// PutBatchProductEntitiesJSONBody defines parameters for PutBatchProductEntities.
type PutBatchProductEntitiesJSONBody struct {
	Objects []ProductEntityToUpdate `json:"objects"`
}

// PostBatchProductEntityLinksJSONBody defines parameters for PostBatchProductEntityLinks.
type PostBatchProductEntityLinksJSONBody struct {
	Objects []ProductEntityLinkToCreate `json:"objects"`
}

// PutBatchProductEntityLinksJSONBody defines parameters for PutBatchProductEntityLinks.
type PutBatchProductEntityLinksJSONBody struct {
	Objects []ProductEntityLinkToUpdate `json:"objects"`
}

// PostBatchProductStatusesJSONBody defines parameters for PostBatchProductStatuses.
type PostBatchProductStatusesJSONBody struct {
	Objects []ProductStatusToCreate `json:"objects"`
}

// PutBatchProductStatusesJSONBody defines parameters for PutBatchProductStatuses.
type PutBatchProductStatusesJSONBody struct {
	Objects []ProductStatusToUpdate `json:"objects"`
}

// PostBatchProductsJSONBody defines parameters for PostBatchProducts.
type PostBatchProductsJSONBody struct {
	Objects []ProductToCreate `json:"objects"`
}

// PutBatchProductsJSONBody defines parameters for PutBatchProducts.
type PutBatchProductsJSONBody struct {
	Objects []ProductToUpdate `json:"objects"`
}

// PostBatchSalariesJSONBody defines parameters for PostBatchSalaries.
type PostBatchSalariesJSONBody struct {
	Objects []SalaryToCreate `json:"objects"`
}

// PutBatchSalariesJSONBody defines parameters for PutBatchSalaries.
type PutBatchSalariesJSONBody struct {
	Objects []SalaryToUpdate `json:"objects"`
}

// PostBatchScheduleDaysJSONBody defines parameters for PostBatchScheduleDays.
type PostBatchScheduleDaysJSONBody struct {
	Objects []ScheduleDayToCreate `json:"objects"`
}

// PutBatchScheduleDaysJSONBody defines parameters for PutBatchScheduleDays.
type PutBatchScheduleDaysJSONBody struct {
	Objects []ScheduleDayToUpdate `json:"objects"`
}

// PostBatchSchedulesJSONBody defines parameters for PostBatchSchedules.
type PostBatchSchedulesJSONBody struct {
	Objects []ScheduleToCreate `json:"objects"`
}

// PutBatchSchedulesJSONBody defines parameters for PutBatchSchedules.
type PutBatchSchedulesJSONBody struct {
	Objects []ScheduleToUpdate `json:"objects"`
}

// PostBatchShiftTypesJSONBody defines parameters for PostBatchShiftTypes.
type PostBatchShiftTypesJSONBody struct {
	Objects []ShiftTypeToCreate `json:"objects"`
}

// PutBatchShiftTypesJSONBody defines parameters for PutBatchShiftTypes.
type PutBatchShiftTypesJSONBody struct {
	Objects []ShiftTypeToUpdate `json:"objects"`
}

// PostBatchStaffJSONBody defines parameters for PostBatchStaff.
type PostBatchStaffJSONBody struct {
	Objects []StaffUnitToCreate `json:"objects"`
}

// PutBatchStaffJSONBody defines parameters for PutBatchStaff.
type PutBatchStaffJSONBody struct {
	Objects []StaffUnitToUpdate `json:"objects"`
}

// PostBatchStaffAvailabilityStatusesJSONBody defines parameters for PostBatchStaffAvailabilityStatuses.
type PostBatchStaffAvailabilityStatusesJSONBody struct {
	Objects []StaffAvailabilityToCreate `json:"objects"`
}

// PutBatchStaffAvailabilityStatusesJSONBody defines parameters for PutBatchStaffAvailabilityStatuses.
type PutBatchStaffAvailabilityStatusesJSONBody struct {
	Objects []StaffAvailabilityStatusToUpdate `json:"objects"`
}

// PostBatchStaffRolesJSONBody defines parameters for PostBatchStaffRoles.
type PostBatchStaffRolesJSONBody struct {
	Objects []StaffRolesToCreate `json:"objects"`
}

// PutBatchStaffRolesJSONBody defines parameters for PutBatchStaffRoles.
type PutBatchStaffRolesJSONBody struct {
	Objects []StaffRolesToUpdate `json:"objects"`
}

// PostBatchStaffTypesJSONBody defines parameters for PostBatchStaffTypes.
type PostBatchStaffTypesJSONBody struct {
	Objects []StaffTypeToCreate `json:"objects"`
}

// PutBatchStaffTypesJSONBody defines parameters for PutBatchStaffTypes.
type PutBatchStaffTypesJSONBody struct {
	Objects []StaffTypeToUpdate `json:"objects"`
}

// PostBatchStaffWithHistoryJSONBody defines parameters for PostBatchStaffWithHistory.
type PostBatchStaffWithHistoryJSONBody struct {
	Objects []StaffUnitsWithHistoryToCreate `json:"objects"`
}

// PutBatchStaffWithHistoryJSONBody defines parameters for PutBatchStaffWithHistory.
type PutBatchStaffWithHistoryJSONBody struct {
	Objects []StaffUnitsWithHistoryToUpdate `json:"objects"`
}

// PostBatchTimekeeperGroupsJSONBody defines parameters for PostBatchTimekeeperGroups.
type PostBatchTimekeeperGroupsJSONBody struct {
	Objects []TimekeeperGroupToCreate `json:"objects"`
}

// PutBatchTimekeeperGroupsJSONBody defines parameters for PutBatchTimekeeperGroups.
type PutBatchTimekeeperGroupsJSONBody struct {
	Objects []TimekeeperGroupToUpdate `json:"objects"`
}

// PostBatchTimekeepersJSONBody defines parameters for PostBatchTimekeepers.
type PostBatchTimekeepersJSONBody struct {
	Objects []TimekeeperToCreate `json:"objects"`
}

// PostBatchUnitsJSONBody defines parameters for PostBatchUnits.
type PostBatchUnitsJSONBody struct {
	Objects []UnitToCreate `json:"objects"`
}

// PutBatchUnitsJSONBody defines parameters for PutBatchUnits.
type PutBatchUnitsJSONBody struct {
	Objects []UnitToUpdate `json:"objects"`
}

// PostBatchVacationBalancesJSONBody defines parameters for PostBatchVacationBalances.
type PostBatchVacationBalancesJSONBody struct {
	Objects []VacationBalanceToCreate `json:"objects"`
}

// PutBatchVacationBalancesJSONBody defines parameters for PutBatchVacationBalances.
type PutBatchVacationBalancesJSONBody struct {
	Objects []VacationBalanceToUpdate `json:"objects"`
}

// PostBatchVacationPeriodsJSONBody defines parameters for PostBatchVacationPeriods.
type PostBatchVacationPeriodsJSONBody struct {
	Objects []VacationPeriodToCreate `json:"objects"`
}

// PutBatchVacationPeriodsJSONBody defines parameters for PutBatchVacationPeriods.
type PutBatchVacationPeriodsJSONBody struct {
	Objects []VacationPeriodToUpdate `json:"objects"`
}

// PostBatchVhiJSONBody defines parameters for PostBatchVhi.
type PostBatchVhiJSONBody struct {
	Objects []VHIToCreate `json:"objects"`
}

// PutBatchVhiJSONBody defines parameters for PutBatchVhi.
type PutBatchVhiJSONBody struct {
	Objects []VHIToUpdate `json:"objects"`
}

// PostBatchWorkWeekHoursJSONBody defines parameters for PostBatchWorkWeekHours.
type PostBatchWorkWeekHoursJSONBody struct {
	Objects []WorkWeekHoursToCreate `json:"objects"`
}

// PutBatchWorkWeekHoursJSONBody defines parameters for PutBatchWorkWeekHours.
type PutBatchWorkWeekHoursJSONBody struct {
	Objects []WorkWeekHoursToUpdate `json:"objects"`
}

// PostBatchWorkingHoursJSONBody defines parameters for PostBatchWorkingHours.
type PostBatchWorkingHoursJSONBody struct {
	Objects []WorkingHoursToCreate `json:"objects"`
}

// PutBatchWorkingHoursJSONBody defines parameters for PutBatchWorkingHours.
type PutBatchWorkingHoursJSONBody struct {
	Objects []WorkingHoursToUpdate `json:"objects"`
}

// GetCalendarDaysParams defines parameters for GetCalendarDays.
type GetCalendarDaysParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по id календарей
	Calendar *IDsList            `json:"calendar,omitempty"`
	DateFrom *openapi_types.Date `json:"dateFrom,omitempty"`
	DateTo   *openapi_types.Date `json:"dateTo,omitempty"`
}

// GetCalendarsParams defines parameters for GetCalendars.
type GetCalendarsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id юнитов для фильтрации
	UnitIDs *UnitIDs `json:"unitIDs,omitempty"`
}

// GetClustersParams defines parameters for GetClusters.
type GetClustersParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetComplexAssignmentsParams defines parameters for GetComplexAssignments.
type GetComplexAssignmentsParams struct {
	// список id работников для фильтрации
	EmplIDs *EmployeeIDs `json:"emplIDs,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по списку идентификаторов статусов назначений
	StatusIds *AssignmentStatusIdsFilterParam `json:"statusIds,omitempty"`

	// фильтр по списку идентификаторов типов назначений
	TypeIds *AssignmentTypeIdsFilterParam `json:"typeIds,omitempty"`

	// фильтр по списку идентификаторов типов сотрудников
	EmployeeTypeIDs *EmployeeTypeIdsFilterParam `json:"employeeTypeIDs,omitempty"`

	// Фильтр по логинам сотрудников
	Logins *LoginFilterParam `json:"logins,omitempty"`

	// фильтр по списку id подразделений, которым принадлежат назначения
	CurrentUnitIds *IDsList `json:"currentUnitIds,omitempty"`

	// Фильтр по id вышестоящего в иерархии подразделения
	UnitIds *IDsList `json:"unitIds,omitempty"`

	// фильтр по списку id категорий назначения
	CategoryIDs *IDsList `json:"categoryIDs,omitempty"`

	// фильтр по статусам совместительства
	CombinationStatuses *[]CombinationStatus `json:"combinationStatuses,omitempty"`

	// Параметр запроса для уволенных сотрудников начиная с конкретной даты
	ActualTerminationDateFrom *openapi_types.Date `json:"actualTerminationDateFrom,omitempty"`

	// фильтр по id иерархии
	HierarchyID *string `json:"hierarchyID,omitempty"`

	// список id ШЕ для фильтрации
	StaffUnitIDs *StaffUnitIDs `json:"staffUnitIDs,omitempty"`

	// фильтр по номерам ШЕ
	StaffCodes *StaffCodes `json:"staffCodes,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetComplexAssignmentsV2Params defines parameters for GetComplexAssignmentsV2.
type GetComplexAssignmentsV2Params struct {
	// список id работников для фильтрации
	EmplIDs *EmployeeIDs `json:"emplIDs,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по списку идентификаторов статусов назначений
	StatusIds *AssignmentStatusIdsFilterParam `json:"statusIds,omitempty"`

	// фильтр по списку идентификаторов типов назначений
	TypeIds *AssignmentTypeIdsFilterParam `json:"typeIds,omitempty"`

	// фильтр по списку идентификаторов типов сотрудников
	EmployeeTypeIDs *EmployeeTypeIdsFilterParam `json:"employeeTypeIDs,omitempty"`

	// Фильтр по логинам сотрудников
	Logins *LoginFilterParam `json:"logins,omitempty"`

	// фильтр по списку id подразделений, которым принадлежат назначения
	CurrentUnitIds *IDsList `json:"currentUnitIds,omitempty"`

	// Фильтр по id вышестоящего в иерархии подразделения
	UnitIds *IDsList `json:"unitIds,omitempty"`

	// фильтр по списку id категорий назначения
	CategoryIDs *IDsList `json:"categoryIDs,omitempty"`

	// фильтр по статусам совместительства
	CombinationStatuses *[]CombinationStatus `json:"combinationStatuses,omitempty"`

	// Параметр запроса для уволенных сотрудников начиная с конкретной даты
	ActualTerminationDateFrom *openapi_types.Date `json:"actualTerminationDateFrom,omitempty"`

	// список id ШЕ для фильтрации
	StaffUnitIDs *StaffUnitIDs `json:"staffUnitIDs,omitempty"`

	// фильтр по номерам ШЕ
	StaffCodes *StaffCodes `json:"staffCodes,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`

	// Перечисление сущностей, которые необходимо добавить в ответ
	RequiredEntities *RequiredEntitiesComplexAssignmentV2 `json:"requiredEntities,omitempty"`
}

// GetComplexOrganizationStructureParams defines parameters for GetComplexOrganizationStructure.
type GetComplexOrganizationStructureParams struct {
	// фильтр по идентификатору иерархии
	HierarchyID OrganizationStructureHierarchyIDFilterParam `json:"hierarchyID"`

	// фильтр по юнитам для которых нужно получить иерархическую структуру
	UnitIDs OrganizationStructureUnitIDsFilterParam `json:"unitIDs"`

	// перечисление полей, которые должны присутствовать в ответе в поле unit
	RequiredFields OrganizationStructureRequiredFieldsFilterParam `json:"requiredFields"`
}

// GetComplexPeopleIdParams defines parameters for GetComplexPeopleId.
type GetComplexPeopleIdParams struct {
	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetComplexUnitpathParams defines parameters for GetComplexUnitpath.
type GetComplexUnitpathParams struct {
	// Идентификатор иерархии, в рамках которой будет происходить выгрузка, если параметр не передан - используется основная иерархия
	//
	// Для того чтобы выгрузить подразделения вне иерархии следует передать прочерк "-"
	HierarchyID *HierarchyParam `json:"hierarchyID,omitempty"`

	// список идентификаторов подразделений
	Ids []string `json:"ids"`

	// получить также записи удаленные из источника
	WithDeleted *bool `json:"withDeleted,omitempty"`
}

// GetComplexUnitsIdSubunitsParams defines parameters for GetComplexUnitsIdSubunits.
type GetComplexUnitsIdSubunitsParams struct {
	// получение записей начиная с n-й
	Offset *Offset `json:"offset,omitempty"`

	// максимальное количество записей для получения
	Limit *Limit `json:"limit,omitempty"`

	// Идентификатор иерархии, в рамках которой будет происходить выгрузка, если параметр не передан - используется основная иерархия
	//
	// Для того чтобы выгрузить подразделения вне иерархии следует передать прочерк "-"
	HierarchyID *HierarchyParam `json:"hierarchyID,omitempty"`

	// Фильтр по глубине получаемых орг единиц
	DepthLevel *int `json:"depthLevel,omitempty"`

	// Фильтр по глубине получаемых орг единиц от
	DepthFrom *int `json:"depthFrom,omitempty"`

	// Фильтр по глубине получаемых орг единиц до
	DepthTo *int `json:"depthTo,omitempty"`

	// Включить в ответ корневое подразделение
	IncludeUnit *bool `json:"includeUnit,omitempty"`

	// порядок сортировки запрашиваемых объектов
	OrderBy *OrderBy `json:"orderBy,omitempty"`

	// фильтр по списку идентификаторов типов подразделений
	UnitTypesIds *UnitTypesIdsFilterParam `json:"unitTypesIds,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// получить также записи удаленные из источника
	WithDeleted *bool `json:"withDeleted,omitempty"`
}

// GetContractsParams defines parameters for GetContracts.
type GetContractsParams struct {
	// фильтр по id назначения
	AssignmentId *string `json:"assignmentId,omitempty"`

	// фильтр по id работника
	EmployeeId *string `json:"employeeId,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по списку id статусов
	StatusIDs *IDsList `json:"statusIDs,omitempty"`

	// фильтр по списку идентификаторов типов контрактов
	TypeIDs *IDsList `json:"typeIDs,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetContractstatusParams defines parameters for GetContractstatus.
type GetContractstatusParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetContracttypesParams defines parameters for GetContracttypes.
type GetContracttypesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetCostcentersParams defines parameters for GetCostcenters.
type GetCostcentersParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по кодам центра затрат
	CostCenterCodes *CostCenterCodesParam `json:"costCenterCodes,omitempty"`
}

// GetDgphDonorsParams defines parameters for GetDgphDonors.
type GetDgphDonorsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id ШЕ для фильтрации
	StaffUnitIDs *StaffUnitIDs `json:"staffUnitIDs,omitempty"`

	// список id назначений для фильтрации
	AssIDs *AssignmentIDs `json:"assIDs,omitempty"`

	// список PipelineID физ лиц
	PersonIDs *PersonIDsParam `json:"personIDs,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetDisabilityCategoriesParams defines parameters for GetDisabilityCategories.
type GetDisabilityCategoriesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetDistWorkParams defines parameters for GetDistWork.
type GetDistWorkParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id назначений для фильтрации
	AssIDs *AssignmentIDs `json:"assIDs,omitempty"`

	// список PipelineID физ лиц
	PersonIDs *PersonIDsParam `json:"personIDs,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetDocumentsParams defines parameters for GetDocuments.
type GetDocumentsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// Фильтр по СНИЛСам
	Snils *[]string `json:"snils,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetEarningPoliciesParams defines parameters for GetEarningPolicies.
type GetEarningPoliciesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id юнитов для фильтрации
	UnitIDs *UnitIDs `json:"unitIDs,omitempty"`
}

// GetEmployeeRolesParams defines parameters for GetEmployeeRoles.
type GetEmployeeRolesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetEmployeesParams defines parameters for GetEmployees.
type GetEmployeesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`

	// фильтр по списку идентификаторов типов сотрудников
	EmployeeTypeIDs *EmployeeTypeIdsFilterParam `json:"employeeTypeIDs,omitempty"`

	// список PipelineID физ лиц
	PersonIDs *PersonIDsParam `json:"personIDs,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// Фильтр по логинам сотрудников
	Logins *[]string `json:"logins,omitempty"`

	// Фильтр по табельным номерам сотрудников
	TabNums *[]string `json:"tabNums,omitempty"`
}

// GetEmployeetypesParams defines parameters for GetEmployeetypes.
type GetEmployeetypesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по типу объекта
	ObjectKinds *EventsObjectKindsFilterParam `json:"objectKinds,omitempty"`

	// фильтр по типу произошедшего события
	EventKinds *[]string `json:"eventKinds,omitempty"`

	// поиск по object_id должности
	ObjectIDs *IDsList `json:"objectIDs,omitempty"`
}

// GetFunctionalBlocksParams defines parameters for GetFunctionalBlocks.
type GetFunctionalBlocksParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetGradesParams defines parameters for GetGrades.
type GetGradesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetHierarchiesParams defines parameters for GetHierarchies.
type GetHierarchiesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
	IsPrimary    *bool         `json:"isPrimary,omitempty"`
}

// GetHierarchyLinksParams defines parameters for GetHierarchyLinks.
type GetHierarchyLinksParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по списку идентификаторов иерархий
	HierarchyIDs *HierarchyLinksHierarchyFilterParam `json:"hierarchyIDs,omitempty"`

	// фильтр по списку идентификаторов подразделений-родителей
	ParentIDs *HierarchyLinksParentFilterParam `json:"parentIDs,omitempty"`

	// фильтр по списку идентификаторов подразделений-наследников
	ChildIDs *HierarchyLinksChildFilterParam `json:"childIDs,omitempty"`

	// позволяет найти корневое подразделение в рамках иерархии
	IsRootUnit *bool `json:"isRootUnit,omitempty"`
}

// GetHourlyRateParams defines parameters for GetHourlyRate.
type GetHourlyRateParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id юнитов для фильтрации
	UnitIDs *UnitIDs `json:"unitIDs,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// поиск по id должности
	PositionIDs *IDsList `json:"positionIDs,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetLeavingReasonsParams defines parameters for GetLeavingReasons.
type GetLeavingReasonsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetLocationsParams defines parameters for GetLocations.
type GetLocationsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetOfficesParams defines parameters for GetOffices.
type GetOfficesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по идентификаторам локаций
	LocationIDs *IDsList `json:"locationIDs,omitempty"`

	// фильтр по названию офиса
	OfficeNames *OfficeNames `json:"officeNames,omitempty"`
}

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// Фильтр по PipelineID подразделения
	//
	// Для подразделения из фильтра будет найдено корневое подразделение в переданной в **hierarchyID** иерархии
	//
	// В ответе вернется организация соответствующая корневому подразделению
	UnitID *UUID `json:"unitID,omitempty"`

	// Идентификатор иерархии, в рамках которой будет происходить выгрузка, если параметр не передан - используется основная иерархия
	//
	// Для того чтобы выгрузить подразделения вне иерархии следует передать прочерк "-"
	HierarchyID *HierarchyParam `json:"hierarchyID,omitempty"`
}

// GetPaoBonusPaymentCategoriesParams defines parameters for GetPaoBonusPaymentCategories.
type GetPaoBonusPaymentCategoriesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetPayTypesParams defines parameters for GetPayTypes.
type GetPayTypesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetPeopleParams defines parameters for GetPeople.
type GetPeopleParams struct {
	// Фильтр по полному соответствию фамилии и/или имени и/или отчества
	SFullname *string `json:"sFullname,omitempty"`

	// Фильтр по полному соответствию снилс
	DocumentsSnils *string `json:"documents.snils,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetPersonEducationParams defines parameters for GetPersonEducation.
type GetPersonEducationParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список PipelineID физ лиц
	PersonIDs *PersonIDsParam `json:"personIDs,omitempty"`
}

// GetPersonalSchedulesParams defines parameters for GetPersonalSchedules.
type GetPersonalSchedulesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id расписаний работ для фильтрации
	ScheduleIDs *ScheduleIDs `json:"scheduleIDs,omitempty"`

	// список id назначений для фильтрации
	AssIDs *AssignmentIDs `json:"assIDs,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetPositionCategoriesParams defines parameters for GetPositionCategories.
type GetPositionCategoriesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetPositionsParams defines parameters for GetPositions.
type GetPositionsParams struct {
	// фильтр по вхождению строки в заголовок
	STitle *string `json:"sTitle,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetProductEntitiesParams defines parameters for GetProductEntities.
type GetProductEntitiesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по типам продуктовых сущностей
	ProductEntitiesTypes *ProductEntitiesTypes `json:"productEntitiesTypes,omitempty"`

	// фильтр по именам продуктовых сущностей
	Names *ProductEntitiesNames `json:"names,omitempty"`

	// фильтр по BI коду продукта
	ProductCodes *ProductEntitiesCodes `json:"productCodes,omitempty"`
}

// GetProductEntityLinksParams defines parameters for GetProductEntityLinks.
type GetProductEntityLinksParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по родителям в связях продуктовых сущностей
	ChildIDs *ProductEntitiesLinksChildIDs `json:"childIDs,omitempty"`

	// фильтр по родителям в связях продуктовых сущностей
	ParentIDs *ProductEntitiesLinksParentIDs `json:"parentIDs,omitempty"`
}

// GetProductStatusesParams defines parameters for GetProductStatuses.
type GetProductStatusesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по именам статусов
	Names *ProductStatusNames `json:"names,omitempty"`
}

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetSalariesParams defines parameters for GetSalaries.
type GetSalariesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// Фильтр по id назначений
	AssignmentsIds *IDsList `json:"assignmentsIds,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetScheduleDaysParams defines parameters for GetScheduleDays.
type GetScheduleDaysParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id расписаний работ для фильтрации
	ScheduleIDs *ScheduleIDs `json:"scheduleIDs,omitempty"`
}

// GetSchedulesParams defines parameters for GetSchedules.
type GetSchedulesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по списку id календарей
	CalendarIDs *IDsList `json:"calendarIDs,omitempty"`
}

// GetShiftTypesParams defines parameters for GetShiftTypes.
type GetShiftTypesParams struct {
	// Фильтр по id типов рабочих графиков
	Ids *IDsList `json:"ids,omitempty"`
}

// GetStaffParams defines parameters for GetStaff.
type GetStaffParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id юнитов для фильтрации
	UnitIDs *UnitIDs `json:"unitIDs,omitempty"`

	// фильтр по списку идентификаторов грейдов
	GradesIds *GradesIdsFilterParam `json:"gradesIds,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// фильтр по идентификаторам доступности
	AvailabilityIDs *IDsList `json:"availabilityIDs,omitempty"`

	// фильтр по идентификаторам роли
	StaffRolesIDs *IDsList `json:"staffRolesIDs,omitempty"`

	// фильтр по номерам ШЕ
	StaffCodes *StaffCodes `json:"staffCodes,omitempty"`

	// фильтр по частичному вхождению номера ШЕ
	StaffCodeSubstring *StaffCodeSubstring `json:"staffCodeSubstring,omitempty"`

	// фильтр по идентификаторам организаций (юр. лиц)
	OrgIDs  *IDsList `json:"orgIDs,omitempty"`
	History *bool    `json:"history,omitempty"`
}

// GetStaffAvailabilityStatusesParams defines parameters for GetStaffAvailabilityStatuses.
type GetStaffAvailabilityStatusesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetStaffRolesParams defines parameters for GetStaffRoles.
type GetStaffRolesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetStaffTypesParams defines parameters for GetStaffTypes.
type GetStaffTypesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetSubunitsParams defines parameters for GetSubunits.
type GetSubunitsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по списку идентификаторов типов подразделений
	UnitTypesIds *UnitTypesIdsFilterParam `json:"unitTypesIds,omitempty"`

	// Идентификатор иерархии, в рамках которой будет происходить выгрузка, если параметр не передан - используется основная иерархия
	//
	// Для того чтобы выгрузить подразделения вне иерархии следует передать прочерк "-"
	HierarchyID *HierarchyParam `json:"hierarchyID,omitempty"`

	// список id юнитов для фильтрации
	UnitIDs *UnitIDs `json:"unitIDs,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`
}

// PutTaskIdJSONBody defines parameters for PutTaskId.
type PutTaskIdJSONBody struct {
	// произвольное сообщение
	Message *string `json:"message,omitempty"`

	// статус задачи
	Status PutTaskIdJSONBodyStatus `json:"status"`
}

// PutTaskIdJSONBodyStatus defines parameters for PutTaskId.
type PutTaskIdJSONBodyStatus string

// GetTimekeeperGroupsParams defines parameters for GetTimekeeperGroups.
type GetTimekeeperGroupsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetTimekeepersParams defines parameters for GetTimekeepers.
type GetTimekeepersParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id назначений для фильтрации
	AssIDs *AssignmentIDs `json:"assIDs,omitempty"`

	// список id юнитов для фильтрации
	UnitIDs *UnitIDs `json:"unitIDs,omitempty"`

	// список PipelineID групп табельщиков для фильтрации
	GroupIDs *IDsList `json:"groupIDs,omitempty"`

	// список PipelineID сотрудников(Employee) для фильтрации
	TimekeeperIDs *IDsList `json:"timekeeperIDs,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetUnitsParams defines parameters for GetUnits.
type GetUnitsParams struct {
	STitle *string `json:"sTitle,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// фильтр по списку идентификаторов типов подразделений
	UnitTypesIds *UnitTypesIdsFilterParam `json:"unitTypesIds,omitempty"`

	// Идентификатор иерархии, в рамках которой будет происходить выгрузка, если параметр не передан - используется основная иерархия
	//
	// Для того чтобы выгрузить подразделения вне иерархии следует передать прочерк "-"
	HierarchyID *HierarchyParam `json:"hierarchyID,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetUnitsWithoutHierarchiesParams defines parameters for GetUnitsWithoutHierarchies.
type GetUnitsWithoutHierarchiesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetUnitsIdParams defines parameters for GetUnitsId.
type GetUnitsIdParams struct {
	// Идентификатор иерархии, в рамках которой будет происходить выгрузка, если параметр не передан - используется основная иерархия
	//
	// Для того чтобы выгрузить подразделения вне иерархии следует передать прочерк "-"
	HierarchyID *HierarchyParam `json:"hierarchyID,omitempty"`
}

// GetUnittypesParams defines parameters for GetUnittypes.
type GetUnittypesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// GetVacationBalancesParams defines parameters for GetVacationBalances.
type GetVacationBalancesParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id назначений для фильтрации
	AssIDs *AssignmentIDs `json:"assIDs,omitempty"`

	// список id работников для фильтрации
	EmplIDs *EmployeeIDs `json:"emplIDs,omitempty"`

	// фильтр по id типов отсутствий
	AbsTypeID *IDsList `json:"absTypeID,omitempty"`

	// фильтр по годам
	Year *[]int `json:"year,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetVacationPeriodsParams defines parameters for GetVacationPeriods.
type GetVacationPeriodsParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id назначений для фильтрации
	AssIDs *AssignmentIDs `json:"assIDs,omitempty"`

	// список id работников для фильтрации
	EmplIDs *EmployeeIDs `json:"emplIDs,omitempty"`

	// поиск по id отсутствий
	AbsID *IDsList `json:"absID,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetVhiParams defines parameters for GetVhi.
type GetVhiParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`

	// список id назначений для фильтрации
	AssIDs *AssignmentIDs `json:"assIDs,omitempty"`

	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**
	//
	// Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
	//
	// Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
	ActivityFilters *ActivityFilters `json:"activityFilters,omitempty"`

	// фильтр по списку идентификаторов организаций /organizations
	OrgsIds *OrgsIdsFilterParam `json:"orgsIds,omitempty"`
}

// GetWorkingHoursParams defines parameters for GetWorkingHours.
type GetWorkingHoursParams struct {
	// Сгруппированные параметры фильтрации
	//
	// **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*
	//
	// Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
	QueryFilters *QueryFilters `json:"queryFilters,omitempty"`
}

// PostApplicantsJSONRequestBody defines body for PostApplicants for application/json ContentType.
type PostApplicantsJSONRequestBody PostApplicantsJSONBody

// PostAssignmentcategoriesJSONRequestBody defines body for PostAssignmentcategories for application/json ContentType.
type PostAssignmentcategoriesJSONRequestBody AssignmentCategoryReqBody

// PutAssignmentcategoriesIdJSONRequestBody defines body for PutAssignmentcategoriesId for application/json ContentType.
type PutAssignmentcategoriesIdJSONRequestBody AssignmentCategoryReqBody

// PostAssignmentstatusJSONRequestBody defines body for PostAssignmentstatus for application/json ContentType.
type PostAssignmentstatusJSONRequestBody AssignmentStatusReqBody

// PutAssignmentstatusIdJSONRequestBody defines body for PutAssignmentstatusId for application/json ContentType.
type PutAssignmentstatusIdJSONRequestBody AssignmentStatusReqBody

// PostAssignmenttypesJSONRequestBody defines body for PostAssignmenttypes for application/json ContentType.
type PostAssignmenttypesJSONRequestBody AssignmentTypeReqBody

// PutAssignmenttypesIdJSONRequestBody defines body for PutAssignmenttypesId for application/json ContentType.
type PutAssignmenttypesIdJSONRequestBody AssignmentTypeReqBody

// PostBalanceUnitsJSONRequestBody defines body for PostBalanceUnits for application/json ContentType.
type PostBalanceUnitsJSONRequestBody BalanceUnitReqBody

// PutBalanceUnitsIdJSONRequestBody defines body for PutBalanceUnitsId for application/json ContentType.
type PutBalanceUnitsIdJSONRequestBody BalanceUnitReqBody

// PostBatchAbsenceTypesJSONRequestBody defines body for PostBatchAbsenceTypes for application/json ContentType.
type PostBatchAbsenceTypesJSONRequestBody PostBatchAbsenceTypesJSONBody

// PutBatchAbsenceTypesJSONRequestBody defines body for PutBatchAbsenceTypes for application/json ContentType.
type PutBatchAbsenceTypesJSONRequestBody PutBatchAbsenceTypesJSONBody

// PostBatchAbsencesJSONRequestBody defines body for PostBatchAbsences for application/json ContentType.
type PostBatchAbsencesJSONRequestBody PostBatchAbsencesJSONBody

// PutBatchAbsencesJSONRequestBody defines body for PutBatchAbsences for application/json ContentType.
type PutBatchAbsencesJSONRequestBody PutBatchAbsencesJSONBody

// PostBatchAllowancesJSONRequestBody defines body for PostBatchAllowances for application/json ContentType.
type PostBatchAllowancesJSONRequestBody PostBatchAllowancesJSONBody

// PutBatchAllowancesJSONRequestBody defines body for PutBatchAllowances for application/json ContentType.
type PutBatchAllowancesJSONRequestBody PutBatchAllowancesJSONBody

// PostBatchApplicantsJSONRequestBody defines body for PostBatchApplicants for application/json ContentType.
type PostBatchApplicantsJSONRequestBody PostBatchApplicantsJSONBody

// PutBatchApplicantsJSONRequestBody defines body for PutBatchApplicants for application/json ContentType.
type PutBatchApplicantsJSONRequestBody PutBatchApplicantsJSONBody

// PostBatchAssignmentsJSONRequestBody defines body for PostBatchAssignments for application/json ContentType.
type PostBatchAssignmentsJSONRequestBody PostBatchAssignmentsJSONBody

// PutBatchAssignmentsJSONRequestBody defines body for PutBatchAssignments for application/json ContentType.
type PutBatchAssignmentsJSONRequestBody PutBatchAssignmentsJSONBody

// PostBatchAssignmentsWithHistoryJSONRequestBody defines body for PostBatchAssignmentsWithHistory for application/json ContentType.
type PostBatchAssignmentsWithHistoryJSONRequestBody PostBatchAssignmentsWithHistoryJSONBody

// PutBatchAssignmentsWithHistoryJSONRequestBody defines body for PutBatchAssignmentsWithHistory for application/json ContentType.
type PutBatchAssignmentsWithHistoryJSONRequestBody PutBatchAssignmentsWithHistoryJSONBody

// PostBatchBackBonusPaymentCategoriesJSONRequestBody defines body for PostBatchBackBonusPaymentCategories for application/json ContentType.
type PostBatchBackBonusPaymentCategoriesJSONRequestBody PostBatchBackBonusPaymentCategoriesJSONBody

// PutBatchBackBonusPaymentCategoriesJSONRequestBody defines body for PutBatchBackBonusPaymentCategories for application/json ContentType.
type PutBatchBackBonusPaymentCategoriesJSONRequestBody PutBatchBackBonusPaymentCategoriesJSONBody

// PostBatchBanksJSONRequestBody defines body for PostBatchBanks for application/json ContentType.
type PostBatchBanksJSONRequestBody PostBatchBanksJSONBody

// PutBatchBanksJSONRequestBody defines body for PutBatchBanks for application/json ContentType.
type PutBatchBanksJSONRequestBody PutBatchBanksJSONBody

// PostBatchCalendarJSONRequestBody defines body for PostBatchCalendar for application/json ContentType.
type PostBatchCalendarJSONRequestBody PostBatchCalendarJSONBody

// PutBatchCalendarJSONRequestBody defines body for PutBatchCalendar for application/json ContentType.
type PutBatchCalendarJSONRequestBody PutBatchCalendarJSONBody

// PostBatchCalendarDaysJSONRequestBody defines body for PostBatchCalendarDays for application/json ContentType.
type PostBatchCalendarDaysJSONRequestBody PostBatchCalendarDaysJSONBody

// PutBatchCalendarDaysJSONRequestBody defines body for PutBatchCalendarDays for application/json ContentType.
type PutBatchCalendarDaysJSONRequestBody PutBatchCalendarDaysJSONBody

// PostBatchContractsJSONRequestBody defines body for PostBatchContracts for application/json ContentType.
type PostBatchContractsJSONRequestBody PostBatchContractsJSONBody

// PutBatchContractsJSONRequestBody defines body for PutBatchContracts for application/json ContentType.
type PutBatchContractsJSONRequestBody PutBatchContractsJSONBody

// PostBatchDeleteJSONRequestBody defines body for PostBatchDelete for application/json ContentType.
type PostBatchDeleteJSONRequestBody PostBatchDeleteJSONBody

// PostBatchDgphDonorsJSONRequestBody defines body for PostBatchDgphDonors for application/json ContentType.
type PostBatchDgphDonorsJSONRequestBody PostBatchDgphDonorsJSONBody

// PutBatchDgphDonorsJSONRequestBody defines body for PutBatchDgphDonors for application/json ContentType.
type PutBatchDgphDonorsJSONRequestBody PutBatchDgphDonorsJSONBody

// PostBatchDisabilityCategoriesJSONRequestBody defines body for PostBatchDisabilityCategories for application/json ContentType.
type PostBatchDisabilityCategoriesJSONRequestBody PostBatchDisabilityCategoriesJSONBody

// PutBatchDisabilityCategoriesJSONRequestBody defines body for PutBatchDisabilityCategories for application/json ContentType.
type PutBatchDisabilityCategoriesJSONRequestBody PutBatchDisabilityCategoriesJSONBody

// PostBatchDistWorkJSONRequestBody defines body for PostBatchDistWork for application/json ContentType.
type PostBatchDistWorkJSONRequestBody PostBatchDistWorkJSONBody

// PutBatchDistWorkJSONRequestBody defines body for PutBatchDistWork for application/json ContentType.
type PutBatchDistWorkJSONRequestBody PutBatchDistWorkJSONBody

// PostBatchEarningPoliciesJSONRequestBody defines body for PostBatchEarningPolicies for application/json ContentType.
type PostBatchEarningPoliciesJSONRequestBody PostBatchEarningPoliciesJSONBody

// PutBatchEarningPoliciesJSONRequestBody defines body for PutBatchEarningPolicies for application/json ContentType.
type PutBatchEarningPoliciesJSONRequestBody PutBatchEarningPoliciesJSONBody

// PutBatchEmployeePersonalDataJSONRequestBody defines body for PutBatchEmployeePersonalData for application/json ContentType.
type PutBatchEmployeePersonalDataJSONRequestBody PutBatchEmployeePersonalDataJSONBody

// PostBatchEmployeesJSONRequestBody defines body for PostBatchEmployees for application/json ContentType.
type PostBatchEmployeesJSONRequestBody PostBatchEmployeesJSONBody

// PutBatchEmployeesJSONRequestBody defines body for PutBatchEmployees for application/json ContentType.
type PutBatchEmployeesJSONRequestBody PutBatchEmployeesJSONBody

// PostBatchGradesJSONRequestBody defines body for PostBatchGrades for application/json ContentType.
type PostBatchGradesJSONRequestBody PostBatchGradesJSONBody

// PutBatchGradesJSONRequestBody defines body for PutBatchGrades for application/json ContentType.
type PutBatchGradesJSONRequestBody PutBatchGradesJSONBody

// PostBatchHierarchyLinksJSONRequestBody defines body for PostBatchHierarchyLinks for application/json ContentType.
type PostBatchHierarchyLinksJSONRequestBody PostBatchHierarchyLinksJSONBody

// PutBatchHierarchyLinksJSONRequestBody defines body for PutBatchHierarchyLinks for application/json ContentType.
type PutBatchHierarchyLinksJSONRequestBody PutBatchHierarchyLinksJSONBody

// PostBatchHourlyRateJSONRequestBody defines body for PostBatchHourlyRate for application/json ContentType.
type PostBatchHourlyRateJSONRequestBody PostBatchHourlyRateJSONBody

// PutBatchHourlyRateJSONRequestBody defines body for PutBatchHourlyRate for application/json ContentType.
type PutBatchHourlyRateJSONRequestBody PutBatchHourlyRateJSONBody

// PostBatchLeavingReasonsJSONRequestBody defines body for PostBatchLeavingReasons for application/json ContentType.
type PostBatchLeavingReasonsJSONRequestBody PostBatchLeavingReasonsJSONBody

// PutBatchLeavingReasonsJSONRequestBody defines body for PutBatchLeavingReasons for application/json ContentType.
type PutBatchLeavingReasonsJSONRequestBody PutBatchLeavingReasonsJSONBody

// PostBatchLocationsJSONRequestBody defines body for PostBatchLocations for application/json ContentType.
type PostBatchLocationsJSONRequestBody PostBatchLocationsJSONBody

// PutBatchLocationsJSONRequestBody defines body for PutBatchLocations for application/json ContentType.
type PutBatchLocationsJSONRequestBody PutBatchLocationsJSONBody

// PostBatchOfficesJSONRequestBody defines body for PostBatchOffices for application/json ContentType.
type PostBatchOfficesJSONRequestBody PostBatchOfficesJSONBody

// PutBatchOfficesJSONRequestBody defines body for PutBatchOffices for application/json ContentType.
type PutBatchOfficesJSONRequestBody PutBatchOfficesJSONBody

// PostBatchPaoBonusPaymentCategoriesJSONRequestBody defines body for PostBatchPaoBonusPaymentCategories for application/json ContentType.
type PostBatchPaoBonusPaymentCategoriesJSONRequestBody PostBatchPaoBonusPaymentCategoriesJSONBody

// PutBatchPaoBonusPaymentCategoriesJSONRequestBody defines body for PutBatchPaoBonusPaymentCategories for application/json ContentType.
type PutBatchPaoBonusPaymentCategoriesJSONRequestBody PutBatchPaoBonusPaymentCategoriesJSONBody

// PostBatchPayTypesJSONRequestBody defines body for PostBatchPayTypes for application/json ContentType.
type PostBatchPayTypesJSONRequestBody PostBatchPayTypesJSONBody

// PutBatchPayTypesJSONRequestBody defines body for PutBatchPayTypes for application/json ContentType.
type PutBatchPayTypesJSONRequestBody PutBatchPayTypesJSONBody

// PostBatchPeopleJSONRequestBody defines body for PostBatchPeople for application/json ContentType.
type PostBatchPeopleJSONRequestBody PostBatchPeopleJSONBody

// PutBatchPeopleJSONRequestBody defines body for PutBatchPeople for application/json ContentType.
type PutBatchPeopleJSONRequestBody PutBatchPeopleJSONBody

// PostBatchPersonEducationJSONRequestBody defines body for PostBatchPersonEducation for application/json ContentType.
type PostBatchPersonEducationJSONRequestBody PostBatchPersonEducationJSONBody

// PutBatchPersonEducationJSONRequestBody defines body for PutBatchPersonEducation for application/json ContentType.
type PutBatchPersonEducationJSONRequestBody PutBatchPersonEducationJSONBody

// PutBatchPersonMilitaryJSONRequestBody defines body for PutBatchPersonMilitary for application/json ContentType.
type PutBatchPersonMilitaryJSONRequestBody PutBatchPersonMilitaryJSONBody

// PutBatchPersonPictureIdJSONRequestBody defines body for PutBatchPersonPictureId for application/json ContentType.
type PutBatchPersonPictureIdJSONRequestBody PutBatchPersonPictureIdJSONBody

// PostBatchPersonalSchedulesJSONRequestBody defines body for PostBatchPersonalSchedules for application/json ContentType.
type PostBatchPersonalSchedulesJSONRequestBody PostBatchPersonalSchedulesJSONBody

// PutBatchPersonalSchedulesJSONRequestBody defines body for PutBatchPersonalSchedules for application/json ContentType.
type PutBatchPersonalSchedulesJSONRequestBody PutBatchPersonalSchedulesJSONBody

// PostBatchPositionCategoriesJSONRequestBody defines body for PostBatchPositionCategories for application/json ContentType.
type PostBatchPositionCategoriesJSONRequestBody PostBatchPositionCategoriesJSONBody

// PutBatchPositionCategoriesJSONRequestBody defines body for PutBatchPositionCategories for application/json ContentType.
type PutBatchPositionCategoriesJSONRequestBody PutBatchPositionCategoriesJSONBody

// PostBatchProductEntitiesJSONRequestBody defines body for PostBatchProductEntities for application/json ContentType.
type PostBatchProductEntitiesJSONRequestBody PostBatchProductEntitiesJSONBody

// PutBatchProductEntitiesJSONRequestBody defines body for PutBatchProductEntities for application/json ContentType.
type PutBatchProductEntitiesJSONRequestBody PutBatchProductEntitiesJSONBody

// PostBatchProductEntityLinksJSONRequestBody defines body for PostBatchProductEntityLinks for application/json ContentType.
type PostBatchProductEntityLinksJSONRequestBody PostBatchProductEntityLinksJSONBody

// PutBatchProductEntityLinksJSONRequestBody defines body for PutBatchProductEntityLinks for application/json ContentType.
type PutBatchProductEntityLinksJSONRequestBody PutBatchProductEntityLinksJSONBody

// PostBatchProductStatusesJSONRequestBody defines body for PostBatchProductStatuses for application/json ContentType.
type PostBatchProductStatusesJSONRequestBody PostBatchProductStatusesJSONBody

// PutBatchProductStatusesJSONRequestBody defines body for PutBatchProductStatuses for application/json ContentType.
type PutBatchProductStatusesJSONRequestBody PutBatchProductStatusesJSONBody

// PostBatchProductsJSONRequestBody defines body for PostBatchProducts for application/json ContentType.
type PostBatchProductsJSONRequestBody PostBatchProductsJSONBody

// PutBatchProductsJSONRequestBody defines body for PutBatchProducts for application/json ContentType.
type PutBatchProductsJSONRequestBody PutBatchProductsJSONBody

// PostBatchSalariesJSONRequestBody defines body for PostBatchSalaries for application/json ContentType.
type PostBatchSalariesJSONRequestBody PostBatchSalariesJSONBody

// PutBatchSalariesJSONRequestBody defines body for PutBatchSalaries for application/json ContentType.
type PutBatchSalariesJSONRequestBody PutBatchSalariesJSONBody

// PostBatchScheduleDaysJSONRequestBody defines body for PostBatchScheduleDays for application/json ContentType.
type PostBatchScheduleDaysJSONRequestBody PostBatchScheduleDaysJSONBody

// PutBatchScheduleDaysJSONRequestBody defines body for PutBatchScheduleDays for application/json ContentType.
type PutBatchScheduleDaysJSONRequestBody PutBatchScheduleDaysJSONBody

// PostBatchSchedulesJSONRequestBody defines body for PostBatchSchedules for application/json ContentType.
type PostBatchSchedulesJSONRequestBody PostBatchSchedulesJSONBody

// PutBatchSchedulesJSONRequestBody defines body for PutBatchSchedules for application/json ContentType.
type PutBatchSchedulesJSONRequestBody PutBatchSchedulesJSONBody

// PostBatchShiftTypesJSONRequestBody defines body for PostBatchShiftTypes for application/json ContentType.
type PostBatchShiftTypesJSONRequestBody PostBatchShiftTypesJSONBody

// PutBatchShiftTypesJSONRequestBody defines body for PutBatchShiftTypes for application/json ContentType.
type PutBatchShiftTypesJSONRequestBody PutBatchShiftTypesJSONBody

// PostBatchStaffJSONRequestBody defines body for PostBatchStaff for application/json ContentType.
type PostBatchStaffJSONRequestBody PostBatchStaffJSONBody

// PutBatchStaffJSONRequestBody defines body for PutBatchStaff for application/json ContentType.
type PutBatchStaffJSONRequestBody PutBatchStaffJSONBody

// PostBatchStaffAvailabilityStatusesJSONRequestBody defines body for PostBatchStaffAvailabilityStatuses for application/json ContentType.
type PostBatchStaffAvailabilityStatusesJSONRequestBody PostBatchStaffAvailabilityStatusesJSONBody

// PutBatchStaffAvailabilityStatusesJSONRequestBody defines body for PutBatchStaffAvailabilityStatuses for application/json ContentType.
type PutBatchStaffAvailabilityStatusesJSONRequestBody PutBatchStaffAvailabilityStatusesJSONBody

// PostBatchStaffRolesJSONRequestBody defines body for PostBatchStaffRoles for application/json ContentType.
type PostBatchStaffRolesJSONRequestBody PostBatchStaffRolesJSONBody

// PutBatchStaffRolesJSONRequestBody defines body for PutBatchStaffRoles for application/json ContentType.
type PutBatchStaffRolesJSONRequestBody PutBatchStaffRolesJSONBody

// PostBatchStaffTypesJSONRequestBody defines body for PostBatchStaffTypes for application/json ContentType.
type PostBatchStaffTypesJSONRequestBody PostBatchStaffTypesJSONBody

// PutBatchStaffTypesJSONRequestBody defines body for PutBatchStaffTypes for application/json ContentType.
type PutBatchStaffTypesJSONRequestBody PutBatchStaffTypesJSONBody

// PostBatchStaffWithHistoryJSONRequestBody defines body for PostBatchStaffWithHistory for application/json ContentType.
type PostBatchStaffWithHistoryJSONRequestBody PostBatchStaffWithHistoryJSONBody

// PutBatchStaffWithHistoryJSONRequestBody defines body for PutBatchStaffWithHistory for application/json ContentType.
type PutBatchStaffWithHistoryJSONRequestBody PutBatchStaffWithHistoryJSONBody

// PostBatchTimekeeperGroupsJSONRequestBody defines body for PostBatchTimekeeperGroups for application/json ContentType.
type PostBatchTimekeeperGroupsJSONRequestBody PostBatchTimekeeperGroupsJSONBody

// PutBatchTimekeeperGroupsJSONRequestBody defines body for PutBatchTimekeeperGroups for application/json ContentType.
type PutBatchTimekeeperGroupsJSONRequestBody PutBatchTimekeeperGroupsJSONBody

// PostBatchTimekeepersJSONRequestBody defines body for PostBatchTimekeepers for application/json ContentType.
type PostBatchTimekeepersJSONRequestBody PostBatchTimekeepersJSONBody

// PostBatchUnitsJSONRequestBody defines body for PostBatchUnits for application/json ContentType.
type PostBatchUnitsJSONRequestBody PostBatchUnitsJSONBody

// PutBatchUnitsJSONRequestBody defines body for PutBatchUnits for application/json ContentType.
type PutBatchUnitsJSONRequestBody PutBatchUnitsJSONBody

// PostBatchVacationBalancesJSONRequestBody defines body for PostBatchVacationBalances for application/json ContentType.
type PostBatchVacationBalancesJSONRequestBody PostBatchVacationBalancesJSONBody

// PutBatchVacationBalancesJSONRequestBody defines body for PutBatchVacationBalances for application/json ContentType.
type PutBatchVacationBalancesJSONRequestBody PutBatchVacationBalancesJSONBody

// PostBatchVacationPeriodsJSONRequestBody defines body for PostBatchVacationPeriods for application/json ContentType.
type PostBatchVacationPeriodsJSONRequestBody PostBatchVacationPeriodsJSONBody

// PutBatchVacationPeriodsJSONRequestBody defines body for PutBatchVacationPeriods for application/json ContentType.
type PutBatchVacationPeriodsJSONRequestBody PutBatchVacationPeriodsJSONBody

// PostBatchVhiJSONRequestBody defines body for PostBatchVhi for application/json ContentType.
type PostBatchVhiJSONRequestBody PostBatchVhiJSONBody

// PutBatchVhiJSONRequestBody defines body for PutBatchVhi for application/json ContentType.
type PutBatchVhiJSONRequestBody PutBatchVhiJSONBody

// PostBatchWorkWeekHoursJSONRequestBody defines body for PostBatchWorkWeekHours for application/json ContentType.
type PostBatchWorkWeekHoursJSONRequestBody PostBatchWorkWeekHoursJSONBody

// PutBatchWorkWeekHoursJSONRequestBody defines body for PutBatchWorkWeekHours for application/json ContentType.
type PutBatchWorkWeekHoursJSONRequestBody PutBatchWorkWeekHoursJSONBody

// PostBatchWorkingHoursJSONRequestBody defines body for PostBatchWorkingHours for application/json ContentType.
type PostBatchWorkingHoursJSONRequestBody PostBatchWorkingHoursJSONBody

// PutBatchWorkingHoursJSONRequestBody defines body for PutBatchWorkingHours for application/json ContentType.
type PutBatchWorkingHoursJSONRequestBody PutBatchWorkingHoursJSONBody

// PostContractstatusJSONRequestBody defines body for PostContractstatus for application/json ContentType.
type PostContractstatusJSONRequestBody ContractStatusReqBody

// PutContractstatusIdJSONRequestBody defines body for PutContractstatusId for application/json ContentType.
type PutContractstatusIdJSONRequestBody ContractStatusReqBody

// PostContracttypesJSONRequestBody defines body for PostContracttypes for application/json ContentType.
type PostContracttypesJSONRequestBody ContractTypeReqBody

// PutContracttypesIdJSONRequestBody defines body for PutContracttypesId for application/json ContentType.
type PutContracttypesIdJSONRequestBody ContractTypeReqBody

// PostCostcentersJSONRequestBody defines body for PostCostcenters for application/json ContentType.
type PostCostcentersJSONRequestBody CostCenterReqBody

// PutCostcentersIdJSONRequestBody defines body for PutCostcentersId for application/json ContentType.
type PutCostcentersIdJSONRequestBody CostCenterReqBody

// PostEmployeetypesJSONRequestBody defines body for PostEmployeetypes for application/json ContentType.
type PostEmployeetypesJSONRequestBody EmployeeTypeReqBody

// PutEmployeetypesIdJSONRequestBody defines body for PutEmployeetypesId for application/json ContentType.
type PutEmployeetypesIdJSONRequestBody EmployeeTypeReqBody

// PostGradesJSONRequestBody defines body for PostGrades for application/json ContentType.
type PostGradesJSONRequestBody GradeReqBody

// PutGradesIdJSONRequestBody defines body for PutGradesId for application/json ContentType.
type PutGradesIdJSONRequestBody GradeReqBody

// PostHierarchiesJSONRequestBody defines body for PostHierarchies for application/json ContentType.
type PostHierarchiesJSONRequestBody HierarchyReqBody

// PutHierarchiesIdJSONRequestBody defines body for PutHierarchiesId for application/json ContentType.
type PutHierarchiesIdJSONRequestBody HierarchyReqBody

// PostHierarchyLinksJSONRequestBody defines body for PostHierarchyLinks for application/json ContentType.
type PostHierarchyLinksJSONRequestBody HierarchyLinkReqBody

// PutHierarchyLinksIdJSONRequestBody defines body for PutHierarchyLinksId for application/json ContentType.
type PutHierarchyLinksIdJSONRequestBody HierarchyLinkReqBody

// PostOrganizationsJSONRequestBody defines body for PostOrganizations for application/json ContentType.
type PostOrganizationsJSONRequestBody OrganizationReqBody

// PutOrganizationsIdJSONRequestBody defines body for PutOrganizationsId for application/json ContentType.
type PutOrganizationsIdJSONRequestBody OrganizationReqBody

// PostPositionsJSONRequestBody defines body for PostPositions for application/json ContentType.
type PostPositionsJSONRequestBody PositionReqBody

// PutPositionsIdJSONRequestBody defines body for PutPositionsId for application/json ContentType.
type PutPositionsIdJSONRequestBody PositionReqBody

// PutTaskIdJSONRequestBody defines body for PutTaskId for application/json ContentType.
type PutTaskIdJSONRequestBody PutTaskIdJSONBody

// PostUnittypesJSONRequestBody defines body for PostUnittypes for application/json ContentType.
type PostUnittypesJSONRequestBody UnitTypeReqBody

// PutUnittypesIdJSONRequestBody defines body for PutUnittypesId for application/json ContentType.
type PutUnittypesIdJSONRequestBody UnitTypeReqBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAbsenceTypes request
	GetAbsenceTypes(ctx context.Context, params *GetAbsenceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAbsenceTypesId request
	GetAbsenceTypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAbsences request
	GetAbsences(ctx context.Context, params *GetAbsencesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAbsencesId request
	GetAbsencesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllowances request
	GetAllowances(ctx context.Context, params *GetAllowancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllowancesId request
	GetAllowancesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicants request
	GetApplicants(ctx context.Context, params *GetApplicantsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApplicants request with any body
	PostApplicantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplicants(ctx context.Context, body PostApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicantsId request
	GetApplicantsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssignmentcategories request
	GetAssignmentcategories(ctx context.Context, params *GetAssignmentcategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAssignmentcategories request with any body
	PostAssignmentcategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAssignmentcategories(ctx context.Context, body PostAssignmentcategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssignmentcategoriesId request
	GetAssignmentcategoriesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAssignmentcategoriesId request with any body
	PutAssignmentcategoriesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAssignmentcategoriesId(ctx context.Context, id UUIDPathObjectID, body PutAssignmentcategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssignments request
	GetAssignments(ctx context.Context, params *GetAssignmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssignmentsId request
	GetAssignmentsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssignmentstatus request
	GetAssignmentstatus(ctx context.Context, params *GetAssignmentstatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAssignmentstatus request with any body
	PostAssignmentstatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAssignmentstatus(ctx context.Context, body PostAssignmentstatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssignmentstatusId request
	GetAssignmentstatusId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAssignmentstatusId request with any body
	PutAssignmentstatusIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAssignmentstatusId(ctx context.Context, id UUIDPathObjectID, body PutAssignmentstatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssignmenttypes request
	GetAssignmenttypes(ctx context.Context, params *GetAssignmenttypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAssignmenttypes request with any body
	PostAssignmenttypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAssignmenttypes(ctx context.Context, body PostAssignmenttypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssignmenttypesId request
	GetAssignmenttypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAssignmenttypesId request with any body
	PutAssignmenttypesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAssignmenttypesId(ctx context.Context, id UUIDPathObjectID, body PutAssignmenttypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackBonusPaymentCategories request
	GetBackBonusPaymentCategories(ctx context.Context, params *GetBackBonusPaymentCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackBonusPaymentCategoriesId request
	GetBackBonusPaymentCategoriesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBalanceUnits request
	GetBalanceUnits(ctx context.Context, params *GetBalanceUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBalanceUnits request with any body
	PostBalanceUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBalanceUnits(ctx context.Context, body PostBalanceUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBalanceUnitsId request
	GetBalanceUnitsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBalanceUnitsId request with any body
	PutBalanceUnitsIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBalanceUnitsId(ctx context.Context, id UUIDPathObjectID, body PutBalanceUnitsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBanks request
	GetBanks(ctx context.Context, params *GetBanksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBanksId request
	GetBanksId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchAbsenceTypes request with any body
	PostBatchAbsenceTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchAbsenceTypes(ctx context.Context, body PostBatchAbsenceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchAbsenceTypes request with any body
	PutBatchAbsenceTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchAbsenceTypes(ctx context.Context, body PutBatchAbsenceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchAbsences request with any body
	PostBatchAbsencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchAbsences(ctx context.Context, body PostBatchAbsencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchAbsences request with any body
	PutBatchAbsencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchAbsences(ctx context.Context, body PutBatchAbsencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchAllowances request with any body
	PostBatchAllowancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchAllowances(ctx context.Context, body PostBatchAllowancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchAllowances request with any body
	PutBatchAllowancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchAllowances(ctx context.Context, body PutBatchAllowancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchApplicants request with any body
	PostBatchApplicantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchApplicants(ctx context.Context, body PostBatchApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchApplicants request with any body
	PutBatchApplicantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchApplicants(ctx context.Context, body PutBatchApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchAssignments request with any body
	PostBatchAssignmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchAssignments(ctx context.Context, body PostBatchAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchAssignments request with any body
	PutBatchAssignmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchAssignments(ctx context.Context, body PutBatchAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchAssignmentsWithHistory request with any body
	PostBatchAssignmentsWithHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchAssignmentsWithHistory(ctx context.Context, body PostBatchAssignmentsWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchAssignmentsWithHistory request with any body
	PutBatchAssignmentsWithHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchAssignmentsWithHistory(ctx context.Context, body PutBatchAssignmentsWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchBackBonusPaymentCategories request with any body
	PostBatchBackBonusPaymentCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchBackBonusPaymentCategories(ctx context.Context, body PostBatchBackBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchBackBonusPaymentCategories request with any body
	PutBatchBackBonusPaymentCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchBackBonusPaymentCategories(ctx context.Context, body PutBatchBackBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchBanks request with any body
	PostBatchBanksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchBanks(ctx context.Context, body PostBatchBanksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchBanks request with any body
	PutBatchBanksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchBanks(ctx context.Context, body PutBatchBanksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchCalendar request with any body
	PostBatchCalendarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchCalendar(ctx context.Context, body PostBatchCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchCalendar request with any body
	PutBatchCalendarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchCalendar(ctx context.Context, body PutBatchCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchCalendarDays request with any body
	PostBatchCalendarDaysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchCalendarDays(ctx context.Context, body PostBatchCalendarDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchCalendarDays request with any body
	PutBatchCalendarDaysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchCalendarDays(ctx context.Context, body PutBatchCalendarDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchContracts request with any body
	PostBatchContractsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchContracts(ctx context.Context, body PostBatchContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchContracts request with any body
	PutBatchContractsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchContracts(ctx context.Context, body PutBatchContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchDelete request with any body
	PostBatchDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchDelete(ctx context.Context, body PostBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchDgphDonors request with any body
	PostBatchDgphDonorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchDgphDonors(ctx context.Context, body PostBatchDgphDonorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchDgphDonors request with any body
	PutBatchDgphDonorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchDgphDonors(ctx context.Context, body PutBatchDgphDonorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchDisabilityCategories request with any body
	PostBatchDisabilityCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchDisabilityCategories(ctx context.Context, body PostBatchDisabilityCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchDisabilityCategories request with any body
	PutBatchDisabilityCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchDisabilityCategories(ctx context.Context, body PutBatchDisabilityCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchDistWork request with any body
	PostBatchDistWorkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchDistWork(ctx context.Context, body PostBatchDistWorkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchDistWork request with any body
	PutBatchDistWorkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchDistWork(ctx context.Context, body PutBatchDistWorkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchEarningPolicies request with any body
	PostBatchEarningPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchEarningPolicies(ctx context.Context, body PostBatchEarningPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchEarningPolicies request with any body
	PutBatchEarningPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchEarningPolicies(ctx context.Context, body PutBatchEarningPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchEmployeePersonalData request with any body
	PutBatchEmployeePersonalDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchEmployeePersonalData(ctx context.Context, body PutBatchEmployeePersonalDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchEmployees request with any body
	PostBatchEmployeesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchEmployees(ctx context.Context, body PostBatchEmployeesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchEmployees request with any body
	PutBatchEmployeesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchEmployees(ctx context.Context, body PutBatchEmployeesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchGrades request with any body
	PostBatchGradesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchGrades(ctx context.Context, body PostBatchGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchGrades request with any body
	PutBatchGradesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchGrades(ctx context.Context, body PutBatchGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchHierarchyLinks request with any body
	PostBatchHierarchyLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchHierarchyLinks(ctx context.Context, body PostBatchHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchHierarchyLinks request with any body
	PutBatchHierarchyLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchHierarchyLinks(ctx context.Context, body PutBatchHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchHourlyRate request with any body
	PostBatchHourlyRateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchHourlyRate(ctx context.Context, body PostBatchHourlyRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchHourlyRate request with any body
	PutBatchHourlyRateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchHourlyRate(ctx context.Context, body PutBatchHourlyRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchLeavingReasons request with any body
	PostBatchLeavingReasonsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchLeavingReasons(ctx context.Context, body PostBatchLeavingReasonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchLeavingReasons request with any body
	PutBatchLeavingReasonsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchLeavingReasons(ctx context.Context, body PutBatchLeavingReasonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchLocations request with any body
	PostBatchLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchLocations(ctx context.Context, body PostBatchLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchLocations request with any body
	PutBatchLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchLocations(ctx context.Context, body PutBatchLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchOffices request with any body
	PostBatchOfficesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchOffices(ctx context.Context, body PostBatchOfficesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchOffices request with any body
	PutBatchOfficesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchOffices(ctx context.Context, body PutBatchOfficesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchPaoBonusPaymentCategories request with any body
	PostBatchPaoBonusPaymentCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchPaoBonusPaymentCategories(ctx context.Context, body PostBatchPaoBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchPaoBonusPaymentCategories request with any body
	PutBatchPaoBonusPaymentCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchPaoBonusPaymentCategories(ctx context.Context, body PutBatchPaoBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchPayTypes request with any body
	PostBatchPayTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchPayTypes(ctx context.Context, body PostBatchPayTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchPayTypes request with any body
	PutBatchPayTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchPayTypes(ctx context.Context, body PutBatchPayTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchPeople request with any body
	PostBatchPeopleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchPeople(ctx context.Context, body PostBatchPeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchPeople request with any body
	PutBatchPeopleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchPeople(ctx context.Context, body PutBatchPeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchPersonEducation request with any body
	PostBatchPersonEducationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchPersonEducation(ctx context.Context, body PostBatchPersonEducationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchPersonEducation request with any body
	PutBatchPersonEducationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchPersonEducation(ctx context.Context, body PutBatchPersonEducationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchPersonMilitary request with any body
	PutBatchPersonMilitaryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchPersonMilitary(ctx context.Context, body PutBatchPersonMilitaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchPersonPictureId request with any body
	PutBatchPersonPictureIdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchPersonPictureId(ctx context.Context, body PutBatchPersonPictureIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchPersonalSchedules request with any body
	PostBatchPersonalSchedulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchPersonalSchedules(ctx context.Context, body PostBatchPersonalSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchPersonalSchedules request with any body
	PutBatchPersonalSchedulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchPersonalSchedules(ctx context.Context, body PutBatchPersonalSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchPositionCategories request with any body
	PostBatchPositionCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchPositionCategories(ctx context.Context, body PostBatchPositionCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchPositionCategories request with any body
	PutBatchPositionCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchPositionCategories(ctx context.Context, body PutBatchPositionCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchProductEntities request with any body
	PostBatchProductEntitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchProductEntities(ctx context.Context, body PostBatchProductEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchProductEntities request with any body
	PutBatchProductEntitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchProductEntities(ctx context.Context, body PutBatchProductEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchProductEntityLinks request with any body
	PostBatchProductEntityLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchProductEntityLinks(ctx context.Context, body PostBatchProductEntityLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchProductEntityLinks request with any body
	PutBatchProductEntityLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchProductEntityLinks(ctx context.Context, body PutBatchProductEntityLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchProductStatuses request with any body
	PostBatchProductStatusesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchProductStatuses(ctx context.Context, body PostBatchProductStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchProductStatuses request with any body
	PutBatchProductStatusesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchProductStatuses(ctx context.Context, body PutBatchProductStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchProducts request with any body
	PostBatchProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchProducts(ctx context.Context, body PostBatchProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchProducts request with any body
	PutBatchProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchProducts(ctx context.Context, body PutBatchProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchSalaries request with any body
	PostBatchSalariesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchSalaries(ctx context.Context, body PostBatchSalariesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchSalaries request with any body
	PutBatchSalariesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchSalaries(ctx context.Context, body PutBatchSalariesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchScheduleDays request with any body
	PostBatchScheduleDaysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchScheduleDays(ctx context.Context, body PostBatchScheduleDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchScheduleDays request with any body
	PutBatchScheduleDaysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchScheduleDays(ctx context.Context, body PutBatchScheduleDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchSchedules request with any body
	PostBatchSchedulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchSchedules(ctx context.Context, body PostBatchSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchSchedules request with any body
	PutBatchSchedulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchSchedules(ctx context.Context, body PutBatchSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchShiftTypes request with any body
	PostBatchShiftTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchShiftTypes(ctx context.Context, body PostBatchShiftTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchShiftTypes request with any body
	PutBatchShiftTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchShiftTypes(ctx context.Context, body PutBatchShiftTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchStaff request with any body
	PostBatchStaffWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchStaff(ctx context.Context, body PostBatchStaffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchStaff request with any body
	PutBatchStaffWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchStaff(ctx context.Context, body PutBatchStaffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchStaffAvailabilityStatuses request with any body
	PostBatchStaffAvailabilityStatusesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchStaffAvailabilityStatuses(ctx context.Context, body PostBatchStaffAvailabilityStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchStaffAvailabilityStatuses request with any body
	PutBatchStaffAvailabilityStatusesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchStaffAvailabilityStatuses(ctx context.Context, body PutBatchStaffAvailabilityStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchStaffRoles request with any body
	PostBatchStaffRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchStaffRoles(ctx context.Context, body PostBatchStaffRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchStaffRoles request with any body
	PutBatchStaffRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchStaffRoles(ctx context.Context, body PutBatchStaffRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchStaffTypes request with any body
	PostBatchStaffTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchStaffTypes(ctx context.Context, body PostBatchStaffTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchStaffTypes request with any body
	PutBatchStaffTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchStaffTypes(ctx context.Context, body PutBatchStaffTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchStaffWithHistory request with any body
	PostBatchStaffWithHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchStaffWithHistory(ctx context.Context, body PostBatchStaffWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchStaffWithHistory request with any body
	PutBatchStaffWithHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchStaffWithHistory(ctx context.Context, body PutBatchStaffWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchTimekeeperGroups request with any body
	PostBatchTimekeeperGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchTimekeeperGroups(ctx context.Context, body PostBatchTimekeeperGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchTimekeeperGroups request with any body
	PutBatchTimekeeperGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchTimekeeperGroups(ctx context.Context, body PutBatchTimekeeperGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchTimekeepers request with any body
	PostBatchTimekeepersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchTimekeepers(ctx context.Context, body PostBatchTimekeepersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchUnits request with any body
	PostBatchUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchUnits(ctx context.Context, body PostBatchUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchUnits request with any body
	PutBatchUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchUnits(ctx context.Context, body PutBatchUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchVacationBalances request with any body
	PostBatchVacationBalancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchVacationBalances(ctx context.Context, body PostBatchVacationBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchVacationBalances request with any body
	PutBatchVacationBalancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchVacationBalances(ctx context.Context, body PutBatchVacationBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchVacationPeriods request with any body
	PostBatchVacationPeriodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchVacationPeriods(ctx context.Context, body PostBatchVacationPeriodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchVacationPeriods request with any body
	PutBatchVacationPeriodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchVacationPeriods(ctx context.Context, body PutBatchVacationPeriodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchVhi request with any body
	PostBatchVhiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchVhi(ctx context.Context, body PostBatchVhiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchVhi request with any body
	PutBatchVhiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchVhi(ctx context.Context, body PutBatchVhiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchWorkWeekHours request with any body
	PostBatchWorkWeekHoursWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchWorkWeekHours(ctx context.Context, body PostBatchWorkWeekHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchWorkWeekHours request with any body
	PutBatchWorkWeekHoursWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchWorkWeekHours(ctx context.Context, body PutBatchWorkWeekHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBatchWorkingHours request with any body
	PostBatchWorkingHoursWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBatchWorkingHours(ctx context.Context, body PostBatchWorkingHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBatchWorkingHours request with any body
	PutBatchWorkingHoursWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBatchWorkingHours(ctx context.Context, body PutBatchWorkingHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCalendarDays request
	GetCalendarDays(ctx context.Context, params *GetCalendarDaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCalendars request
	GetCalendars(ctx context.Context, params *GetCalendarsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCalendarsId request
	GetCalendarsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusters request
	GetClusters(ctx context.Context, params *GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClusters request with any body
	PostClustersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClustersId request
	GetClustersId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClustersId request with any body
	PutClustersIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComplexAssignments request
	GetComplexAssignments(ctx context.Context, params *GetComplexAssignmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComplexAssignmentsV2 request
	GetComplexAssignmentsV2(ctx context.Context, params *GetComplexAssignmentsV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComplexOrganizationStructure request
	GetComplexOrganizationStructure(ctx context.Context, params *GetComplexOrganizationStructureParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComplexPeopleId request
	GetComplexPeopleId(ctx context.Context, id UUIDPathObjectID, params *GetComplexPeopleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComplexUnitpath request
	GetComplexUnitpath(ctx context.Context, params *GetComplexUnitpathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComplexUnitsIdSubunits request
	GetComplexUnitsIdSubunits(ctx context.Context, id UUIDPathObjectID, params *GetComplexUnitsIdSubunitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContracts request
	GetContracts(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContractstatus request
	GetContractstatus(ctx context.Context, params *GetContractstatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContractstatus request with any body
	PostContractstatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContractstatus(ctx context.Context, body PostContractstatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContractstatusId request
	GetContractstatusId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutContractstatusId request with any body
	PutContractstatusIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutContractstatusId(ctx context.Context, id UUIDPathObjectID, body PutContractstatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContracttypes request
	GetContracttypes(ctx context.Context, params *GetContracttypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContracttypes request with any body
	PostContracttypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContracttypes(ctx context.Context, body PostContracttypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContracttypesId request
	GetContracttypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutContracttypesId request with any body
	PutContracttypesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutContracttypesId(ctx context.Context, id UUIDPathObjectID, body PutContracttypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCostcenters request
	GetCostcenters(ctx context.Context, params *GetCostcentersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCostcenters request with any body
	PostCostcentersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCostcenters(ctx context.Context, body PostCostcentersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCostcentersId request
	GetCostcentersId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCostcentersId request with any body
	PutCostcentersIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCostcentersId(ctx context.Context, id UUIDPathObjectID, body PutCostcentersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDgphDonors request
	GetDgphDonors(ctx context.Context, params *GetDgphDonorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDgphDonorsId request
	GetDgphDonorsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDisabilityCategories request
	GetDisabilityCategories(ctx context.Context, params *GetDisabilityCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDistWork request
	GetDistWork(ctx context.Context, params *GetDistWorkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDistWorkId request
	GetDistWorkId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDocuments request
	GetDocuments(ctx context.Context, params *GetDocumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEarningPolicies request
	GetEarningPolicies(ctx context.Context, params *GetEarningPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployeeRoles request
	GetEmployeeRoles(ctx context.Context, params *GetEmployeeRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmployeeRoles request with any body
	PostEmployeeRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployeeRolesId request
	GetEmployeeRolesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutEmployeeRolesId request with any body
	PutEmployeeRolesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployees request
	GetEmployees(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployeesId request
	GetEmployeesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployeetypes request
	GetEmployeetypes(ctx context.Context, params *GetEmployeetypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmployeetypes request with any body
	PostEmployeetypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEmployeetypes(ctx context.Context, body PostEmployeetypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployeetypesId request
	GetEmployeetypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutEmployeetypesId request with any body
	PutEmployeetypesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutEmployeetypesId(ctx context.Context, id UUIDPathObjectID, body PutEmployeetypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvents request
	GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventsId request
	GetEventsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalBlocks request
	GetFunctionalBlocks(ctx context.Context, params *GetFunctionalBlocksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFunctionalBlocks request with any body
	PostFunctionalBlocksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionalBlocksId request
	GetFunctionalBlocksId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFunctionalBlocksId request with any body
	PutFunctionalBlocksIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGrades request
	GetGrades(ctx context.Context, params *GetGradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGrades request with any body
	PostGradesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGrades(ctx context.Context, body PostGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGradesId request
	GetGradesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGradesId request with any body
	PutGradesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGradesId(ctx context.Context, id UUIDPathObjectID, body PutGradesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHierarchies request
	GetHierarchies(ctx context.Context, params *GetHierarchiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHierarchies request with any body
	PostHierarchiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostHierarchies(ctx context.Context, body PostHierarchiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHierarchiesId request
	GetHierarchiesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutHierarchiesId request with any body
	PutHierarchiesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutHierarchiesId(ctx context.Context, id UUIDPathObjectID, body PutHierarchiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHierarchyLinks request
	GetHierarchyLinks(ctx context.Context, params *GetHierarchyLinksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHierarchyLinks request with any body
	PostHierarchyLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostHierarchyLinks(ctx context.Context, body PostHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHierarchyLinksId request
	GetHierarchyLinksId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutHierarchyLinksId request with any body
	PutHierarchyLinksIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutHierarchyLinksId(ctx context.Context, id UUIDPathObjectID, body PutHierarchyLinksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHourlyRate request
	GetHourlyRate(ctx context.Context, params *GetHourlyRateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeavingReasons request
	GetLeavingReasons(ctx context.Context, params *GetLeavingReasonsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeavingReasonsId request
	GetLeavingReasonsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocations request
	GetLocations(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocationsId request
	GetLocationsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutManualTriggerManagers request
	PutManualTriggerManagers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOffices request
	GetOffices(ctx context.Context, params *GetOfficesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizations request
	GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizations request with any body
	PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsId request
	GetOrganizationsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsId request with any body
	PutOrganizationsIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsId(ctx context.Context, id UUIDPathObjectID, body PutOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaoBonusPaymentCategories request
	GetPaoBonusPaymentCategories(ctx context.Context, params *GetPaoBonusPaymentCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaoBonusPaymentCategoriesId request
	GetPaoBonusPaymentCategoriesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayTypes request
	GetPayTypes(ctx context.Context, params *GetPayTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPeople request
	GetPeople(ctx context.Context, params *GetPeopleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPeopleId request
	GetPeopleId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPeopleIdDocuments request
	GetPeopleIdDocuments(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPeopleIdOrigin request
	GetPeopleIdOrigin(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersonEducation request
	GetPersonEducation(ctx context.Context, params *GetPersonEducationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersonalSchedules request
	GetPersonalSchedules(ctx context.Context, params *GetPersonalSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPositionCategories request
	GetPositionCategories(ctx context.Context, params *GetPositionCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPositionCategoriesId request
	GetPositionCategoriesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPositions request
	GetPositions(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPositions request with any body
	PostPositionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPositions(ctx context.Context, body PostPositionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPositionsId request
	GetPositionsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPositionsId request with any body
	PutPositionsIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPositionsId(ctx context.Context, id UUIDPathObjectID, body PutPositionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductEntities request
	GetProductEntities(ctx context.Context, params *GetProductEntitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductEntityLinks request
	GetProductEntityLinks(ctx context.Context, params *GetProductEntityLinksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductStatuses request
	GetProductStatuses(ctx context.Context, params *GetProductStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProducts request
	GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsId request
	GetProductsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSalaries request
	GetSalaries(ctx context.Context, params *GetSalariesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSalariesId request
	GetSalariesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScheduleDays request
	GetScheduleDays(ctx context.Context, params *GetScheduleDaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchedules request
	GetSchedules(ctx context.Context, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShiftTypes request
	GetShiftTypes(ctx context.Context, params *GetShiftTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaff request
	GetStaff(ctx context.Context, params *GetStaffParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaffAvailabilityStatuses request
	GetStaffAvailabilityStatuses(ctx context.Context, params *GetStaffAvailabilityStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaffAvailabilityStatusesId request
	GetStaffAvailabilityStatusesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaffRoles request
	GetStaffRoles(ctx context.Context, params *GetStaffRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaffRolesId request
	GetStaffRolesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaffTypes request
	GetStaffTypes(ctx context.Context, params *GetStaffTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaffTypesId request
	GetStaffTypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubunits request
	GetSubunits(ctx context.Context, params *GetSubunitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskId request
	GetTaskId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTaskId request with any body
	PutTaskIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTaskId(ctx context.Context, id UUIDPathObjectID, body PutTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimekeeperGroups request
	GetTimekeeperGroups(ctx context.Context, params *GetTimekeeperGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimekeeperGroupsId request
	GetTimekeeperGroupsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimekeepers request
	GetTimekeepers(ctx context.Context, params *GetTimekeepersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnits request
	GetUnits(ctx context.Context, params *GetUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnitsWithoutHierarchies request
	GetUnitsWithoutHierarchies(ctx context.Context, params *GetUnitsWithoutHierarchiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnitsId request
	GetUnitsId(ctx context.Context, id UUIDPathObjectID, params *GetUnitsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnittypes request
	GetUnittypes(ctx context.Context, params *GetUnittypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUnittypes request with any body
	PostUnittypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUnittypes(ctx context.Context, body PostUnittypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnittypesId request
	GetUnittypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUnittypesId request with any body
	PutUnittypesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUnittypesId(ctx context.Context, id UUIDPathObjectID, body PutUnittypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVacationBalances request
	GetVacationBalances(ctx context.Context, params *GetVacationBalancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVacationPeriods request
	GetVacationPeriods(ctx context.Context, params *GetVacationPeriodsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVhi request
	GetVhi(ctx context.Context, params *GetVhiParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVhiId request
	GetVhiId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkingHours request
	GetWorkingHours(ctx context.Context, params *GetWorkingHoursParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAbsenceTypes(ctx context.Context, params *GetAbsenceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAbsenceTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAbsenceTypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAbsenceTypesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAbsences(ctx context.Context, params *GetAbsencesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAbsencesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAbsencesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAbsencesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllowances(ctx context.Context, params *GetAllowancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllowancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllowancesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllowancesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicants(ctx context.Context, params *GetApplicantsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicantsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicantsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicants(ctx context.Context, body PostApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicantsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicantsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicantsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssignmentcategories(ctx context.Context, params *GetAssignmentcategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssignmentcategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAssignmentcategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAssignmentcategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAssignmentcategories(ctx context.Context, body PostAssignmentcategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAssignmentcategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssignmentcategoriesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssignmentcategoriesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssignmentcategoriesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssignmentcategoriesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssignmentcategoriesId(ctx context.Context, id UUIDPathObjectID, body PutAssignmentcategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssignmentcategoriesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssignments(ctx context.Context, params *GetAssignmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssignmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssignmentsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssignmentsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssignmentstatus(ctx context.Context, params *GetAssignmentstatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssignmentstatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAssignmentstatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAssignmentstatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAssignmentstatus(ctx context.Context, body PostAssignmentstatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAssignmentstatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssignmentstatusId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssignmentstatusIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssignmentstatusIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssignmentstatusIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssignmentstatusId(ctx context.Context, id UUIDPathObjectID, body PutAssignmentstatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssignmentstatusIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssignmenttypes(ctx context.Context, params *GetAssignmenttypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssignmenttypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAssignmenttypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAssignmenttypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAssignmenttypes(ctx context.Context, body PostAssignmenttypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAssignmenttypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssignmenttypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssignmenttypesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssignmenttypesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssignmenttypesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAssignmenttypesId(ctx context.Context, id UUIDPathObjectID, body PutAssignmenttypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAssignmenttypesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackBonusPaymentCategories(ctx context.Context, params *GetBackBonusPaymentCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackBonusPaymentCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackBonusPaymentCategoriesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackBonusPaymentCategoriesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBalanceUnits(ctx context.Context, params *GetBalanceUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBalanceUnitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBalanceUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBalanceUnitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBalanceUnits(ctx context.Context, body PostBalanceUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBalanceUnitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBalanceUnitsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBalanceUnitsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBalanceUnitsIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBalanceUnitsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBalanceUnitsId(ctx context.Context, id UUIDPathObjectID, body PutBalanceUnitsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBalanceUnitsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBanks(ctx context.Context, params *GetBanksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBanksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBanksId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBanksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchAbsenceTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchAbsenceTypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchAbsenceTypes(ctx context.Context, body PostBatchAbsenceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchAbsenceTypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchAbsenceTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchAbsenceTypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchAbsenceTypes(ctx context.Context, body PutBatchAbsenceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchAbsenceTypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchAbsencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchAbsencesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchAbsences(ctx context.Context, body PostBatchAbsencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchAbsencesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchAbsencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchAbsencesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchAbsences(ctx context.Context, body PutBatchAbsencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchAbsencesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchAllowancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchAllowancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchAllowances(ctx context.Context, body PostBatchAllowancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchAllowancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchAllowancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchAllowancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchAllowances(ctx context.Context, body PutBatchAllowancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchAllowancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchApplicantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchApplicantsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchApplicants(ctx context.Context, body PostBatchApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchApplicantsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchApplicantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchApplicantsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchApplicants(ctx context.Context, body PutBatchApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchApplicantsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchAssignmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchAssignmentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchAssignments(ctx context.Context, body PostBatchAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchAssignmentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchAssignmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchAssignmentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchAssignments(ctx context.Context, body PutBatchAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchAssignmentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchAssignmentsWithHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchAssignmentsWithHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchAssignmentsWithHistory(ctx context.Context, body PostBatchAssignmentsWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchAssignmentsWithHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchAssignmentsWithHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchAssignmentsWithHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchAssignmentsWithHistory(ctx context.Context, body PutBatchAssignmentsWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchAssignmentsWithHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchBackBonusPaymentCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchBackBonusPaymentCategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchBackBonusPaymentCategories(ctx context.Context, body PostBatchBackBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchBackBonusPaymentCategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchBackBonusPaymentCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchBackBonusPaymentCategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchBackBonusPaymentCategories(ctx context.Context, body PutBatchBackBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchBackBonusPaymentCategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchBanksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchBanksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchBanks(ctx context.Context, body PostBatchBanksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchBanksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchBanksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchBanksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchBanks(ctx context.Context, body PutBatchBanksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchBanksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchCalendarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchCalendarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchCalendar(ctx context.Context, body PostBatchCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchCalendarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchCalendarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchCalendarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchCalendar(ctx context.Context, body PutBatchCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchCalendarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchCalendarDaysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchCalendarDaysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchCalendarDays(ctx context.Context, body PostBatchCalendarDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchCalendarDaysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchCalendarDaysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchCalendarDaysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchCalendarDays(ctx context.Context, body PutBatchCalendarDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchCalendarDaysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchContractsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchContractsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchContracts(ctx context.Context, body PostBatchContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchContractsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchContractsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchContractsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchContracts(ctx context.Context, body PutBatchContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchContractsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchDelete(ctx context.Context, body PostBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchDgphDonorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchDgphDonorsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchDgphDonors(ctx context.Context, body PostBatchDgphDonorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchDgphDonorsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchDgphDonorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchDgphDonorsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchDgphDonors(ctx context.Context, body PutBatchDgphDonorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchDgphDonorsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchDisabilityCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchDisabilityCategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchDisabilityCategories(ctx context.Context, body PostBatchDisabilityCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchDisabilityCategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchDisabilityCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchDisabilityCategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchDisabilityCategories(ctx context.Context, body PutBatchDisabilityCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchDisabilityCategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchDistWorkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchDistWorkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchDistWork(ctx context.Context, body PostBatchDistWorkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchDistWorkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchDistWorkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchDistWorkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchDistWork(ctx context.Context, body PutBatchDistWorkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchDistWorkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchEarningPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchEarningPoliciesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchEarningPolicies(ctx context.Context, body PostBatchEarningPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchEarningPoliciesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchEarningPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchEarningPoliciesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchEarningPolicies(ctx context.Context, body PutBatchEarningPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchEarningPoliciesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchEmployeePersonalDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchEmployeePersonalDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchEmployeePersonalData(ctx context.Context, body PutBatchEmployeePersonalDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchEmployeePersonalDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchEmployeesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchEmployeesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchEmployees(ctx context.Context, body PostBatchEmployeesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchEmployeesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchEmployeesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchEmployeesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchEmployees(ctx context.Context, body PutBatchEmployeesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchEmployeesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchGradesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchGradesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchGrades(ctx context.Context, body PostBatchGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchGradesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchGradesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchGradesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchGrades(ctx context.Context, body PutBatchGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchGradesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchHierarchyLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchHierarchyLinksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchHierarchyLinks(ctx context.Context, body PostBatchHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchHierarchyLinksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchHierarchyLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchHierarchyLinksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchHierarchyLinks(ctx context.Context, body PutBatchHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchHierarchyLinksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchHourlyRateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchHourlyRateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchHourlyRate(ctx context.Context, body PostBatchHourlyRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchHourlyRateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchHourlyRateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchHourlyRateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchHourlyRate(ctx context.Context, body PutBatchHourlyRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchHourlyRateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchLeavingReasonsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchLeavingReasonsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchLeavingReasons(ctx context.Context, body PostBatchLeavingReasonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchLeavingReasonsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchLeavingReasonsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchLeavingReasonsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchLeavingReasons(ctx context.Context, body PutBatchLeavingReasonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchLeavingReasonsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchLocationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchLocations(ctx context.Context, body PostBatchLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchLocationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchLocationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchLocations(ctx context.Context, body PutBatchLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchLocationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchOfficesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchOfficesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchOffices(ctx context.Context, body PostBatchOfficesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchOfficesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchOfficesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchOfficesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchOffices(ctx context.Context, body PutBatchOfficesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchOfficesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPaoBonusPaymentCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPaoBonusPaymentCategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPaoBonusPaymentCategories(ctx context.Context, body PostBatchPaoBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPaoBonusPaymentCategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPaoBonusPaymentCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPaoBonusPaymentCategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPaoBonusPaymentCategories(ctx context.Context, body PutBatchPaoBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPaoBonusPaymentCategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPayTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPayTypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPayTypes(ctx context.Context, body PostBatchPayTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPayTypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPayTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPayTypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPayTypes(ctx context.Context, body PutBatchPayTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPayTypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPeopleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPeopleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPeople(ctx context.Context, body PostBatchPeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPeopleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPeopleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPeopleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPeople(ctx context.Context, body PutBatchPeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPeopleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPersonEducationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPersonEducationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPersonEducation(ctx context.Context, body PostBatchPersonEducationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPersonEducationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPersonEducationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPersonEducationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPersonEducation(ctx context.Context, body PutBatchPersonEducationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPersonEducationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPersonMilitaryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPersonMilitaryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPersonMilitary(ctx context.Context, body PutBatchPersonMilitaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPersonMilitaryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPersonPictureIdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPersonPictureIdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPersonPictureId(ctx context.Context, body PutBatchPersonPictureIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPersonPictureIdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPersonalSchedulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPersonalSchedulesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPersonalSchedules(ctx context.Context, body PostBatchPersonalSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPersonalSchedulesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPersonalSchedulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPersonalSchedulesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPersonalSchedules(ctx context.Context, body PutBatchPersonalSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPersonalSchedulesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPositionCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPositionCategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchPositionCategories(ctx context.Context, body PostBatchPositionCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchPositionCategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPositionCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPositionCategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchPositionCategories(ctx context.Context, body PutBatchPositionCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchPositionCategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchProductEntitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchProductEntitiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchProductEntities(ctx context.Context, body PostBatchProductEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchProductEntitiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchProductEntitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchProductEntitiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchProductEntities(ctx context.Context, body PutBatchProductEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchProductEntitiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchProductEntityLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchProductEntityLinksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchProductEntityLinks(ctx context.Context, body PostBatchProductEntityLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchProductEntityLinksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchProductEntityLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchProductEntityLinksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchProductEntityLinks(ctx context.Context, body PutBatchProductEntityLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchProductEntityLinksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchProductStatusesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchProductStatusesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchProductStatuses(ctx context.Context, body PostBatchProductStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchProductStatusesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchProductStatusesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchProductStatusesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchProductStatuses(ctx context.Context, body PutBatchProductStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchProductStatusesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchProducts(ctx context.Context, body PostBatchProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchProducts(ctx context.Context, body PutBatchProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchSalariesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchSalariesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchSalaries(ctx context.Context, body PostBatchSalariesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchSalariesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchSalariesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchSalariesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchSalaries(ctx context.Context, body PutBatchSalariesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchSalariesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchScheduleDaysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchScheduleDaysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchScheduleDays(ctx context.Context, body PostBatchScheduleDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchScheduleDaysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchScheduleDaysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchScheduleDaysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchScheduleDays(ctx context.Context, body PutBatchScheduleDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchScheduleDaysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchSchedulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchSchedulesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchSchedules(ctx context.Context, body PostBatchSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchSchedulesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchSchedulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchSchedulesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchSchedules(ctx context.Context, body PutBatchSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchSchedulesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchShiftTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchShiftTypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchShiftTypes(ctx context.Context, body PostBatchShiftTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchShiftTypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchShiftTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchShiftTypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchShiftTypes(ctx context.Context, body PutBatchShiftTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchShiftTypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchStaffWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchStaffRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchStaff(ctx context.Context, body PostBatchStaffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchStaffRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchStaffWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchStaffRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchStaff(ctx context.Context, body PutBatchStaffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchStaffRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchStaffAvailabilityStatusesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchStaffAvailabilityStatusesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchStaffAvailabilityStatuses(ctx context.Context, body PostBatchStaffAvailabilityStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchStaffAvailabilityStatusesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchStaffAvailabilityStatusesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchStaffAvailabilityStatusesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchStaffAvailabilityStatuses(ctx context.Context, body PutBatchStaffAvailabilityStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchStaffAvailabilityStatusesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchStaffRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchStaffRolesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchStaffRoles(ctx context.Context, body PostBatchStaffRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchStaffRolesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchStaffRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchStaffRolesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchStaffRoles(ctx context.Context, body PutBatchStaffRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchStaffRolesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchStaffTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchStaffTypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchStaffTypes(ctx context.Context, body PostBatchStaffTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchStaffTypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchStaffTypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchStaffTypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchStaffTypes(ctx context.Context, body PutBatchStaffTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchStaffTypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchStaffWithHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchStaffWithHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchStaffWithHistory(ctx context.Context, body PostBatchStaffWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchStaffWithHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchStaffWithHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchStaffWithHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchStaffWithHistory(ctx context.Context, body PutBatchStaffWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchStaffWithHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchTimekeeperGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchTimekeeperGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchTimekeeperGroups(ctx context.Context, body PostBatchTimekeeperGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchTimekeeperGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchTimekeeperGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchTimekeeperGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchTimekeeperGroups(ctx context.Context, body PutBatchTimekeeperGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchTimekeeperGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchTimekeepersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchTimekeepersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchTimekeepers(ctx context.Context, body PostBatchTimekeepersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchTimekeepersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchUnitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchUnits(ctx context.Context, body PostBatchUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchUnitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchUnitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchUnits(ctx context.Context, body PutBatchUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchUnitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchVacationBalancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchVacationBalancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchVacationBalances(ctx context.Context, body PostBatchVacationBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchVacationBalancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchVacationBalancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchVacationBalancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchVacationBalances(ctx context.Context, body PutBatchVacationBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchVacationBalancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchVacationPeriodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchVacationPeriodsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchVacationPeriods(ctx context.Context, body PostBatchVacationPeriodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchVacationPeriodsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchVacationPeriodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchVacationPeriodsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchVacationPeriods(ctx context.Context, body PutBatchVacationPeriodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchVacationPeriodsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchVhiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchVhiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchVhi(ctx context.Context, body PostBatchVhiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchVhiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchVhiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchVhiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchVhi(ctx context.Context, body PutBatchVhiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchVhiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchWorkWeekHoursWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchWorkWeekHoursRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchWorkWeekHours(ctx context.Context, body PostBatchWorkWeekHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchWorkWeekHoursRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchWorkWeekHoursWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchWorkWeekHoursRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchWorkWeekHours(ctx context.Context, body PutBatchWorkWeekHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchWorkWeekHoursRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchWorkingHoursWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchWorkingHoursRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBatchWorkingHours(ctx context.Context, body PostBatchWorkingHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBatchWorkingHoursRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchWorkingHoursWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchWorkingHoursRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBatchWorkingHours(ctx context.Context, body PutBatchWorkingHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBatchWorkingHoursRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCalendarDays(ctx context.Context, params *GetCalendarDaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCalendarDaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCalendars(ctx context.Context, params *GetCalendarsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCalendarsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCalendarsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCalendarsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusters(ctx context.Context, params *GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClustersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClustersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClustersId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClustersIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClustersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComplexAssignments(ctx context.Context, params *GetComplexAssignmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComplexAssignmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComplexAssignmentsV2(ctx context.Context, params *GetComplexAssignmentsV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComplexAssignmentsV2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComplexOrganizationStructure(ctx context.Context, params *GetComplexOrganizationStructureParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComplexOrganizationStructureRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComplexPeopleId(ctx context.Context, id UUIDPathObjectID, params *GetComplexPeopleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComplexPeopleIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComplexUnitpath(ctx context.Context, params *GetComplexUnitpathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComplexUnitpathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComplexUnitsIdSubunits(ctx context.Context, id UUIDPathObjectID, params *GetComplexUnitsIdSubunitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComplexUnitsIdSubunitsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContracts(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContractstatus(ctx context.Context, params *GetContractstatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractstatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContractstatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContractstatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContractstatus(ctx context.Context, body PostContractstatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContractstatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContractstatusId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractstatusIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContractstatusIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContractstatusIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContractstatusId(ctx context.Context, id UUIDPathObjectID, body PutContractstatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContractstatusIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContracttypes(ctx context.Context, params *GetContracttypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContracttypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContracttypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContracttypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContracttypes(ctx context.Context, body PostContracttypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContracttypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContracttypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContracttypesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContracttypesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContracttypesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContracttypesId(ctx context.Context, id UUIDPathObjectID, body PutContracttypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContracttypesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCostcenters(ctx context.Context, params *GetCostcentersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCostcentersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCostcentersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCostcentersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCostcenters(ctx context.Context, body PostCostcentersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCostcentersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCostcentersId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCostcentersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCostcentersIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCostcentersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCostcentersId(ctx context.Context, id UUIDPathObjectID, body PutCostcentersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCostcentersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDgphDonors(ctx context.Context, params *GetDgphDonorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDgphDonorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDgphDonorsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDgphDonorsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDisabilityCategories(ctx context.Context, params *GetDisabilityCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDisabilityCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistWork(ctx context.Context, params *GetDistWorkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDistWorkRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistWorkId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDistWorkIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDocuments(ctx context.Context, params *GetDocumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDocumentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEarningPolicies(ctx context.Context, params *GetEarningPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEarningPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployeeRoles(ctx context.Context, params *GetEmployeeRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeeRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmployeeRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmployeeRolesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployeeRolesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeeRolesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEmployeeRolesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEmployeeRolesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployees(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployeesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployeetypes(ctx context.Context, params *GetEmployeetypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeetypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmployeetypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmployeetypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmployeetypes(ctx context.Context, body PostEmployeetypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmployeetypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmployeetypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeetypesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEmployeetypesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEmployeetypesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEmployeetypesId(ctx context.Context, id UUIDPathObjectID, body PutEmployeetypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEmployeetypesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalBlocks(ctx context.Context, params *GetFunctionalBlocksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalBlocksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFunctionalBlocksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFunctionalBlocksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionalBlocksId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionalBlocksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFunctionalBlocksIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFunctionalBlocksIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGrades(ctx context.Context, params *GetGradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGradesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGradesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGradesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGrades(ctx context.Context, body PostGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGradesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGradesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGradesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGradesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGradesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGradesId(ctx context.Context, id UUIDPathObjectID, body PutGradesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGradesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHierarchies(ctx context.Context, params *GetHierarchiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHierarchiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHierarchiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHierarchiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHierarchies(ctx context.Context, body PostHierarchiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHierarchiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHierarchiesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHierarchiesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutHierarchiesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutHierarchiesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutHierarchiesId(ctx context.Context, id UUIDPathObjectID, body PutHierarchiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutHierarchiesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHierarchyLinks(ctx context.Context, params *GetHierarchyLinksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHierarchyLinksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHierarchyLinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHierarchyLinksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHierarchyLinks(ctx context.Context, body PostHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHierarchyLinksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHierarchyLinksId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHierarchyLinksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutHierarchyLinksIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutHierarchyLinksIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutHierarchyLinksId(ctx context.Context, id UUIDPathObjectID, body PutHierarchyLinksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutHierarchyLinksIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHourlyRate(ctx context.Context, params *GetHourlyRateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHourlyRateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeavingReasons(ctx context.Context, params *GetLeavingReasonsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeavingReasonsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeavingReasonsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeavingReasonsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocations(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocationsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutManualTriggerManagers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutManualTriggerManagersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOffices(ctx context.Context, params *GetOfficesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOfficesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsId(ctx context.Context, id UUIDPathObjectID, body PutOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaoBonusPaymentCategories(ctx context.Context, params *GetPaoBonusPaymentCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaoBonusPaymentCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaoBonusPaymentCategoriesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaoBonusPaymentCategoriesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPayTypes(ctx context.Context, params *GetPayTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPayTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeople(ctx context.Context, params *GetPeopleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPeopleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeopleId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPeopleIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeopleIdDocuments(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPeopleIdDocumentsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeopleIdOrigin(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPeopleIdOriginRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersonEducation(ctx context.Context, params *GetPersonEducationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersonEducationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersonalSchedules(ctx context.Context, params *GetPersonalSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersonalSchedulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPositionCategories(ctx context.Context, params *GetPositionCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPositionCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPositionCategoriesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPositionCategoriesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPositions(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPositionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPositionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPositionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPositions(ctx context.Context, body PostPositionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPositionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPositionsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPositionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPositionsIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPositionsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPositionsId(ctx context.Context, id UUIDPathObjectID, body PutPositionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPositionsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductEntities(ctx context.Context, params *GetProductEntitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductEntitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductEntityLinks(ctx context.Context, params *GetProductEntityLinksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductEntityLinksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductStatuses(ctx context.Context, params *GetProductStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductStatusesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSalaries(ctx context.Context, params *GetSalariesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalariesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSalariesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalariesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScheduleDays(ctx context.Context, params *GetScheduleDaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduleDaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchedules(ctx context.Context, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchedulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShiftTypes(ctx context.Context, params *GetShiftTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShiftTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaff(ctx context.Context, params *GetStaffParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaffRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaffAvailabilityStatuses(ctx context.Context, params *GetStaffAvailabilityStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaffAvailabilityStatusesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaffAvailabilityStatusesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaffAvailabilityStatusesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaffRoles(ctx context.Context, params *GetStaffRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaffRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaffRolesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaffRolesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaffTypes(ctx context.Context, params *GetStaffTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaffTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaffTypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaffTypesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubunits(ctx context.Context, params *GetSubunitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubunitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaskIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaskIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaskId(ctx context.Context, id UUIDPathObjectID, body PutTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaskIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimekeeperGroups(ctx context.Context, params *GetTimekeeperGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimekeeperGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimekeeperGroupsId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimekeeperGroupsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimekeepers(ctx context.Context, params *GetTimekeepersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimekeepersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnits(ctx context.Context, params *GetUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnitsWithoutHierarchies(ctx context.Context, params *GetUnitsWithoutHierarchiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnitsWithoutHierarchiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnitsId(ctx context.Context, id UUIDPathObjectID, params *GetUnitsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnitsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnittypes(ctx context.Context, params *GetUnittypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnittypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnittypesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnittypesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnittypes(ctx context.Context, body PostUnittypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnittypesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnittypesId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnittypesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUnittypesIdWithBody(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUnittypesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUnittypesId(ctx context.Context, id UUIDPathObjectID, body PutUnittypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUnittypesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVacationBalances(ctx context.Context, params *GetVacationBalancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVacationBalancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVacationPeriods(ctx context.Context, params *GetVacationPeriodsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVacationPeriodsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVhi(ctx context.Context, params *GetVhiParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVhiRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVhiId(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVhiIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkingHours(ctx context.Context, params *GetWorkingHoursParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkingHoursRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAbsenceTypesRequest generates requests for GetAbsenceTypes
func NewGetAbsenceTypesRequest(server string, params *GetAbsenceTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/absence-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAbsenceTypesIdRequest generates requests for GetAbsenceTypesId
func NewGetAbsenceTypesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/absence-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAbsencesRequest generates requests for GetAbsences
func NewGetAbsencesRequest(server string, params *GetAbsencesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/absences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assIDs", runtime.ParamLocationQuery, *params.AssIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmplIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emplIDs", runtime.ParamLocationQuery, *params.EmplIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "typeIDs", runtime.ParamLocationQuery, *params.TypeIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAbsencesIdRequest generates requests for GetAbsencesId
func NewGetAbsencesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/absences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllowancesRequest generates requests for GetAllowances
func NewGetAllowancesRequest(server string, params *GetAllowancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/allowances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AssIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assIDs", runtime.ParamLocationQuery, *params.AssIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllowancesIdRequest generates requests for GetAllowancesId
func NewGetAllowancesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/allowances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicantsRequest generates requests for GetApplicants
func NewGetApplicantsRequest(server string, params *GetApplicantsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applicants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmplIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emplIDs", runtime.ParamLocationQuery, *params.EmplIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ApplicationCodes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applicationCodes", runtime.ParamLocationQuery, *params.ApplicationCodes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApplicantsRequest calls the generic PostApplicants builder with application/json body
func NewPostApplicantsRequest(server string, body PostApplicantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplicantsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApplicantsRequestWithBody generates requests for PostApplicants with any type of body
func NewPostApplicantsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applicants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApplicantsIdRequest generates requests for GetApplicantsId
func NewGetApplicantsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applicants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssignmentcategoriesRequest generates requests for GetAssignmentcategories
func NewGetAssignmentcategoriesRequest(server string, params *GetAssignmentcategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmentcategories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAssignmentcategoriesRequest calls the generic PostAssignmentcategories builder with application/json body
func NewPostAssignmentcategoriesRequest(server string, body PostAssignmentcategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAssignmentcategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAssignmentcategoriesRequestWithBody generates requests for PostAssignmentcategories with any type of body
func NewPostAssignmentcategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmentcategories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAssignmentcategoriesIdRequest generates requests for GetAssignmentcategoriesId
func NewGetAssignmentcategoriesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmentcategories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAssignmentcategoriesIdRequest calls the generic PutAssignmentcategoriesId builder with application/json body
func NewPutAssignmentcategoriesIdRequest(server string, id UUIDPathObjectID, body PutAssignmentcategoriesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAssignmentcategoriesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAssignmentcategoriesIdRequestWithBody generates requests for PutAssignmentcategoriesId with any type of body
func NewPutAssignmentcategoriesIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmentcategories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAssignmentsRequest generates requests for GetAssignments
func NewGetAssignmentsRequest(server string, params *GetAssignmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusIds", runtime.ParamLocationQuery, *params.StatusIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "typeIds", runtime.ParamLocationQuery, *params.TypeIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmployeeTypeIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "employeeTypeIDs", runtime.ParamLocationQuery, *params.EmployeeTypeIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmplIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emplIDs", runtime.ParamLocationQuery, *params.EmplIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CategoryIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryIDs", runtime.ParamLocationQuery, *params.CategoryIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CombinationStatuses != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "combinationStatuses", runtime.ParamLocationQuery, *params.CombinationStatuses); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActualTerminationDateFrom != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actualTerminationDateFrom", runtime.ParamLocationQuery, *params.ActualTerminationDateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StaffUnitIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staffUnitIDs", runtime.ParamLocationQuery, *params.StaffUnitIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StaffCodes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staffCodes", runtime.ParamLocationQuery, *params.StaffCodes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.History != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "history", runtime.ParamLocationQuery, *params.History); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitIDs", runtime.ParamLocationQuery, *params.UnitIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssignmentsIdRequest generates requests for GetAssignmentsId
func NewGetAssignmentsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssignmentstatusRequest generates requests for GetAssignmentstatus
func NewGetAssignmentstatusRequest(server string, params *GetAssignmentstatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmentstatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAssignmentstatusRequest calls the generic PostAssignmentstatus builder with application/json body
func NewPostAssignmentstatusRequest(server string, body PostAssignmentstatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAssignmentstatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAssignmentstatusRequestWithBody generates requests for PostAssignmentstatus with any type of body
func NewPostAssignmentstatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmentstatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAssignmentstatusIdRequest generates requests for GetAssignmentstatusId
func NewGetAssignmentstatusIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmentstatus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAssignmentstatusIdRequest calls the generic PutAssignmentstatusId builder with application/json body
func NewPutAssignmentstatusIdRequest(server string, id UUIDPathObjectID, body PutAssignmentstatusIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAssignmentstatusIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAssignmentstatusIdRequestWithBody generates requests for PutAssignmentstatusId with any type of body
func NewPutAssignmentstatusIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmentstatus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAssignmenttypesRequest generates requests for GetAssignmenttypes
func NewGetAssignmenttypesRequest(server string, params *GetAssignmenttypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmenttypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAssignmenttypesRequest calls the generic PostAssignmenttypes builder with application/json body
func NewPostAssignmenttypesRequest(server string, body PostAssignmenttypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAssignmenttypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAssignmenttypesRequestWithBody generates requests for PostAssignmenttypes with any type of body
func NewPostAssignmenttypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmenttypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAssignmenttypesIdRequest generates requests for GetAssignmenttypesId
func NewGetAssignmenttypesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmenttypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAssignmenttypesIdRequest calls the generic PutAssignmenttypesId builder with application/json body
func NewPutAssignmenttypesIdRequest(server string, id UUIDPathObjectID, body PutAssignmenttypesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAssignmenttypesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAssignmenttypesIdRequestWithBody generates requests for PutAssignmenttypesId with any type of body
func NewPutAssignmenttypesIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assignmenttypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBackBonusPaymentCategoriesRequest generates requests for GetBackBonusPaymentCategories
func NewGetBackBonusPaymentCategoriesRequest(server string, params *GetBackBonusPaymentCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/back-bonus-payment-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackBonusPaymentCategoriesIdRequest generates requests for GetBackBonusPaymentCategoriesId
func NewGetBackBonusPaymentCategoriesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/back-bonus-payment-categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBalanceUnitsRequest generates requests for GetBalanceUnits
func NewGetBalanceUnitsRequest(server string, params *GetBalanceUnitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBalanceUnitsRequest calls the generic PostBalanceUnits builder with application/json body
func NewPostBalanceUnitsRequest(server string, body PostBalanceUnitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBalanceUnitsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBalanceUnitsRequestWithBody generates requests for PostBalanceUnits with any type of body
func NewPostBalanceUnitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBalanceUnitsIdRequest generates requests for GetBalanceUnitsId
func NewGetBalanceUnitsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBalanceUnitsIdRequest calls the generic PutBalanceUnitsId builder with application/json body
func NewPutBalanceUnitsIdRequest(server string, id UUIDPathObjectID, body PutBalanceUnitsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBalanceUnitsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutBalanceUnitsIdRequestWithBody generates requests for PutBalanceUnitsId with any type of body
func NewPutBalanceUnitsIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBanksRequest generates requests for GetBanks
func NewGetBanksRequest(server string, params *GetBanksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/banks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SBank != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sBank", runtime.ParamLocationQuery, *params.SBank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBanksIdRequest generates requests for GetBanksId
func NewGetBanksIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/banks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBatchAbsenceTypesRequest calls the generic PostBatchAbsenceTypes builder with application/json body
func NewPostBatchAbsenceTypesRequest(server string, body PostBatchAbsenceTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchAbsenceTypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchAbsenceTypesRequestWithBody generates requests for PostBatchAbsenceTypes with any type of body
func NewPostBatchAbsenceTypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/absence-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchAbsenceTypesRequest calls the generic PutBatchAbsenceTypes builder with application/json body
func NewPutBatchAbsenceTypesRequest(server string, body PutBatchAbsenceTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchAbsenceTypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchAbsenceTypesRequestWithBody generates requests for PutBatchAbsenceTypes with any type of body
func NewPutBatchAbsenceTypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/absence-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchAbsencesRequest calls the generic PostBatchAbsences builder with application/json body
func NewPostBatchAbsencesRequest(server string, body PostBatchAbsencesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchAbsencesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchAbsencesRequestWithBody generates requests for PostBatchAbsences with any type of body
func NewPostBatchAbsencesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/absences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchAbsencesRequest calls the generic PutBatchAbsences builder with application/json body
func NewPutBatchAbsencesRequest(server string, body PutBatchAbsencesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchAbsencesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchAbsencesRequestWithBody generates requests for PutBatchAbsences with any type of body
func NewPutBatchAbsencesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/absences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchAllowancesRequest calls the generic PostBatchAllowances builder with application/json body
func NewPostBatchAllowancesRequest(server string, body PostBatchAllowancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchAllowancesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchAllowancesRequestWithBody generates requests for PostBatchAllowances with any type of body
func NewPostBatchAllowancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/allowances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchAllowancesRequest calls the generic PutBatchAllowances builder with application/json body
func NewPutBatchAllowancesRequest(server string, body PutBatchAllowancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchAllowancesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchAllowancesRequestWithBody generates requests for PutBatchAllowances with any type of body
func NewPutBatchAllowancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/allowances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchApplicantsRequest calls the generic PostBatchApplicants builder with application/json body
func NewPostBatchApplicantsRequest(server string, body PostBatchApplicantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchApplicantsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchApplicantsRequestWithBody generates requests for PostBatchApplicants with any type of body
func NewPostBatchApplicantsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/applicants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchApplicantsRequest calls the generic PutBatchApplicants builder with application/json body
func NewPutBatchApplicantsRequest(server string, body PutBatchApplicantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchApplicantsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchApplicantsRequestWithBody generates requests for PutBatchApplicants with any type of body
func NewPutBatchApplicantsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/applicants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchAssignmentsRequest calls the generic PostBatchAssignments builder with application/json body
func NewPostBatchAssignmentsRequest(server string, body PostBatchAssignmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchAssignmentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchAssignmentsRequestWithBody generates requests for PostBatchAssignments with any type of body
func NewPostBatchAssignmentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/assignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchAssignmentsRequest calls the generic PutBatchAssignments builder with application/json body
func NewPutBatchAssignmentsRequest(server string, body PutBatchAssignmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchAssignmentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchAssignmentsRequestWithBody generates requests for PutBatchAssignments with any type of body
func NewPutBatchAssignmentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/assignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchAssignmentsWithHistoryRequest calls the generic PostBatchAssignmentsWithHistory builder with application/json body
func NewPostBatchAssignmentsWithHistoryRequest(server string, body PostBatchAssignmentsWithHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchAssignmentsWithHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchAssignmentsWithHistoryRequestWithBody generates requests for PostBatchAssignmentsWithHistory with any type of body
func NewPostBatchAssignmentsWithHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/assignments-with-history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchAssignmentsWithHistoryRequest calls the generic PutBatchAssignmentsWithHistory builder with application/json body
func NewPutBatchAssignmentsWithHistoryRequest(server string, body PutBatchAssignmentsWithHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchAssignmentsWithHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchAssignmentsWithHistoryRequestWithBody generates requests for PutBatchAssignmentsWithHistory with any type of body
func NewPutBatchAssignmentsWithHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/assignments-with-history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchBackBonusPaymentCategoriesRequest calls the generic PostBatchBackBonusPaymentCategories builder with application/json body
func NewPostBatchBackBonusPaymentCategoriesRequest(server string, body PostBatchBackBonusPaymentCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchBackBonusPaymentCategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchBackBonusPaymentCategoriesRequestWithBody generates requests for PostBatchBackBonusPaymentCategories with any type of body
func NewPostBatchBackBonusPaymentCategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/back-bonus-payment-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchBackBonusPaymentCategoriesRequest calls the generic PutBatchBackBonusPaymentCategories builder with application/json body
func NewPutBatchBackBonusPaymentCategoriesRequest(server string, body PutBatchBackBonusPaymentCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchBackBonusPaymentCategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchBackBonusPaymentCategoriesRequestWithBody generates requests for PutBatchBackBonusPaymentCategories with any type of body
func NewPutBatchBackBonusPaymentCategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/back-bonus-payment-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchBanksRequest calls the generic PostBatchBanks builder with application/json body
func NewPostBatchBanksRequest(server string, body PostBatchBanksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchBanksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchBanksRequestWithBody generates requests for PostBatchBanks with any type of body
func NewPostBatchBanksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/banks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchBanksRequest calls the generic PutBatchBanks builder with application/json body
func NewPutBatchBanksRequest(server string, body PutBatchBanksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchBanksRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchBanksRequestWithBody generates requests for PutBatchBanks with any type of body
func NewPutBatchBanksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/banks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchCalendarRequest calls the generic PostBatchCalendar builder with application/json body
func NewPostBatchCalendarRequest(server string, body PostBatchCalendarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchCalendarRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchCalendarRequestWithBody generates requests for PostBatchCalendar with any type of body
func NewPostBatchCalendarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchCalendarRequest calls the generic PutBatchCalendar builder with application/json body
func NewPutBatchCalendarRequest(server string, body PutBatchCalendarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchCalendarRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchCalendarRequestWithBody generates requests for PutBatchCalendar with any type of body
func NewPutBatchCalendarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchCalendarDaysRequest calls the generic PostBatchCalendarDays builder with application/json body
func NewPostBatchCalendarDaysRequest(server string, body PostBatchCalendarDaysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchCalendarDaysRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchCalendarDaysRequestWithBody generates requests for PostBatchCalendarDays with any type of body
func NewPostBatchCalendarDaysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/calendar-days")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchCalendarDaysRequest calls the generic PutBatchCalendarDays builder with application/json body
func NewPutBatchCalendarDaysRequest(server string, body PutBatchCalendarDaysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchCalendarDaysRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchCalendarDaysRequestWithBody generates requests for PutBatchCalendarDays with any type of body
func NewPutBatchCalendarDaysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/calendar-days")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchContractsRequest calls the generic PostBatchContracts builder with application/json body
func NewPostBatchContractsRequest(server string, body PostBatchContractsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchContractsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchContractsRequestWithBody generates requests for PostBatchContracts with any type of body
func NewPostBatchContractsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/contracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchContractsRequest calls the generic PutBatchContracts builder with application/json body
func NewPutBatchContractsRequest(server string, body PutBatchContractsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchContractsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchContractsRequestWithBody generates requests for PutBatchContracts with any type of body
func NewPutBatchContractsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/contracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchDeleteRequest calls the generic PostBatchDelete builder with application/json body
func NewPostBatchDeleteRequest(server string, body PostBatchDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchDeleteRequestWithBody generates requests for PostBatchDelete with any type of body
func NewPostBatchDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchDgphDonorsRequest calls the generic PostBatchDgphDonors builder with application/json body
func NewPostBatchDgphDonorsRequest(server string, body PostBatchDgphDonorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchDgphDonorsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchDgphDonorsRequestWithBody generates requests for PostBatchDgphDonors with any type of body
func NewPostBatchDgphDonorsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/dgph-donors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchDgphDonorsRequest calls the generic PutBatchDgphDonors builder with application/json body
func NewPutBatchDgphDonorsRequest(server string, body PutBatchDgphDonorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchDgphDonorsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchDgphDonorsRequestWithBody generates requests for PutBatchDgphDonors with any type of body
func NewPutBatchDgphDonorsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/dgph-donors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchDisabilityCategoriesRequest calls the generic PostBatchDisabilityCategories builder with application/json body
func NewPostBatchDisabilityCategoriesRequest(server string, body PostBatchDisabilityCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchDisabilityCategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchDisabilityCategoriesRequestWithBody generates requests for PostBatchDisabilityCategories with any type of body
func NewPostBatchDisabilityCategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/disability-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchDisabilityCategoriesRequest calls the generic PutBatchDisabilityCategories builder with application/json body
func NewPutBatchDisabilityCategoriesRequest(server string, body PutBatchDisabilityCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchDisabilityCategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchDisabilityCategoriesRequestWithBody generates requests for PutBatchDisabilityCategories with any type of body
func NewPutBatchDisabilityCategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/disability-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchDistWorkRequest calls the generic PostBatchDistWork builder with application/json body
func NewPostBatchDistWorkRequest(server string, body PostBatchDistWorkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchDistWorkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchDistWorkRequestWithBody generates requests for PostBatchDistWork with any type of body
func NewPostBatchDistWorkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/dist-work")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchDistWorkRequest calls the generic PutBatchDistWork builder with application/json body
func NewPutBatchDistWorkRequest(server string, body PutBatchDistWorkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchDistWorkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchDistWorkRequestWithBody generates requests for PutBatchDistWork with any type of body
func NewPutBatchDistWorkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/dist-work")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchEarningPoliciesRequest calls the generic PostBatchEarningPolicies builder with application/json body
func NewPostBatchEarningPoliciesRequest(server string, body PostBatchEarningPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchEarningPoliciesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchEarningPoliciesRequestWithBody generates requests for PostBatchEarningPolicies with any type of body
func NewPostBatchEarningPoliciesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/earning-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchEarningPoliciesRequest calls the generic PutBatchEarningPolicies builder with application/json body
func NewPutBatchEarningPoliciesRequest(server string, body PutBatchEarningPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchEarningPoliciesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchEarningPoliciesRequestWithBody generates requests for PutBatchEarningPolicies with any type of body
func NewPutBatchEarningPoliciesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/earning-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchEmployeePersonalDataRequest calls the generic PutBatchEmployeePersonalData builder with application/json body
func NewPutBatchEmployeePersonalDataRequest(server string, body PutBatchEmployeePersonalDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchEmployeePersonalDataRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchEmployeePersonalDataRequestWithBody generates requests for PutBatchEmployeePersonalData with any type of body
func NewPutBatchEmployeePersonalDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/employee-personal-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchEmployeesRequest calls the generic PostBatchEmployees builder with application/json body
func NewPostBatchEmployeesRequest(server string, body PostBatchEmployeesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchEmployeesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchEmployeesRequestWithBody generates requests for PostBatchEmployees with any type of body
func NewPostBatchEmployeesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/employees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchEmployeesRequest calls the generic PutBatchEmployees builder with application/json body
func NewPutBatchEmployeesRequest(server string, body PutBatchEmployeesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchEmployeesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchEmployeesRequestWithBody generates requests for PutBatchEmployees with any type of body
func NewPutBatchEmployeesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/employees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchGradesRequest calls the generic PostBatchGrades builder with application/json body
func NewPostBatchGradesRequest(server string, body PostBatchGradesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchGradesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchGradesRequestWithBody generates requests for PostBatchGrades with any type of body
func NewPostBatchGradesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/grades")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchGradesRequest calls the generic PutBatchGrades builder with application/json body
func NewPutBatchGradesRequest(server string, body PutBatchGradesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchGradesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchGradesRequestWithBody generates requests for PutBatchGrades with any type of body
func NewPutBatchGradesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/grades")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchHierarchyLinksRequest calls the generic PostBatchHierarchyLinks builder with application/json body
func NewPostBatchHierarchyLinksRequest(server string, body PostBatchHierarchyLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchHierarchyLinksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchHierarchyLinksRequestWithBody generates requests for PostBatchHierarchyLinks with any type of body
func NewPostBatchHierarchyLinksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/hierarchy-links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchHierarchyLinksRequest calls the generic PutBatchHierarchyLinks builder with application/json body
func NewPutBatchHierarchyLinksRequest(server string, body PutBatchHierarchyLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchHierarchyLinksRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchHierarchyLinksRequestWithBody generates requests for PutBatchHierarchyLinks with any type of body
func NewPutBatchHierarchyLinksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/hierarchy-links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchHourlyRateRequest calls the generic PostBatchHourlyRate builder with application/json body
func NewPostBatchHourlyRateRequest(server string, body PostBatchHourlyRateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchHourlyRateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchHourlyRateRequestWithBody generates requests for PostBatchHourlyRate with any type of body
func NewPostBatchHourlyRateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/hourly-rate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchHourlyRateRequest calls the generic PutBatchHourlyRate builder with application/json body
func NewPutBatchHourlyRateRequest(server string, body PutBatchHourlyRateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchHourlyRateRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchHourlyRateRequestWithBody generates requests for PutBatchHourlyRate with any type of body
func NewPutBatchHourlyRateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/hourly-rate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchLeavingReasonsRequest calls the generic PostBatchLeavingReasons builder with application/json body
func NewPostBatchLeavingReasonsRequest(server string, body PostBatchLeavingReasonsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchLeavingReasonsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchLeavingReasonsRequestWithBody generates requests for PostBatchLeavingReasons with any type of body
func NewPostBatchLeavingReasonsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/leaving-reasons")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchLeavingReasonsRequest calls the generic PutBatchLeavingReasons builder with application/json body
func NewPutBatchLeavingReasonsRequest(server string, body PutBatchLeavingReasonsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchLeavingReasonsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchLeavingReasonsRequestWithBody generates requests for PutBatchLeavingReasons with any type of body
func NewPutBatchLeavingReasonsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/leaving-reasons")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchLocationsRequest calls the generic PostBatchLocations builder with application/json body
func NewPostBatchLocationsRequest(server string, body PostBatchLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchLocationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchLocationsRequestWithBody generates requests for PostBatchLocations with any type of body
func NewPostBatchLocationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchLocationsRequest calls the generic PutBatchLocations builder with application/json body
func NewPutBatchLocationsRequest(server string, body PutBatchLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchLocationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchLocationsRequestWithBody generates requests for PutBatchLocations with any type of body
func NewPutBatchLocationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchOfficesRequest calls the generic PostBatchOffices builder with application/json body
func NewPostBatchOfficesRequest(server string, body PostBatchOfficesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchOfficesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchOfficesRequestWithBody generates requests for PostBatchOffices with any type of body
func NewPostBatchOfficesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/offices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchOfficesRequest calls the generic PutBatchOffices builder with application/json body
func NewPutBatchOfficesRequest(server string, body PutBatchOfficesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchOfficesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchOfficesRequestWithBody generates requests for PutBatchOffices with any type of body
func NewPutBatchOfficesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/offices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchPaoBonusPaymentCategoriesRequest calls the generic PostBatchPaoBonusPaymentCategories builder with application/json body
func NewPostBatchPaoBonusPaymentCategoriesRequest(server string, body PostBatchPaoBonusPaymentCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchPaoBonusPaymentCategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchPaoBonusPaymentCategoriesRequestWithBody generates requests for PostBatchPaoBonusPaymentCategories with any type of body
func NewPostBatchPaoBonusPaymentCategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/pao-bonus-payment-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchPaoBonusPaymentCategoriesRequest calls the generic PutBatchPaoBonusPaymentCategories builder with application/json body
func NewPutBatchPaoBonusPaymentCategoriesRequest(server string, body PutBatchPaoBonusPaymentCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchPaoBonusPaymentCategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchPaoBonusPaymentCategoriesRequestWithBody generates requests for PutBatchPaoBonusPaymentCategories with any type of body
func NewPutBatchPaoBonusPaymentCategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/pao-bonus-payment-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchPayTypesRequest calls the generic PostBatchPayTypes builder with application/json body
func NewPostBatchPayTypesRequest(server string, body PostBatchPayTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchPayTypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchPayTypesRequestWithBody generates requests for PostBatchPayTypes with any type of body
func NewPostBatchPayTypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/pay-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchPayTypesRequest calls the generic PutBatchPayTypes builder with application/json body
func NewPutBatchPayTypesRequest(server string, body PutBatchPayTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchPayTypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchPayTypesRequestWithBody generates requests for PutBatchPayTypes with any type of body
func NewPutBatchPayTypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/pay-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchPeopleRequest calls the generic PostBatchPeople builder with application/json body
func NewPostBatchPeopleRequest(server string, body PostBatchPeopleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchPeopleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchPeopleRequestWithBody generates requests for PostBatchPeople with any type of body
func NewPostBatchPeopleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/people")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchPeopleRequest calls the generic PutBatchPeople builder with application/json body
func NewPutBatchPeopleRequest(server string, body PutBatchPeopleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchPeopleRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchPeopleRequestWithBody generates requests for PutBatchPeople with any type of body
func NewPutBatchPeopleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/people")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchPersonEducationRequest calls the generic PostBatchPersonEducation builder with application/json body
func NewPostBatchPersonEducationRequest(server string, body PostBatchPersonEducationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchPersonEducationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchPersonEducationRequestWithBody generates requests for PostBatchPersonEducation with any type of body
func NewPostBatchPersonEducationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/person-education")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchPersonEducationRequest calls the generic PutBatchPersonEducation builder with application/json body
func NewPutBatchPersonEducationRequest(server string, body PutBatchPersonEducationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchPersonEducationRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchPersonEducationRequestWithBody generates requests for PutBatchPersonEducation with any type of body
func NewPutBatchPersonEducationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/person-education")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchPersonMilitaryRequest calls the generic PutBatchPersonMilitary builder with application/json body
func NewPutBatchPersonMilitaryRequest(server string, body PutBatchPersonMilitaryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchPersonMilitaryRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchPersonMilitaryRequestWithBody generates requests for PutBatchPersonMilitary with any type of body
func NewPutBatchPersonMilitaryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/person-military")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchPersonPictureIdRequest calls the generic PutBatchPersonPictureId builder with application/json body
func NewPutBatchPersonPictureIdRequest(server string, body PutBatchPersonPictureIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchPersonPictureIdRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchPersonPictureIdRequestWithBody generates requests for PutBatchPersonPictureId with any type of body
func NewPutBatchPersonPictureIdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/person-picture-id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchPersonalSchedulesRequest calls the generic PostBatchPersonalSchedules builder with application/json body
func NewPostBatchPersonalSchedulesRequest(server string, body PostBatchPersonalSchedulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchPersonalSchedulesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchPersonalSchedulesRequestWithBody generates requests for PostBatchPersonalSchedules with any type of body
func NewPostBatchPersonalSchedulesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/personal-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchPersonalSchedulesRequest calls the generic PutBatchPersonalSchedules builder with application/json body
func NewPutBatchPersonalSchedulesRequest(server string, body PutBatchPersonalSchedulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchPersonalSchedulesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchPersonalSchedulesRequestWithBody generates requests for PutBatchPersonalSchedules with any type of body
func NewPutBatchPersonalSchedulesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/personal-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchPositionCategoriesRequest calls the generic PostBatchPositionCategories builder with application/json body
func NewPostBatchPositionCategoriesRequest(server string, body PostBatchPositionCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchPositionCategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchPositionCategoriesRequestWithBody generates requests for PostBatchPositionCategories with any type of body
func NewPostBatchPositionCategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/position-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchPositionCategoriesRequest calls the generic PutBatchPositionCategories builder with application/json body
func NewPutBatchPositionCategoriesRequest(server string, body PutBatchPositionCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchPositionCategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchPositionCategoriesRequestWithBody generates requests for PutBatchPositionCategories with any type of body
func NewPutBatchPositionCategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/position-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchProductEntitiesRequest calls the generic PostBatchProductEntities builder with application/json body
func NewPostBatchProductEntitiesRequest(server string, body PostBatchProductEntitiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchProductEntitiesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchProductEntitiesRequestWithBody generates requests for PostBatchProductEntities with any type of body
func NewPostBatchProductEntitiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/product-entities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchProductEntitiesRequest calls the generic PutBatchProductEntities builder with application/json body
func NewPutBatchProductEntitiesRequest(server string, body PutBatchProductEntitiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchProductEntitiesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchProductEntitiesRequestWithBody generates requests for PutBatchProductEntities with any type of body
func NewPutBatchProductEntitiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/product-entities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchProductEntityLinksRequest calls the generic PostBatchProductEntityLinks builder with application/json body
func NewPostBatchProductEntityLinksRequest(server string, body PostBatchProductEntityLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchProductEntityLinksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchProductEntityLinksRequestWithBody generates requests for PostBatchProductEntityLinks with any type of body
func NewPostBatchProductEntityLinksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/product-entity-links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchProductEntityLinksRequest calls the generic PutBatchProductEntityLinks builder with application/json body
func NewPutBatchProductEntityLinksRequest(server string, body PutBatchProductEntityLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchProductEntityLinksRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchProductEntityLinksRequestWithBody generates requests for PutBatchProductEntityLinks with any type of body
func NewPutBatchProductEntityLinksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/product-entity-links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchProductStatusesRequest calls the generic PostBatchProductStatuses builder with application/json body
func NewPostBatchProductStatusesRequest(server string, body PostBatchProductStatusesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchProductStatusesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchProductStatusesRequestWithBody generates requests for PostBatchProductStatuses with any type of body
func NewPostBatchProductStatusesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/product-statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchProductStatusesRequest calls the generic PutBatchProductStatuses builder with application/json body
func NewPutBatchProductStatusesRequest(server string, body PutBatchProductStatusesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchProductStatusesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchProductStatusesRequestWithBody generates requests for PutBatchProductStatuses with any type of body
func NewPutBatchProductStatusesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/product-statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchProductsRequest calls the generic PostBatchProducts builder with application/json body
func NewPostBatchProductsRequest(server string, body PostBatchProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchProductsRequestWithBody generates requests for PostBatchProducts with any type of body
func NewPostBatchProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchProductsRequest calls the generic PutBatchProducts builder with application/json body
func NewPutBatchProductsRequest(server string, body PutBatchProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchProductsRequestWithBody generates requests for PutBatchProducts with any type of body
func NewPutBatchProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchSalariesRequest calls the generic PostBatchSalaries builder with application/json body
func NewPostBatchSalariesRequest(server string, body PostBatchSalariesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchSalariesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchSalariesRequestWithBody generates requests for PostBatchSalaries with any type of body
func NewPostBatchSalariesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/salaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchSalariesRequest calls the generic PutBatchSalaries builder with application/json body
func NewPutBatchSalariesRequest(server string, body PutBatchSalariesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchSalariesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchSalariesRequestWithBody generates requests for PutBatchSalaries with any type of body
func NewPutBatchSalariesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/salaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchScheduleDaysRequest calls the generic PostBatchScheduleDays builder with application/json body
func NewPostBatchScheduleDaysRequest(server string, body PostBatchScheduleDaysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchScheduleDaysRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchScheduleDaysRequestWithBody generates requests for PostBatchScheduleDays with any type of body
func NewPostBatchScheduleDaysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/schedule-days")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchScheduleDaysRequest calls the generic PutBatchScheduleDays builder with application/json body
func NewPutBatchScheduleDaysRequest(server string, body PutBatchScheduleDaysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchScheduleDaysRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchScheduleDaysRequestWithBody generates requests for PutBatchScheduleDays with any type of body
func NewPutBatchScheduleDaysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/schedule-days")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchSchedulesRequest calls the generic PostBatchSchedules builder with application/json body
func NewPostBatchSchedulesRequest(server string, body PostBatchSchedulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchSchedulesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchSchedulesRequestWithBody generates requests for PostBatchSchedules with any type of body
func NewPostBatchSchedulesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchSchedulesRequest calls the generic PutBatchSchedules builder with application/json body
func NewPutBatchSchedulesRequest(server string, body PutBatchSchedulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchSchedulesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchSchedulesRequestWithBody generates requests for PutBatchSchedules with any type of body
func NewPutBatchSchedulesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchShiftTypesRequest calls the generic PostBatchShiftTypes builder with application/json body
func NewPostBatchShiftTypesRequest(server string, body PostBatchShiftTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchShiftTypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchShiftTypesRequestWithBody generates requests for PostBatchShiftTypes with any type of body
func NewPostBatchShiftTypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/shift-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchShiftTypesRequest calls the generic PutBatchShiftTypes builder with application/json body
func NewPutBatchShiftTypesRequest(server string, body PutBatchShiftTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchShiftTypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchShiftTypesRequestWithBody generates requests for PutBatchShiftTypes with any type of body
func NewPutBatchShiftTypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/shift-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchStaffRequest calls the generic PostBatchStaff builder with application/json body
func NewPostBatchStaffRequest(server string, body PostBatchStaffJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchStaffRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchStaffRequestWithBody generates requests for PostBatchStaff with any type of body
func NewPostBatchStaffRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/staff")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchStaffRequest calls the generic PutBatchStaff builder with application/json body
func NewPutBatchStaffRequest(server string, body PutBatchStaffJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchStaffRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchStaffRequestWithBody generates requests for PutBatchStaff with any type of body
func NewPutBatchStaffRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/staff")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchStaffAvailabilityStatusesRequest calls the generic PostBatchStaffAvailabilityStatuses builder with application/json body
func NewPostBatchStaffAvailabilityStatusesRequest(server string, body PostBatchStaffAvailabilityStatusesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchStaffAvailabilityStatusesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchStaffAvailabilityStatusesRequestWithBody generates requests for PostBatchStaffAvailabilityStatuses with any type of body
func NewPostBatchStaffAvailabilityStatusesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/staff-availability-statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchStaffAvailabilityStatusesRequest calls the generic PutBatchStaffAvailabilityStatuses builder with application/json body
func NewPutBatchStaffAvailabilityStatusesRequest(server string, body PutBatchStaffAvailabilityStatusesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchStaffAvailabilityStatusesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchStaffAvailabilityStatusesRequestWithBody generates requests for PutBatchStaffAvailabilityStatuses with any type of body
func NewPutBatchStaffAvailabilityStatusesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/staff-availability-statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchStaffRolesRequest calls the generic PostBatchStaffRoles builder with application/json body
func NewPostBatchStaffRolesRequest(server string, body PostBatchStaffRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchStaffRolesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchStaffRolesRequestWithBody generates requests for PostBatchStaffRoles with any type of body
func NewPostBatchStaffRolesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/staff-roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchStaffRolesRequest calls the generic PutBatchStaffRoles builder with application/json body
func NewPutBatchStaffRolesRequest(server string, body PutBatchStaffRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchStaffRolesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchStaffRolesRequestWithBody generates requests for PutBatchStaffRoles with any type of body
func NewPutBatchStaffRolesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/staff-roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchStaffTypesRequest calls the generic PostBatchStaffTypes builder with application/json body
func NewPostBatchStaffTypesRequest(server string, body PostBatchStaffTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchStaffTypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchStaffTypesRequestWithBody generates requests for PostBatchStaffTypes with any type of body
func NewPostBatchStaffTypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/staff-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchStaffTypesRequest calls the generic PutBatchStaffTypes builder with application/json body
func NewPutBatchStaffTypesRequest(server string, body PutBatchStaffTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchStaffTypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchStaffTypesRequestWithBody generates requests for PutBatchStaffTypes with any type of body
func NewPutBatchStaffTypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/staff-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchStaffWithHistoryRequest calls the generic PostBatchStaffWithHistory builder with application/json body
func NewPostBatchStaffWithHistoryRequest(server string, body PostBatchStaffWithHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchStaffWithHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchStaffWithHistoryRequestWithBody generates requests for PostBatchStaffWithHistory with any type of body
func NewPostBatchStaffWithHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/staff-with-history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchStaffWithHistoryRequest calls the generic PutBatchStaffWithHistory builder with application/json body
func NewPutBatchStaffWithHistoryRequest(server string, body PutBatchStaffWithHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchStaffWithHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchStaffWithHistoryRequestWithBody generates requests for PutBatchStaffWithHistory with any type of body
func NewPutBatchStaffWithHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/staff-with-history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchTimekeeperGroupsRequest calls the generic PostBatchTimekeeperGroups builder with application/json body
func NewPostBatchTimekeeperGroupsRequest(server string, body PostBatchTimekeeperGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchTimekeeperGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchTimekeeperGroupsRequestWithBody generates requests for PostBatchTimekeeperGroups with any type of body
func NewPostBatchTimekeeperGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/timekeeper-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchTimekeeperGroupsRequest calls the generic PutBatchTimekeeperGroups builder with application/json body
func NewPutBatchTimekeeperGroupsRequest(server string, body PutBatchTimekeeperGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchTimekeeperGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchTimekeeperGroupsRequestWithBody generates requests for PutBatchTimekeeperGroups with any type of body
func NewPutBatchTimekeeperGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/timekeeper-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchTimekeepersRequest calls the generic PostBatchTimekeepers builder with application/json body
func NewPostBatchTimekeepersRequest(server string, body PostBatchTimekeepersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchTimekeepersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchTimekeepersRequestWithBody generates requests for PostBatchTimekeepers with any type of body
func NewPostBatchTimekeepersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/timekeepers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchUnitsRequest calls the generic PostBatchUnits builder with application/json body
func NewPostBatchUnitsRequest(server string, body PostBatchUnitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchUnitsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchUnitsRequestWithBody generates requests for PostBatchUnits with any type of body
func NewPostBatchUnitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchUnitsRequest calls the generic PutBatchUnits builder with application/json body
func NewPutBatchUnitsRequest(server string, body PutBatchUnitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchUnitsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchUnitsRequestWithBody generates requests for PutBatchUnits with any type of body
func NewPutBatchUnitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchVacationBalancesRequest calls the generic PostBatchVacationBalances builder with application/json body
func NewPostBatchVacationBalancesRequest(server string, body PostBatchVacationBalancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchVacationBalancesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchVacationBalancesRequestWithBody generates requests for PostBatchVacationBalances with any type of body
func NewPostBatchVacationBalancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/vacation-balances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchVacationBalancesRequest calls the generic PutBatchVacationBalances builder with application/json body
func NewPutBatchVacationBalancesRequest(server string, body PutBatchVacationBalancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchVacationBalancesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchVacationBalancesRequestWithBody generates requests for PutBatchVacationBalances with any type of body
func NewPutBatchVacationBalancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/vacation-balances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchVacationPeriodsRequest calls the generic PostBatchVacationPeriods builder with application/json body
func NewPostBatchVacationPeriodsRequest(server string, body PostBatchVacationPeriodsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchVacationPeriodsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchVacationPeriodsRequestWithBody generates requests for PostBatchVacationPeriods with any type of body
func NewPostBatchVacationPeriodsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/vacation-periods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchVacationPeriodsRequest calls the generic PutBatchVacationPeriods builder with application/json body
func NewPutBatchVacationPeriodsRequest(server string, body PutBatchVacationPeriodsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchVacationPeriodsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchVacationPeriodsRequestWithBody generates requests for PutBatchVacationPeriods with any type of body
func NewPutBatchVacationPeriodsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/vacation-periods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchVhiRequest calls the generic PostBatchVhi builder with application/json body
func NewPostBatchVhiRequest(server string, body PostBatchVhiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchVhiRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchVhiRequestWithBody generates requests for PostBatchVhi with any type of body
func NewPostBatchVhiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/vhi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchVhiRequest calls the generic PutBatchVhi builder with application/json body
func NewPutBatchVhiRequest(server string, body PutBatchVhiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchVhiRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchVhiRequestWithBody generates requests for PutBatchVhi with any type of body
func NewPutBatchVhiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/vhi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchWorkWeekHoursRequest calls the generic PostBatchWorkWeekHours builder with application/json body
func NewPostBatchWorkWeekHoursRequest(server string, body PostBatchWorkWeekHoursJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchWorkWeekHoursRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchWorkWeekHoursRequestWithBody generates requests for PostBatchWorkWeekHours with any type of body
func NewPostBatchWorkWeekHoursRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/work-week-hours")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchWorkWeekHoursRequest calls the generic PutBatchWorkWeekHours builder with application/json body
func NewPutBatchWorkWeekHoursRequest(server string, body PutBatchWorkWeekHoursJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchWorkWeekHoursRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchWorkWeekHoursRequestWithBody generates requests for PutBatchWorkWeekHours with any type of body
func NewPutBatchWorkWeekHoursRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/work-week-hours")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBatchWorkingHoursRequest calls the generic PostBatchWorkingHours builder with application/json body
func NewPostBatchWorkingHoursRequest(server string, body PostBatchWorkingHoursJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBatchWorkingHoursRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBatchWorkingHoursRequestWithBody generates requests for PostBatchWorkingHours with any type of body
func NewPostBatchWorkingHoursRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/working-hours")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBatchWorkingHoursRequest calls the generic PutBatchWorkingHours builder with application/json body
func NewPutBatchWorkingHoursRequest(server string, body PutBatchWorkingHoursJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBatchWorkingHoursRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBatchWorkingHoursRequestWithBody generates requests for PutBatchWorkingHours with any type of body
func NewPutBatchWorkingHoursRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch/working-hours")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCalendarDaysRequest generates requests for GetCalendarDays
func NewGetCalendarDaysRequest(server string, params *GetCalendarDaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calendar-days")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Calendar != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "calendar", runtime.ParamLocationQuery, *params.Calendar); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateFrom != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateTo != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, *params.DateTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCalendarsRequest generates requests for GetCalendars
func NewGetCalendarsRequest(server string, params *GetCalendarsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calendars")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitIDs", runtime.ParamLocationQuery, *params.UnitIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCalendarsIdRequest generates requests for GetCalendarsId
func NewGetCalendarsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calendars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClustersRequest generates requests for GetClusters
func NewGetClustersRequest(server string, params *GetClustersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClustersRequestWithBody generates requests for PostClusters with any type of body
func NewPostClustersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClustersIdRequest generates requests for GetClustersId
func NewGetClustersIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutClustersIdRequestWithBody generates requests for PutClustersId with any type of body
func NewPutClustersIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetComplexAssignmentsRequest generates requests for GetComplexAssignments
func NewGetComplexAssignmentsRequest(server string, params *GetComplexAssignmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/complex/assignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EmplIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emplIDs", runtime.ParamLocationQuery, *params.EmplIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusIds", runtime.ParamLocationQuery, *params.StatusIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "typeIds", runtime.ParamLocationQuery, *params.TypeIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmployeeTypeIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "employeeTypeIDs", runtime.ParamLocationQuery, *params.EmployeeTypeIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Logins != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logins", runtime.ParamLocationQuery, *params.Logins); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CurrentUnitIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currentUnitIds", runtime.ParamLocationQuery, *params.CurrentUnitIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitIds", runtime.ParamLocationQuery, *params.UnitIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CategoryIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryIDs", runtime.ParamLocationQuery, *params.CategoryIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CombinationStatuses != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "combinationStatuses", runtime.ParamLocationQuery, *params.CombinationStatuses); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActualTerminationDateFrom != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actualTerminationDateFrom", runtime.ParamLocationQuery, *params.ActualTerminationDateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HierarchyID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hierarchyID", runtime.ParamLocationQuery, *params.HierarchyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StaffUnitIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staffUnitIDs", runtime.ParamLocationQuery, *params.StaffUnitIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StaffCodes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staffCodes", runtime.ParamLocationQuery, *params.StaffCodes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComplexAssignmentsV2Request generates requests for GetComplexAssignmentsV2
func NewGetComplexAssignmentsV2Request(server string, params *GetComplexAssignmentsV2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/complex/assignments_v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EmplIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emplIDs", runtime.ParamLocationQuery, *params.EmplIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusIds", runtime.ParamLocationQuery, *params.StatusIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "typeIds", runtime.ParamLocationQuery, *params.TypeIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmployeeTypeIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "employeeTypeIDs", runtime.ParamLocationQuery, *params.EmployeeTypeIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Logins != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logins", runtime.ParamLocationQuery, *params.Logins); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CurrentUnitIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currentUnitIds", runtime.ParamLocationQuery, *params.CurrentUnitIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitIds", runtime.ParamLocationQuery, *params.UnitIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CategoryIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryIDs", runtime.ParamLocationQuery, *params.CategoryIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CombinationStatuses != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "combinationStatuses", runtime.ParamLocationQuery, *params.CombinationStatuses); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActualTerminationDateFrom != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actualTerminationDateFrom", runtime.ParamLocationQuery, *params.ActualTerminationDateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StaffUnitIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staffUnitIDs", runtime.ParamLocationQuery, *params.StaffUnitIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StaffCodes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staffCodes", runtime.ParamLocationQuery, *params.StaffCodes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RequiredEntities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requiredEntities", runtime.ParamLocationQuery, *params.RequiredEntities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComplexOrganizationStructureRequest generates requests for GetComplexOrganizationStructure
func NewGetComplexOrganizationStructureRequest(server string, params *GetComplexOrganizationStructureParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/complex/organization_structure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hierarchyID", runtime.ParamLocationQuery, params.HierarchyID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitIDs", runtime.ParamLocationQuery, params.UnitIDs); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requiredFields", runtime.ParamLocationQuery, params.RequiredFields); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComplexPeopleIdRequest generates requests for GetComplexPeopleId
func NewGetComplexPeopleIdRequest(server string, id UUIDPathObjectID, params *GetComplexPeopleIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/complex/people/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComplexUnitpathRequest generates requests for GetComplexUnitpath
func NewGetComplexUnitpathRequest(server string, params *GetComplexUnitpathParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/complex/unitpath")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.HierarchyID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hierarchyID", runtime.ParamLocationQuery, *params.HierarchyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.WithDeleted != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDeleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComplexUnitsIdSubunitsRequest generates requests for GetComplexUnitsIdSubunits
func NewGetComplexUnitsIdSubunitsRequest(server string, id UUIDPathObjectID, params *GetComplexUnitsIdSubunitsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/complex/units/%s/subunits", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HierarchyID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hierarchyID", runtime.ParamLocationQuery, *params.HierarchyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DepthLevel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depthLevel", runtime.ParamLocationQuery, *params.DepthLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DepthFrom != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depthFrom", runtime.ParamLocationQuery, *params.DepthFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DepthTo != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depthTo", runtime.ParamLocationQuery, *params.DepthTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeUnit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeUnit", runtime.ParamLocationQuery, *params.IncludeUnit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitTypesIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitTypesIds", runtime.ParamLocationQuery, *params.UnitTypesIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WithDeleted != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDeleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractsRequest generates requests for GetContracts
func NewGetContractsRequest(server string, params *GetContractsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AssignmentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignmentId", runtime.ParamLocationQuery, *params.AssignmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmployeeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "employeeId", runtime.ParamLocationQuery, *params.EmployeeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusIDs", runtime.ParamLocationQuery, *params.StatusIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TypeIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "typeIDs", runtime.ParamLocationQuery, *params.TypeIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractstatusRequest generates requests for GetContractstatus
func NewGetContractstatusRequest(server string, params *GetContractstatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contractstatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContractstatusRequest calls the generic PostContractstatus builder with application/json body
func NewPostContractstatusRequest(server string, body PostContractstatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContractstatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostContractstatusRequestWithBody generates requests for PostContractstatus with any type of body
func NewPostContractstatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contractstatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContractstatusIdRequest generates requests for GetContractstatusId
func NewGetContractstatusIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contractstatus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutContractstatusIdRequest calls the generic PutContractstatusId builder with application/json body
func NewPutContractstatusIdRequest(server string, id UUIDPathObjectID, body PutContractstatusIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutContractstatusIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutContractstatusIdRequestWithBody generates requests for PutContractstatusId with any type of body
func NewPutContractstatusIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contractstatus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContracttypesRequest generates requests for GetContracttypes
func NewGetContracttypesRequest(server string, params *GetContracttypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracttypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContracttypesRequest calls the generic PostContracttypes builder with application/json body
func NewPostContracttypesRequest(server string, body PostContracttypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContracttypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostContracttypesRequestWithBody generates requests for PostContracttypes with any type of body
func NewPostContracttypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracttypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContracttypesIdRequest generates requests for GetContracttypesId
func NewGetContracttypesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracttypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutContracttypesIdRequest calls the generic PutContracttypesId builder with application/json body
func NewPutContracttypesIdRequest(server string, id UUIDPathObjectID, body PutContracttypesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutContracttypesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutContracttypesIdRequestWithBody generates requests for PutContracttypesId with any type of body
func NewPutContracttypesIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracttypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCostcentersRequest generates requests for GetCostcenters
func NewGetCostcentersRequest(server string, params *GetCostcentersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/costcenters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CostCenterCodes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "costCenterCodes", runtime.ParamLocationQuery, *params.CostCenterCodes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCostcentersRequest calls the generic PostCostcenters builder with application/json body
func NewPostCostcentersRequest(server string, body PostCostcentersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCostcentersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCostcentersRequestWithBody generates requests for PostCostcenters with any type of body
func NewPostCostcentersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/costcenters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCostcentersIdRequest generates requests for GetCostcentersId
func NewGetCostcentersIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/costcenters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCostcentersIdRequest calls the generic PutCostcentersId builder with application/json body
func NewPutCostcentersIdRequest(server string, id UUIDPathObjectID, body PutCostcentersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCostcentersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCostcentersIdRequestWithBody generates requests for PutCostcentersId with any type of body
func NewPutCostcentersIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/costcenters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDgphDonorsRequest generates requests for GetDgphDonors
func NewGetDgphDonorsRequest(server string, params *GetDgphDonorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dgph-donors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StaffUnitIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staffUnitIDs", runtime.ParamLocationQuery, *params.StaffUnitIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assIDs", runtime.ParamLocationQuery, *params.AssIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PersonIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personIDs", runtime.ParamLocationQuery, *params.PersonIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDgphDonorsIdRequest generates requests for GetDgphDonorsId
func NewGetDgphDonorsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dgph-donors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDisabilityCategoriesRequest generates requests for GetDisabilityCategories
func NewGetDisabilityCategoriesRequest(server string, params *GetDisabilityCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disability-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistWorkRequest generates requests for GetDistWork
func NewGetDistWorkRequest(server string, params *GetDistWorkParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dist-work")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assIDs", runtime.ParamLocationQuery, *params.AssIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PersonIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personIDs", runtime.ParamLocationQuery, *params.PersonIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistWorkIdRequest generates requests for GetDistWorkId
func NewGetDistWorkIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dist-work/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDocumentsRequest generates requests for GetDocuments
func NewGetDocumentsRequest(server string, params *GetDocumentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Snils != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "snils", runtime.ParamLocationQuery, *params.Snils); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEarningPoliciesRequest generates requests for GetEarningPolicies
func NewGetEarningPoliciesRequest(server string, params *GetEarningPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/earning-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitIDs", runtime.ParamLocationQuery, *params.UnitIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmployeeRolesRequest generates requests for GetEmployeeRoles
func NewGetEmployeeRolesRequest(server string, params *GetEmployeeRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employee-roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmployeeRolesRequestWithBody generates requests for PostEmployeeRoles with any type of body
func NewPostEmployeeRolesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employee-roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEmployeeRolesIdRequest generates requests for GetEmployeeRolesId
func NewGetEmployeeRolesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employee-roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutEmployeeRolesIdRequestWithBody generates requests for PutEmployeeRolesId with any type of body
func NewPutEmployeeRolesIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employee-roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEmployeesRequest generates requests for GetEmployees
func NewGetEmployeesRequest(server string, params *GetEmployeesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmployeeTypeIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "employeeTypeIDs", runtime.ParamLocationQuery, *params.EmployeeTypeIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PersonIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personIDs", runtime.ParamLocationQuery, *params.PersonIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Logins != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "logins", runtime.ParamLocationQuery, *params.Logins); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TabNums != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tabNums", runtime.ParamLocationQuery, *params.TabNums); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmployeesIdRequest generates requests for GetEmployeesId
func NewGetEmployeesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmployeetypesRequest generates requests for GetEmployeetypes
func NewGetEmployeetypesRequest(server string, params *GetEmployeetypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employeetypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmployeetypesRequest calls the generic PostEmployeetypes builder with application/json body
func NewPostEmployeetypesRequest(server string, body PostEmployeetypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEmployeetypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEmployeetypesRequestWithBody generates requests for PostEmployeetypes with any type of body
func NewPostEmployeetypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employeetypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEmployeetypesIdRequest generates requests for GetEmployeetypesId
func NewGetEmployeetypesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employeetypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutEmployeetypesIdRequest calls the generic PutEmployeetypesId builder with application/json body
func NewPutEmployeetypesIdRequest(server string, id UUIDPathObjectID, body PutEmployeetypesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutEmployeetypesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutEmployeetypesIdRequestWithBody generates requests for PutEmployeetypesId with any type of body
func NewPutEmployeetypesIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employeetypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEventsRequest generates requests for GetEvents
func NewGetEventsRequest(server string, params *GetEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ObjectKinds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectKinds", runtime.ParamLocationQuery, *params.ObjectKinds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EventKinds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventKinds", runtime.ParamLocationQuery, *params.EventKinds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ObjectIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectIDs", runtime.ParamLocationQuery, *params.ObjectIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventsIdRequest generates requests for GetEventsId
func NewGetEventsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionalBlocksRequest generates requests for GetFunctionalBlocks
func NewGetFunctionalBlocksRequest(server string, params *GetFunctionalBlocksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functional-blocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFunctionalBlocksRequestWithBody generates requests for PostFunctionalBlocks with any type of body
func NewPostFunctionalBlocksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functional-blocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFunctionalBlocksIdRequest generates requests for GetFunctionalBlocksId
func NewGetFunctionalBlocksIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functional-blocks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFunctionalBlocksIdRequestWithBody generates requests for PutFunctionalBlocksId with any type of body
func NewPutFunctionalBlocksIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/functional-blocks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGradesRequest generates requests for GetGrades
func NewGetGradesRequest(server string, params *GetGradesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grades")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGradesRequest calls the generic PostGrades builder with application/json body
func NewPostGradesRequest(server string, body PostGradesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGradesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGradesRequestWithBody generates requests for PostGrades with any type of body
func NewPostGradesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grades")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGradesIdRequest generates requests for GetGradesId
func NewGetGradesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grades/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGradesIdRequest calls the generic PutGradesId builder with application/json body
func NewPutGradesIdRequest(server string, id UUIDPathObjectID, body PutGradesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGradesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutGradesIdRequestWithBody generates requests for PutGradesId with any type of body
func NewPutGradesIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grades/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHierarchiesRequest generates requests for GetHierarchies
func NewGetHierarchiesRequest(server string, params *GetHierarchiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hierarchies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsPrimary != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isPrimary", runtime.ParamLocationQuery, *params.IsPrimary); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostHierarchiesRequest calls the generic PostHierarchies builder with application/json body
func NewPostHierarchiesRequest(server string, body PostHierarchiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostHierarchiesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostHierarchiesRequestWithBody generates requests for PostHierarchies with any type of body
func NewPostHierarchiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hierarchies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHierarchiesIdRequest generates requests for GetHierarchiesId
func NewGetHierarchiesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hierarchies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutHierarchiesIdRequest calls the generic PutHierarchiesId builder with application/json body
func NewPutHierarchiesIdRequest(server string, id UUIDPathObjectID, body PutHierarchiesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutHierarchiesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutHierarchiesIdRequestWithBody generates requests for PutHierarchiesId with any type of body
func NewPutHierarchiesIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hierarchies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHierarchyLinksRequest generates requests for GetHierarchyLinks
func NewGetHierarchyLinksRequest(server string, params *GetHierarchyLinksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hierarchy-links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HierarchyIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hierarchyIDs", runtime.ParamLocationQuery, *params.HierarchyIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ParentIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parentIDs", runtime.ParamLocationQuery, *params.ParentIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ChildIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "childIDs", runtime.ParamLocationQuery, *params.ChildIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsRootUnit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isRootUnit", runtime.ParamLocationQuery, *params.IsRootUnit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostHierarchyLinksRequest calls the generic PostHierarchyLinks builder with application/json body
func NewPostHierarchyLinksRequest(server string, body PostHierarchyLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostHierarchyLinksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostHierarchyLinksRequestWithBody generates requests for PostHierarchyLinks with any type of body
func NewPostHierarchyLinksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hierarchy-links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHierarchyLinksIdRequest generates requests for GetHierarchyLinksId
func NewGetHierarchyLinksIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hierarchy-links/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutHierarchyLinksIdRequest calls the generic PutHierarchyLinksId builder with application/json body
func NewPutHierarchyLinksIdRequest(server string, id UUIDPathObjectID, body PutHierarchyLinksIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutHierarchyLinksIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutHierarchyLinksIdRequestWithBody generates requests for PutHierarchyLinksId with any type of body
func NewPutHierarchyLinksIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hierarchy-links/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHourlyRateRequest generates requests for GetHourlyRate
func NewGetHourlyRateRequest(server string, params *GetHourlyRateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hourly-rate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitIDs", runtime.ParamLocationQuery, *params.UnitIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PositionIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "positionIDs", runtime.ParamLocationQuery, *params.PositionIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLeavingReasonsRequest generates requests for GetLeavingReasons
func NewGetLeavingReasonsRequest(server string, params *GetLeavingReasonsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leaving-reasons")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLeavingReasonsIdRequest generates requests for GetLeavingReasonsId
func NewGetLeavingReasonsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leaving-reasons/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocationsRequest generates requests for GetLocations
func NewGetLocationsRequest(server string, params *GetLocationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocationsIdRequest generates requests for GetLocationsId
func NewGetLocationsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutManualTriggerManagersRequest generates requests for PutManualTriggerManagers
func NewPutManualTriggerManagersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manual/trigger-managers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOfficesRequest generates requests for GetOffices
func NewGetOfficesRequest(server string, params *GetOfficesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/offices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocationIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locationIDs", runtime.ParamLocationQuery, *params.LocationIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OfficeNames != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "officeNames", runtime.ParamLocationQuery, *params.OfficeNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsRequest generates requests for GetOrganizations
func NewGetOrganizationsRequest(server string, params *GetOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitID", runtime.ParamLocationQuery, *params.UnitID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HierarchyID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hierarchyID", runtime.ParamLocationQuery, *params.HierarchyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsRequest calls the generic PostOrganizations builder with application/json body
func NewPostOrganizationsRequest(server string, body PostOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOrganizationsRequestWithBody generates requests for PostOrganizations with any type of body
func NewPostOrganizationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsIdRequest generates requests for GetOrganizationsId
func NewGetOrganizationsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrganizationsIdRequest calls the generic PutOrganizationsId builder with application/json body
func NewPutOrganizationsIdRequest(server string, id UUIDPathObjectID, body PutOrganizationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutOrganizationsIdRequestWithBody generates requests for PutOrganizationsId with any type of body
func NewPutOrganizationsIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPaoBonusPaymentCategoriesRequest generates requests for GetPaoBonusPaymentCategories
func NewGetPaoBonusPaymentCategoriesRequest(server string, params *GetPaoBonusPaymentCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pao-bonus-payment-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaoBonusPaymentCategoriesIdRequest generates requests for GetPaoBonusPaymentCategoriesId
func NewGetPaoBonusPaymentCategoriesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pao-bonus-payment-categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPayTypesRequest generates requests for GetPayTypes
func NewGetPayTypesRequest(server string, params *GetPayTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pay-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPeopleRequest generates requests for GetPeople
func NewGetPeopleRequest(server string, params *GetPeopleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.SFullname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sFullname", runtime.ParamLocationQuery, *params.SFullname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DocumentsSnils != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "documents.snils", runtime.ParamLocationQuery, *params.DocumentsSnils); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPeopleIdRequest generates requests for GetPeopleId
func NewGetPeopleIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPeopleIdDocumentsRequest generates requests for GetPeopleIdDocuments
func NewGetPeopleIdDocumentsRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people/%s/documents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPeopleIdOriginRequest generates requests for GetPeopleIdOrigin
func NewGetPeopleIdOriginRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/people/%s/origin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPersonEducationRequest generates requests for GetPersonEducation
func NewGetPersonEducationRequest(server string, params *GetPersonEducationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/person-education")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PersonIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personIDs", runtime.ParamLocationQuery, *params.PersonIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPersonalSchedulesRequest generates requests for GetPersonalSchedules
func NewGetPersonalSchedulesRequest(server string, params *GetPersonalSchedulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/personal-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ScheduleIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scheduleIDs", runtime.ParamLocationQuery, *params.ScheduleIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assIDs", runtime.ParamLocationQuery, *params.AssIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPositionCategoriesRequest generates requests for GetPositionCategories
func NewGetPositionCategoriesRequest(server string, params *GetPositionCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/position-categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPositionCategoriesIdRequest generates requests for GetPositionCategoriesId
func NewGetPositionCategoriesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/position-categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPositionsRequest generates requests for GetPositions
func NewGetPositionsRequest(server string, params *GetPositionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/positions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.STitle != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sTitle", runtime.ParamLocationQuery, *params.STitle); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPositionsRequest calls the generic PostPositions builder with application/json body
func NewPostPositionsRequest(server string, body PostPositionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPositionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPositionsRequestWithBody generates requests for PostPositions with any type of body
func NewPostPositionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/positions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPositionsIdRequest generates requests for GetPositionsId
func NewGetPositionsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/positions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPositionsIdRequest calls the generic PutPositionsId builder with application/json body
func NewPutPositionsIdRequest(server string, id UUIDPathObjectID, body PutPositionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPositionsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPositionsIdRequestWithBody generates requests for PutPositionsId with any type of body
func NewPutPositionsIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/positions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductEntitiesRequest generates requests for GetProductEntities
func NewGetProductEntitiesRequest(server string, params *GetProductEntitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product-entities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProductEntitiesTypes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productEntitiesTypes", runtime.ParamLocationQuery, *params.ProductEntitiesTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Names != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProductCodes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productCodes", runtime.ParamLocationQuery, *params.ProductCodes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductEntityLinksRequest generates requests for GetProductEntityLinks
func NewGetProductEntityLinksRequest(server string, params *GetProductEntityLinksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product-entity-links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ChildIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "childIDs", runtime.ParamLocationQuery, *params.ChildIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ParentIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parentIDs", runtime.ParamLocationQuery, *params.ParentIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductStatusesRequest generates requests for GetProductStatuses
func NewGetProductStatusesRequest(server string, params *GetProductStatusesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product-statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Names != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsRequest generates requests for GetProducts
func NewGetProductsRequest(server string, params *GetProductsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsIdRequest generates requests for GetProductsId
func NewGetProductsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSalariesRequest generates requests for GetSalaries
func NewGetSalariesRequest(server string, params *GetSalariesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssignmentsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignmentsIds", runtime.ParamLocationQuery, *params.AssignmentsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSalariesIdRequest generates requests for GetSalariesId
func NewGetSalariesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salaries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScheduleDaysRequest generates requests for GetScheduleDays
func NewGetScheduleDaysRequest(server string, params *GetScheduleDaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedule-days")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ScheduleIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scheduleIDs", runtime.ParamLocationQuery, *params.ScheduleIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchedulesRequest generates requests for GetSchedules
func NewGetSchedulesRequest(server string, params *GetSchedulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CalendarIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "calendarIDs", runtime.ParamLocationQuery, *params.CalendarIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShiftTypesRequest generates requests for GetShiftTypes
func NewGetShiftTypesRequest(server string, params *GetShiftTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shift-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Ids != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaffRequest generates requests for GetStaff
func NewGetStaffRequest(server string, params *GetStaffParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staff")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitIDs", runtime.ParamLocationQuery, *params.UnitIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GradesIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gradesIds", runtime.ParamLocationQuery, *params.GradesIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AvailabilityIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "availabilityIDs", runtime.ParamLocationQuery, *params.AvailabilityIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StaffRolesIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staffRolesIDs", runtime.ParamLocationQuery, *params.StaffRolesIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StaffCodes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staffCodes", runtime.ParamLocationQuery, *params.StaffCodes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StaffCodeSubstring != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staffCodeSubstring", runtime.ParamLocationQuery, *params.StaffCodeSubstring); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIDs", runtime.ParamLocationQuery, *params.OrgIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.History != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "history", runtime.ParamLocationQuery, *params.History); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaffAvailabilityStatusesRequest generates requests for GetStaffAvailabilityStatuses
func NewGetStaffAvailabilityStatusesRequest(server string, params *GetStaffAvailabilityStatusesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staff-availability-statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaffAvailabilityStatusesIdRequest generates requests for GetStaffAvailabilityStatusesId
func NewGetStaffAvailabilityStatusesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staff-availability-statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaffRolesRequest generates requests for GetStaffRoles
func NewGetStaffRolesRequest(server string, params *GetStaffRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staff-roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaffRolesIdRequest generates requests for GetStaffRolesId
func NewGetStaffRolesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staff-roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaffTypesRequest generates requests for GetStaffTypes
func NewGetStaffTypesRequest(server string, params *GetStaffTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staff-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaffTypesIdRequest generates requests for GetStaffTypesId
func NewGetStaffTypesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staff-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubunitsRequest generates requests for GetSubunits
func NewGetSubunitsRequest(server string, params *GetSubunitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subunits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitTypesIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitTypesIds", runtime.ParamLocationQuery, *params.UnitTypesIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HierarchyID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hierarchyID", runtime.ParamLocationQuery, *params.HierarchyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitIDs", runtime.ParamLocationQuery, *params.UnitIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskIdRequest generates requests for GetTaskId
func NewGetTaskIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTaskIdRequest calls the generic PutTaskId builder with application/json body
func NewPutTaskIdRequest(server string, id UUIDPathObjectID, body PutTaskIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTaskIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTaskIdRequestWithBody generates requests for PutTaskId with any type of body
func NewPutTaskIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTimekeeperGroupsRequest generates requests for GetTimekeeperGroups
func NewGetTimekeeperGroupsRequest(server string, params *GetTimekeeperGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timekeeper-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimekeeperGroupsIdRequest generates requests for GetTimekeeperGroupsId
func NewGetTimekeeperGroupsIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timekeeper-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimekeepersRequest generates requests for GetTimekeepers
func NewGetTimekeepersRequest(server string, params *GetTimekeepersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timekeepers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assIDs", runtime.ParamLocationQuery, *params.AssIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitIDs", runtime.ParamLocationQuery, *params.UnitIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GroupIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupIDs", runtime.ParamLocationQuery, *params.GroupIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TimekeeperIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timekeeperIDs", runtime.ParamLocationQuery, *params.TimekeeperIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUnitsRequest generates requests for GetUnits
func NewGetUnitsRequest(server string, params *GetUnitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.STitle != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sTitle", runtime.ParamLocationQuery, *params.STitle); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnitTypesIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unitTypesIds", runtime.ParamLocationQuery, *params.UnitTypesIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HierarchyID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hierarchyID", runtime.ParamLocationQuery, *params.HierarchyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUnitsWithoutHierarchiesRequest generates requests for GetUnitsWithoutHierarchies
func NewGetUnitsWithoutHierarchiesRequest(server string, params *GetUnitsWithoutHierarchiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/units-without-hierarchies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUnitsIdRequest generates requests for GetUnitsId
func NewGetUnitsIdRequest(server string, id UUIDPathObjectID, params *GetUnitsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.HierarchyID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hierarchyID", runtime.ParamLocationQuery, *params.HierarchyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUnittypesRequest generates requests for GetUnittypes
func NewGetUnittypesRequest(server string, params *GetUnittypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unittypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUnittypesRequest calls the generic PostUnittypes builder with application/json body
func NewPostUnittypesRequest(server string, body PostUnittypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUnittypesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUnittypesRequestWithBody generates requests for PostUnittypes with any type of body
func NewPostUnittypesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unittypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUnittypesIdRequest generates requests for GetUnittypesId
func NewGetUnittypesIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unittypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUnittypesIdRequest calls the generic PutUnittypesId builder with application/json body
func NewPutUnittypesIdRequest(server string, id UUIDPathObjectID, body PutUnittypesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUnittypesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutUnittypesIdRequestWithBody generates requests for PutUnittypesId with any type of body
func NewPutUnittypesIdRequestWithBody(server string, id UUIDPathObjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unittypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVacationBalancesRequest generates requests for GetVacationBalances
func NewGetVacationBalancesRequest(server string, params *GetVacationBalancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vacation-balances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assIDs", runtime.ParamLocationQuery, *params.AssIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmplIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emplIDs", runtime.ParamLocationQuery, *params.EmplIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AbsTypeID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "absTypeID", runtime.ParamLocationQuery, *params.AbsTypeID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Year != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVacationPeriodsRequest generates requests for GetVacationPeriods
func NewGetVacationPeriodsRequest(server string, params *GetVacationPeriodsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vacation-periods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assIDs", runtime.ParamLocationQuery, *params.AssIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmplIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emplIDs", runtime.ParamLocationQuery, *params.EmplIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AbsID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "absID", runtime.ParamLocationQuery, *params.AbsID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVhiRequest generates requests for GetVhi
func NewGetVhiRequest(server string, params *GetVhiParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vhi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AssIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assIDs", runtime.ParamLocationQuery, *params.AssIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActivityFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "activityFilters", runtime.ParamLocationQuery, *params.ActivityFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrgsIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgsIds", runtime.ParamLocationQuery, *params.OrgsIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVhiIdRequest generates requests for GetVhiId
func NewGetVhiIdRequest(server string, id UUIDPathObjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vhi/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkingHoursRequest generates requests for GetWorkingHours
func NewGetWorkingHoursRequest(server string, params *GetWorkingHoursParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/working-hours")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.QueryFilters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryFilters", runtime.ParamLocationQuery, *params.QueryFilters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAbsenceTypes request
	GetAbsenceTypesWithResponse(ctx context.Context, params *GetAbsenceTypesParams, reqEditors ...RequestEditorFn) (*GetAbsenceTypesResponse, error)

	// GetAbsenceTypesId request
	GetAbsenceTypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAbsenceTypesIdResponse, error)

	// GetAbsences request
	GetAbsencesWithResponse(ctx context.Context, params *GetAbsencesParams, reqEditors ...RequestEditorFn) (*GetAbsencesResponse, error)

	// GetAbsencesId request
	GetAbsencesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAbsencesIdResponse, error)

	// GetAllowances request
	GetAllowancesWithResponse(ctx context.Context, params *GetAllowancesParams, reqEditors ...RequestEditorFn) (*GetAllowancesResponse, error)

	// GetAllowancesId request
	GetAllowancesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAllowancesIdResponse, error)

	// GetApplicants request
	GetApplicantsWithResponse(ctx context.Context, params *GetApplicantsParams, reqEditors ...RequestEditorFn) (*GetApplicantsResponse, error)

	// PostApplicants request with any body
	PostApplicantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicantsResponse, error)

	PostApplicantsWithResponse(ctx context.Context, body PostApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicantsResponse, error)

	// GetApplicantsId request
	GetApplicantsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetApplicantsIdResponse, error)

	// GetAssignmentcategories request
	GetAssignmentcategoriesWithResponse(ctx context.Context, params *GetAssignmentcategoriesParams, reqEditors ...RequestEditorFn) (*GetAssignmentcategoriesResponse, error)

	// PostAssignmentcategories request with any body
	PostAssignmentcategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssignmentcategoriesResponse, error)

	PostAssignmentcategoriesWithResponse(ctx context.Context, body PostAssignmentcategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAssignmentcategoriesResponse, error)

	// GetAssignmentcategoriesId request
	GetAssignmentcategoriesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAssignmentcategoriesIdResponse, error)

	// PutAssignmentcategoriesId request with any body
	PutAssignmentcategoriesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssignmentcategoriesIdResponse, error)

	PutAssignmentcategoriesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutAssignmentcategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssignmentcategoriesIdResponse, error)

	// GetAssignments request
	GetAssignmentsWithResponse(ctx context.Context, params *GetAssignmentsParams, reqEditors ...RequestEditorFn) (*GetAssignmentsResponse, error)

	// GetAssignmentsId request
	GetAssignmentsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAssignmentsIdResponse, error)

	// GetAssignmentstatus request
	GetAssignmentstatusWithResponse(ctx context.Context, params *GetAssignmentstatusParams, reqEditors ...RequestEditorFn) (*GetAssignmentstatusResponse, error)

	// PostAssignmentstatus request with any body
	PostAssignmentstatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssignmentstatusResponse, error)

	PostAssignmentstatusWithResponse(ctx context.Context, body PostAssignmentstatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAssignmentstatusResponse, error)

	// GetAssignmentstatusId request
	GetAssignmentstatusIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAssignmentstatusIdResponse, error)

	// PutAssignmentstatusId request with any body
	PutAssignmentstatusIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssignmentstatusIdResponse, error)

	PutAssignmentstatusIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutAssignmentstatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssignmentstatusIdResponse, error)

	// GetAssignmenttypes request
	GetAssignmenttypesWithResponse(ctx context.Context, params *GetAssignmenttypesParams, reqEditors ...RequestEditorFn) (*GetAssignmenttypesResponse, error)

	// PostAssignmenttypes request with any body
	PostAssignmenttypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssignmenttypesResponse, error)

	PostAssignmenttypesWithResponse(ctx context.Context, body PostAssignmenttypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAssignmenttypesResponse, error)

	// GetAssignmenttypesId request
	GetAssignmenttypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAssignmenttypesIdResponse, error)

	// PutAssignmenttypesId request with any body
	PutAssignmenttypesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssignmenttypesIdResponse, error)

	PutAssignmenttypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutAssignmenttypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssignmenttypesIdResponse, error)

	// GetBackBonusPaymentCategories request
	GetBackBonusPaymentCategoriesWithResponse(ctx context.Context, params *GetBackBonusPaymentCategoriesParams, reqEditors ...RequestEditorFn) (*GetBackBonusPaymentCategoriesResponse, error)

	// GetBackBonusPaymentCategoriesId request
	GetBackBonusPaymentCategoriesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetBackBonusPaymentCategoriesIdResponse, error)

	// GetBalanceUnits request
	GetBalanceUnitsWithResponse(ctx context.Context, params *GetBalanceUnitsParams, reqEditors ...RequestEditorFn) (*GetBalanceUnitsResponse, error)

	// PostBalanceUnits request with any body
	PostBalanceUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBalanceUnitsResponse, error)

	PostBalanceUnitsWithResponse(ctx context.Context, body PostBalanceUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBalanceUnitsResponse, error)

	// GetBalanceUnitsId request
	GetBalanceUnitsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetBalanceUnitsIdResponse, error)

	// PutBalanceUnitsId request with any body
	PutBalanceUnitsIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBalanceUnitsIdResponse, error)

	PutBalanceUnitsIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutBalanceUnitsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBalanceUnitsIdResponse, error)

	// GetBanks request
	GetBanksWithResponse(ctx context.Context, params *GetBanksParams, reqEditors ...RequestEditorFn) (*GetBanksResponse, error)

	// GetBanksId request
	GetBanksIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetBanksIdResponse, error)

	// PostBatchAbsenceTypes request with any body
	PostBatchAbsenceTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchAbsenceTypesResponse, error)

	PostBatchAbsenceTypesWithResponse(ctx context.Context, body PostBatchAbsenceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchAbsenceTypesResponse, error)

	// PutBatchAbsenceTypes request with any body
	PutBatchAbsenceTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchAbsenceTypesResponse, error)

	PutBatchAbsenceTypesWithResponse(ctx context.Context, body PutBatchAbsenceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchAbsenceTypesResponse, error)

	// PostBatchAbsences request with any body
	PostBatchAbsencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchAbsencesResponse, error)

	PostBatchAbsencesWithResponse(ctx context.Context, body PostBatchAbsencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchAbsencesResponse, error)

	// PutBatchAbsences request with any body
	PutBatchAbsencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchAbsencesResponse, error)

	PutBatchAbsencesWithResponse(ctx context.Context, body PutBatchAbsencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchAbsencesResponse, error)

	// PostBatchAllowances request with any body
	PostBatchAllowancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchAllowancesResponse, error)

	PostBatchAllowancesWithResponse(ctx context.Context, body PostBatchAllowancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchAllowancesResponse, error)

	// PutBatchAllowances request with any body
	PutBatchAllowancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchAllowancesResponse, error)

	PutBatchAllowancesWithResponse(ctx context.Context, body PutBatchAllowancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchAllowancesResponse, error)

	// PostBatchApplicants request with any body
	PostBatchApplicantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchApplicantsResponse, error)

	PostBatchApplicantsWithResponse(ctx context.Context, body PostBatchApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchApplicantsResponse, error)

	// PutBatchApplicants request with any body
	PutBatchApplicantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchApplicantsResponse, error)

	PutBatchApplicantsWithResponse(ctx context.Context, body PutBatchApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchApplicantsResponse, error)

	// PostBatchAssignments request with any body
	PostBatchAssignmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchAssignmentsResponse, error)

	PostBatchAssignmentsWithResponse(ctx context.Context, body PostBatchAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchAssignmentsResponse, error)

	// PutBatchAssignments request with any body
	PutBatchAssignmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchAssignmentsResponse, error)

	PutBatchAssignmentsWithResponse(ctx context.Context, body PutBatchAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchAssignmentsResponse, error)

	// PostBatchAssignmentsWithHistory request with any body
	PostBatchAssignmentsWithHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchAssignmentsWithHistoryResponse, error)

	PostBatchAssignmentsWithHistoryWithResponse(ctx context.Context, body PostBatchAssignmentsWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchAssignmentsWithHistoryResponse, error)

	// PutBatchAssignmentsWithHistory request with any body
	PutBatchAssignmentsWithHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchAssignmentsWithHistoryResponse, error)

	PutBatchAssignmentsWithHistoryWithResponse(ctx context.Context, body PutBatchAssignmentsWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchAssignmentsWithHistoryResponse, error)

	// PostBatchBackBonusPaymentCategories request with any body
	PostBatchBackBonusPaymentCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchBackBonusPaymentCategoriesResponse, error)

	PostBatchBackBonusPaymentCategoriesWithResponse(ctx context.Context, body PostBatchBackBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchBackBonusPaymentCategoriesResponse, error)

	// PutBatchBackBonusPaymentCategories request with any body
	PutBatchBackBonusPaymentCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchBackBonusPaymentCategoriesResponse, error)

	PutBatchBackBonusPaymentCategoriesWithResponse(ctx context.Context, body PutBatchBackBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchBackBonusPaymentCategoriesResponse, error)

	// PostBatchBanks request with any body
	PostBatchBanksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchBanksResponse, error)

	PostBatchBanksWithResponse(ctx context.Context, body PostBatchBanksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchBanksResponse, error)

	// PutBatchBanks request with any body
	PutBatchBanksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchBanksResponse, error)

	PutBatchBanksWithResponse(ctx context.Context, body PutBatchBanksJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchBanksResponse, error)

	// PostBatchCalendar request with any body
	PostBatchCalendarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchCalendarResponse, error)

	PostBatchCalendarWithResponse(ctx context.Context, body PostBatchCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchCalendarResponse, error)

	// PutBatchCalendar request with any body
	PutBatchCalendarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchCalendarResponse, error)

	PutBatchCalendarWithResponse(ctx context.Context, body PutBatchCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchCalendarResponse, error)

	// PostBatchCalendarDays request with any body
	PostBatchCalendarDaysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchCalendarDaysResponse, error)

	PostBatchCalendarDaysWithResponse(ctx context.Context, body PostBatchCalendarDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchCalendarDaysResponse, error)

	// PutBatchCalendarDays request with any body
	PutBatchCalendarDaysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchCalendarDaysResponse, error)

	PutBatchCalendarDaysWithResponse(ctx context.Context, body PutBatchCalendarDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchCalendarDaysResponse, error)

	// PostBatchContracts request with any body
	PostBatchContractsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchContractsResponse, error)

	PostBatchContractsWithResponse(ctx context.Context, body PostBatchContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchContractsResponse, error)

	// PutBatchContracts request with any body
	PutBatchContractsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchContractsResponse, error)

	PutBatchContractsWithResponse(ctx context.Context, body PutBatchContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchContractsResponse, error)

	// PostBatchDelete request with any body
	PostBatchDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchDeleteResponse, error)

	PostBatchDeleteWithResponse(ctx context.Context, body PostBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchDeleteResponse, error)

	// PostBatchDgphDonors request with any body
	PostBatchDgphDonorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchDgphDonorsResponse, error)

	PostBatchDgphDonorsWithResponse(ctx context.Context, body PostBatchDgphDonorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchDgphDonorsResponse, error)

	// PutBatchDgphDonors request with any body
	PutBatchDgphDonorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchDgphDonorsResponse, error)

	PutBatchDgphDonorsWithResponse(ctx context.Context, body PutBatchDgphDonorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchDgphDonorsResponse, error)

	// PostBatchDisabilityCategories request with any body
	PostBatchDisabilityCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchDisabilityCategoriesResponse, error)

	PostBatchDisabilityCategoriesWithResponse(ctx context.Context, body PostBatchDisabilityCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchDisabilityCategoriesResponse, error)

	// PutBatchDisabilityCategories request with any body
	PutBatchDisabilityCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchDisabilityCategoriesResponse, error)

	PutBatchDisabilityCategoriesWithResponse(ctx context.Context, body PutBatchDisabilityCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchDisabilityCategoriesResponse, error)

	// PostBatchDistWork request with any body
	PostBatchDistWorkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchDistWorkResponse, error)

	PostBatchDistWorkWithResponse(ctx context.Context, body PostBatchDistWorkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchDistWorkResponse, error)

	// PutBatchDistWork request with any body
	PutBatchDistWorkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchDistWorkResponse, error)

	PutBatchDistWorkWithResponse(ctx context.Context, body PutBatchDistWorkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchDistWorkResponse, error)

	// PostBatchEarningPolicies request with any body
	PostBatchEarningPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchEarningPoliciesResponse, error)

	PostBatchEarningPoliciesWithResponse(ctx context.Context, body PostBatchEarningPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchEarningPoliciesResponse, error)

	// PutBatchEarningPolicies request with any body
	PutBatchEarningPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchEarningPoliciesResponse, error)

	PutBatchEarningPoliciesWithResponse(ctx context.Context, body PutBatchEarningPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchEarningPoliciesResponse, error)

	// PutBatchEmployeePersonalData request with any body
	PutBatchEmployeePersonalDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchEmployeePersonalDataResponse, error)

	PutBatchEmployeePersonalDataWithResponse(ctx context.Context, body PutBatchEmployeePersonalDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchEmployeePersonalDataResponse, error)

	// PostBatchEmployees request with any body
	PostBatchEmployeesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchEmployeesResponse, error)

	PostBatchEmployeesWithResponse(ctx context.Context, body PostBatchEmployeesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchEmployeesResponse, error)

	// PutBatchEmployees request with any body
	PutBatchEmployeesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchEmployeesResponse, error)

	PutBatchEmployeesWithResponse(ctx context.Context, body PutBatchEmployeesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchEmployeesResponse, error)

	// PostBatchGrades request with any body
	PostBatchGradesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchGradesResponse, error)

	PostBatchGradesWithResponse(ctx context.Context, body PostBatchGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchGradesResponse, error)

	// PutBatchGrades request with any body
	PutBatchGradesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchGradesResponse, error)

	PutBatchGradesWithResponse(ctx context.Context, body PutBatchGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchGradesResponse, error)

	// PostBatchHierarchyLinks request with any body
	PostBatchHierarchyLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchHierarchyLinksResponse, error)

	PostBatchHierarchyLinksWithResponse(ctx context.Context, body PostBatchHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchHierarchyLinksResponse, error)

	// PutBatchHierarchyLinks request with any body
	PutBatchHierarchyLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchHierarchyLinksResponse, error)

	PutBatchHierarchyLinksWithResponse(ctx context.Context, body PutBatchHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchHierarchyLinksResponse, error)

	// PostBatchHourlyRate request with any body
	PostBatchHourlyRateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchHourlyRateResponse, error)

	PostBatchHourlyRateWithResponse(ctx context.Context, body PostBatchHourlyRateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchHourlyRateResponse, error)

	// PutBatchHourlyRate request with any body
	PutBatchHourlyRateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchHourlyRateResponse, error)

	PutBatchHourlyRateWithResponse(ctx context.Context, body PutBatchHourlyRateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchHourlyRateResponse, error)

	// PostBatchLeavingReasons request with any body
	PostBatchLeavingReasonsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchLeavingReasonsResponse, error)

	PostBatchLeavingReasonsWithResponse(ctx context.Context, body PostBatchLeavingReasonsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchLeavingReasonsResponse, error)

	// PutBatchLeavingReasons request with any body
	PutBatchLeavingReasonsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchLeavingReasonsResponse, error)

	PutBatchLeavingReasonsWithResponse(ctx context.Context, body PutBatchLeavingReasonsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchLeavingReasonsResponse, error)

	// PostBatchLocations request with any body
	PostBatchLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchLocationsResponse, error)

	PostBatchLocationsWithResponse(ctx context.Context, body PostBatchLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchLocationsResponse, error)

	// PutBatchLocations request with any body
	PutBatchLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchLocationsResponse, error)

	PutBatchLocationsWithResponse(ctx context.Context, body PutBatchLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchLocationsResponse, error)

	// PostBatchOffices request with any body
	PostBatchOfficesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchOfficesResponse, error)

	PostBatchOfficesWithResponse(ctx context.Context, body PostBatchOfficesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchOfficesResponse, error)

	// PutBatchOffices request with any body
	PutBatchOfficesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchOfficesResponse, error)

	PutBatchOfficesWithResponse(ctx context.Context, body PutBatchOfficesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchOfficesResponse, error)

	// PostBatchPaoBonusPaymentCategories request with any body
	PostBatchPaoBonusPaymentCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPaoBonusPaymentCategoriesResponse, error)

	PostBatchPaoBonusPaymentCategoriesWithResponse(ctx context.Context, body PostBatchPaoBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPaoBonusPaymentCategoriesResponse, error)

	// PutBatchPaoBonusPaymentCategories request with any body
	PutBatchPaoBonusPaymentCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPaoBonusPaymentCategoriesResponse, error)

	PutBatchPaoBonusPaymentCategoriesWithResponse(ctx context.Context, body PutBatchPaoBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPaoBonusPaymentCategoriesResponse, error)

	// PostBatchPayTypes request with any body
	PostBatchPayTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPayTypesResponse, error)

	PostBatchPayTypesWithResponse(ctx context.Context, body PostBatchPayTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPayTypesResponse, error)

	// PutBatchPayTypes request with any body
	PutBatchPayTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPayTypesResponse, error)

	PutBatchPayTypesWithResponse(ctx context.Context, body PutBatchPayTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPayTypesResponse, error)

	// PostBatchPeople request with any body
	PostBatchPeopleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPeopleResponse, error)

	PostBatchPeopleWithResponse(ctx context.Context, body PostBatchPeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPeopleResponse, error)

	// PutBatchPeople request with any body
	PutBatchPeopleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPeopleResponse, error)

	PutBatchPeopleWithResponse(ctx context.Context, body PutBatchPeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPeopleResponse, error)

	// PostBatchPersonEducation request with any body
	PostBatchPersonEducationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPersonEducationResponse, error)

	PostBatchPersonEducationWithResponse(ctx context.Context, body PostBatchPersonEducationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPersonEducationResponse, error)

	// PutBatchPersonEducation request with any body
	PutBatchPersonEducationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPersonEducationResponse, error)

	PutBatchPersonEducationWithResponse(ctx context.Context, body PutBatchPersonEducationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPersonEducationResponse, error)

	// PutBatchPersonMilitary request with any body
	PutBatchPersonMilitaryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPersonMilitaryResponse, error)

	PutBatchPersonMilitaryWithResponse(ctx context.Context, body PutBatchPersonMilitaryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPersonMilitaryResponse, error)

	// PutBatchPersonPictureId request with any body
	PutBatchPersonPictureIdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPersonPictureIdResponse, error)

	PutBatchPersonPictureIdWithResponse(ctx context.Context, body PutBatchPersonPictureIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPersonPictureIdResponse, error)

	// PostBatchPersonalSchedules request with any body
	PostBatchPersonalSchedulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPersonalSchedulesResponse, error)

	PostBatchPersonalSchedulesWithResponse(ctx context.Context, body PostBatchPersonalSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPersonalSchedulesResponse, error)

	// PutBatchPersonalSchedules request with any body
	PutBatchPersonalSchedulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPersonalSchedulesResponse, error)

	PutBatchPersonalSchedulesWithResponse(ctx context.Context, body PutBatchPersonalSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPersonalSchedulesResponse, error)

	// PostBatchPositionCategories request with any body
	PostBatchPositionCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPositionCategoriesResponse, error)

	PostBatchPositionCategoriesWithResponse(ctx context.Context, body PostBatchPositionCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPositionCategoriesResponse, error)

	// PutBatchPositionCategories request with any body
	PutBatchPositionCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPositionCategoriesResponse, error)

	PutBatchPositionCategoriesWithResponse(ctx context.Context, body PutBatchPositionCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPositionCategoriesResponse, error)

	// PostBatchProductEntities request with any body
	PostBatchProductEntitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchProductEntitiesResponse, error)

	PostBatchProductEntitiesWithResponse(ctx context.Context, body PostBatchProductEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchProductEntitiesResponse, error)

	// PutBatchProductEntities request with any body
	PutBatchProductEntitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchProductEntitiesResponse, error)

	PutBatchProductEntitiesWithResponse(ctx context.Context, body PutBatchProductEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchProductEntitiesResponse, error)

	// PostBatchProductEntityLinks request with any body
	PostBatchProductEntityLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchProductEntityLinksResponse, error)

	PostBatchProductEntityLinksWithResponse(ctx context.Context, body PostBatchProductEntityLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchProductEntityLinksResponse, error)

	// PutBatchProductEntityLinks request with any body
	PutBatchProductEntityLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchProductEntityLinksResponse, error)

	PutBatchProductEntityLinksWithResponse(ctx context.Context, body PutBatchProductEntityLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchProductEntityLinksResponse, error)

	// PostBatchProductStatuses request with any body
	PostBatchProductStatusesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchProductStatusesResponse, error)

	PostBatchProductStatusesWithResponse(ctx context.Context, body PostBatchProductStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchProductStatusesResponse, error)

	// PutBatchProductStatuses request with any body
	PutBatchProductStatusesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchProductStatusesResponse, error)

	PutBatchProductStatusesWithResponse(ctx context.Context, body PutBatchProductStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchProductStatusesResponse, error)

	// PostBatchProducts request with any body
	PostBatchProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchProductsResponse, error)

	PostBatchProductsWithResponse(ctx context.Context, body PostBatchProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchProductsResponse, error)

	// PutBatchProducts request with any body
	PutBatchProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchProductsResponse, error)

	PutBatchProductsWithResponse(ctx context.Context, body PutBatchProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchProductsResponse, error)

	// PostBatchSalaries request with any body
	PostBatchSalariesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchSalariesResponse, error)

	PostBatchSalariesWithResponse(ctx context.Context, body PostBatchSalariesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchSalariesResponse, error)

	// PutBatchSalaries request with any body
	PutBatchSalariesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchSalariesResponse, error)

	PutBatchSalariesWithResponse(ctx context.Context, body PutBatchSalariesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchSalariesResponse, error)

	// PostBatchScheduleDays request with any body
	PostBatchScheduleDaysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchScheduleDaysResponse, error)

	PostBatchScheduleDaysWithResponse(ctx context.Context, body PostBatchScheduleDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchScheduleDaysResponse, error)

	// PutBatchScheduleDays request with any body
	PutBatchScheduleDaysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchScheduleDaysResponse, error)

	PutBatchScheduleDaysWithResponse(ctx context.Context, body PutBatchScheduleDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchScheduleDaysResponse, error)

	// PostBatchSchedules request with any body
	PostBatchSchedulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchSchedulesResponse, error)

	PostBatchSchedulesWithResponse(ctx context.Context, body PostBatchSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchSchedulesResponse, error)

	// PutBatchSchedules request with any body
	PutBatchSchedulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchSchedulesResponse, error)

	PutBatchSchedulesWithResponse(ctx context.Context, body PutBatchSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchSchedulesResponse, error)

	// PostBatchShiftTypes request with any body
	PostBatchShiftTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchShiftTypesResponse, error)

	PostBatchShiftTypesWithResponse(ctx context.Context, body PostBatchShiftTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchShiftTypesResponse, error)

	// PutBatchShiftTypes request with any body
	PutBatchShiftTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchShiftTypesResponse, error)

	PutBatchShiftTypesWithResponse(ctx context.Context, body PutBatchShiftTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchShiftTypesResponse, error)

	// PostBatchStaff request with any body
	PostBatchStaffWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchStaffResponse, error)

	PostBatchStaffWithResponse(ctx context.Context, body PostBatchStaffJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchStaffResponse, error)

	// PutBatchStaff request with any body
	PutBatchStaffWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchStaffResponse, error)

	PutBatchStaffWithResponse(ctx context.Context, body PutBatchStaffJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchStaffResponse, error)

	// PostBatchStaffAvailabilityStatuses request with any body
	PostBatchStaffAvailabilityStatusesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchStaffAvailabilityStatusesResponse, error)

	PostBatchStaffAvailabilityStatusesWithResponse(ctx context.Context, body PostBatchStaffAvailabilityStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchStaffAvailabilityStatusesResponse, error)

	// PutBatchStaffAvailabilityStatuses request with any body
	PutBatchStaffAvailabilityStatusesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchStaffAvailabilityStatusesResponse, error)

	PutBatchStaffAvailabilityStatusesWithResponse(ctx context.Context, body PutBatchStaffAvailabilityStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchStaffAvailabilityStatusesResponse, error)

	// PostBatchStaffRoles request with any body
	PostBatchStaffRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchStaffRolesResponse, error)

	PostBatchStaffRolesWithResponse(ctx context.Context, body PostBatchStaffRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchStaffRolesResponse, error)

	// PutBatchStaffRoles request with any body
	PutBatchStaffRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchStaffRolesResponse, error)

	PutBatchStaffRolesWithResponse(ctx context.Context, body PutBatchStaffRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchStaffRolesResponse, error)

	// PostBatchStaffTypes request with any body
	PostBatchStaffTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchStaffTypesResponse, error)

	PostBatchStaffTypesWithResponse(ctx context.Context, body PostBatchStaffTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchStaffTypesResponse, error)

	// PutBatchStaffTypes request with any body
	PutBatchStaffTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchStaffTypesResponse, error)

	PutBatchStaffTypesWithResponse(ctx context.Context, body PutBatchStaffTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchStaffTypesResponse, error)

	// PostBatchStaffWithHistory request with any body
	PostBatchStaffWithHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchStaffWithHistoryResponse, error)

	PostBatchStaffWithHistoryWithResponse(ctx context.Context, body PostBatchStaffWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchStaffWithHistoryResponse, error)

	// PutBatchStaffWithHistory request with any body
	PutBatchStaffWithHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchStaffWithHistoryResponse, error)

	PutBatchStaffWithHistoryWithResponse(ctx context.Context, body PutBatchStaffWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchStaffWithHistoryResponse, error)

	// PostBatchTimekeeperGroups request with any body
	PostBatchTimekeeperGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchTimekeeperGroupsResponse, error)

	PostBatchTimekeeperGroupsWithResponse(ctx context.Context, body PostBatchTimekeeperGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchTimekeeperGroupsResponse, error)

	// PutBatchTimekeeperGroups request with any body
	PutBatchTimekeeperGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchTimekeeperGroupsResponse, error)

	PutBatchTimekeeperGroupsWithResponse(ctx context.Context, body PutBatchTimekeeperGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchTimekeeperGroupsResponse, error)

	// PostBatchTimekeepers request with any body
	PostBatchTimekeepersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchTimekeepersResponse, error)

	PostBatchTimekeepersWithResponse(ctx context.Context, body PostBatchTimekeepersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchTimekeepersResponse, error)

	// PostBatchUnits request with any body
	PostBatchUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchUnitsResponse, error)

	PostBatchUnitsWithResponse(ctx context.Context, body PostBatchUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchUnitsResponse, error)

	// PutBatchUnits request with any body
	PutBatchUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchUnitsResponse, error)

	PutBatchUnitsWithResponse(ctx context.Context, body PutBatchUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchUnitsResponse, error)

	// PostBatchVacationBalances request with any body
	PostBatchVacationBalancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchVacationBalancesResponse, error)

	PostBatchVacationBalancesWithResponse(ctx context.Context, body PostBatchVacationBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchVacationBalancesResponse, error)

	// PutBatchVacationBalances request with any body
	PutBatchVacationBalancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchVacationBalancesResponse, error)

	PutBatchVacationBalancesWithResponse(ctx context.Context, body PutBatchVacationBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchVacationBalancesResponse, error)

	// PostBatchVacationPeriods request with any body
	PostBatchVacationPeriodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchVacationPeriodsResponse, error)

	PostBatchVacationPeriodsWithResponse(ctx context.Context, body PostBatchVacationPeriodsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchVacationPeriodsResponse, error)

	// PutBatchVacationPeriods request with any body
	PutBatchVacationPeriodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchVacationPeriodsResponse, error)

	PutBatchVacationPeriodsWithResponse(ctx context.Context, body PutBatchVacationPeriodsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchVacationPeriodsResponse, error)

	// PostBatchVhi request with any body
	PostBatchVhiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchVhiResponse, error)

	PostBatchVhiWithResponse(ctx context.Context, body PostBatchVhiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchVhiResponse, error)

	// PutBatchVhi request with any body
	PutBatchVhiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchVhiResponse, error)

	PutBatchVhiWithResponse(ctx context.Context, body PutBatchVhiJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchVhiResponse, error)

	// PostBatchWorkWeekHours request with any body
	PostBatchWorkWeekHoursWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchWorkWeekHoursResponse, error)

	PostBatchWorkWeekHoursWithResponse(ctx context.Context, body PostBatchWorkWeekHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchWorkWeekHoursResponse, error)

	// PutBatchWorkWeekHours request with any body
	PutBatchWorkWeekHoursWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchWorkWeekHoursResponse, error)

	PutBatchWorkWeekHoursWithResponse(ctx context.Context, body PutBatchWorkWeekHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchWorkWeekHoursResponse, error)

	// PostBatchWorkingHours request with any body
	PostBatchWorkingHoursWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchWorkingHoursResponse, error)

	PostBatchWorkingHoursWithResponse(ctx context.Context, body PostBatchWorkingHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchWorkingHoursResponse, error)

	// PutBatchWorkingHours request with any body
	PutBatchWorkingHoursWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchWorkingHoursResponse, error)

	PutBatchWorkingHoursWithResponse(ctx context.Context, body PutBatchWorkingHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchWorkingHoursResponse, error)

	// GetCalendarDays request
	GetCalendarDaysWithResponse(ctx context.Context, params *GetCalendarDaysParams, reqEditors ...RequestEditorFn) (*GetCalendarDaysResponse, error)

	// GetCalendars request
	GetCalendarsWithResponse(ctx context.Context, params *GetCalendarsParams, reqEditors ...RequestEditorFn) (*GetCalendarsResponse, error)

	// GetCalendarsId request
	GetCalendarsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetCalendarsIdResponse, error)

	// GetClusters request
	GetClustersWithResponse(ctx context.Context, params *GetClustersParams, reqEditors ...RequestEditorFn) (*GetClustersResponse, error)

	// PostClusters request with any body
	PostClustersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClustersResponse, error)

	// GetClustersId request
	GetClustersIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetClustersIdResponse, error)

	// PutClustersId request with any body
	PutClustersIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClustersIdResponse, error)

	// GetComplexAssignments request
	GetComplexAssignmentsWithResponse(ctx context.Context, params *GetComplexAssignmentsParams, reqEditors ...RequestEditorFn) (*GetComplexAssignmentsResponse, error)

	// GetComplexAssignmentsV2 request
	GetComplexAssignmentsV2WithResponse(ctx context.Context, params *GetComplexAssignmentsV2Params, reqEditors ...RequestEditorFn) (*GetComplexAssignmentsV2Response, error)

	// GetComplexOrganizationStructure request
	GetComplexOrganizationStructureWithResponse(ctx context.Context, params *GetComplexOrganizationStructureParams, reqEditors ...RequestEditorFn) (*GetComplexOrganizationStructureResponse, error)

	// GetComplexPeopleId request
	GetComplexPeopleIdWithResponse(ctx context.Context, id UUIDPathObjectID, params *GetComplexPeopleIdParams, reqEditors ...RequestEditorFn) (*GetComplexPeopleIdResponse, error)

	// GetComplexUnitpath request
	GetComplexUnitpathWithResponse(ctx context.Context, params *GetComplexUnitpathParams, reqEditors ...RequestEditorFn) (*GetComplexUnitpathResponse, error)

	// GetComplexUnitsIdSubunits request
	GetComplexUnitsIdSubunitsWithResponse(ctx context.Context, id UUIDPathObjectID, params *GetComplexUnitsIdSubunitsParams, reqEditors ...RequestEditorFn) (*GetComplexUnitsIdSubunitsResponse, error)

	// GetContracts request
	GetContractsWithResponse(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*GetContractsResponse, error)

	// GetContractstatus request
	GetContractstatusWithResponse(ctx context.Context, params *GetContractstatusParams, reqEditors ...RequestEditorFn) (*GetContractstatusResponse, error)

	// PostContractstatus request with any body
	PostContractstatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContractstatusResponse, error)

	PostContractstatusWithResponse(ctx context.Context, body PostContractstatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContractstatusResponse, error)

	// GetContractstatusId request
	GetContractstatusIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetContractstatusIdResponse, error)

	// PutContractstatusId request with any body
	PutContractstatusIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContractstatusIdResponse, error)

	PutContractstatusIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutContractstatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContractstatusIdResponse, error)

	// GetContracttypes request
	GetContracttypesWithResponse(ctx context.Context, params *GetContracttypesParams, reqEditors ...RequestEditorFn) (*GetContracttypesResponse, error)

	// PostContracttypes request with any body
	PostContracttypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContracttypesResponse, error)

	PostContracttypesWithResponse(ctx context.Context, body PostContracttypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContracttypesResponse, error)

	// GetContracttypesId request
	GetContracttypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetContracttypesIdResponse, error)

	// PutContracttypesId request with any body
	PutContracttypesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContracttypesIdResponse, error)

	PutContracttypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutContracttypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContracttypesIdResponse, error)

	// GetCostcenters request
	GetCostcentersWithResponse(ctx context.Context, params *GetCostcentersParams, reqEditors ...RequestEditorFn) (*GetCostcentersResponse, error)

	// PostCostcenters request with any body
	PostCostcentersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCostcentersResponse, error)

	PostCostcentersWithResponse(ctx context.Context, body PostCostcentersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCostcentersResponse, error)

	// GetCostcentersId request
	GetCostcentersIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetCostcentersIdResponse, error)

	// PutCostcentersId request with any body
	PutCostcentersIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCostcentersIdResponse, error)

	PutCostcentersIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutCostcentersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCostcentersIdResponse, error)

	// GetDgphDonors request
	GetDgphDonorsWithResponse(ctx context.Context, params *GetDgphDonorsParams, reqEditors ...RequestEditorFn) (*GetDgphDonorsResponse, error)

	// GetDgphDonorsId request
	GetDgphDonorsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetDgphDonorsIdResponse, error)

	// GetDisabilityCategories request
	GetDisabilityCategoriesWithResponse(ctx context.Context, params *GetDisabilityCategoriesParams, reqEditors ...RequestEditorFn) (*GetDisabilityCategoriesResponse, error)

	// GetDistWork request
	GetDistWorkWithResponse(ctx context.Context, params *GetDistWorkParams, reqEditors ...RequestEditorFn) (*GetDistWorkResponse, error)

	// GetDistWorkId request
	GetDistWorkIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetDistWorkIdResponse, error)

	// GetDocuments request
	GetDocumentsWithResponse(ctx context.Context, params *GetDocumentsParams, reqEditors ...RequestEditorFn) (*GetDocumentsResponse, error)

	// GetEarningPolicies request
	GetEarningPoliciesWithResponse(ctx context.Context, params *GetEarningPoliciesParams, reqEditors ...RequestEditorFn) (*GetEarningPoliciesResponse, error)

	// GetEmployeeRoles request
	GetEmployeeRolesWithResponse(ctx context.Context, params *GetEmployeeRolesParams, reqEditors ...RequestEditorFn) (*GetEmployeeRolesResponse, error)

	// PostEmployeeRoles request with any body
	PostEmployeeRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmployeeRolesResponse, error)

	// GetEmployeeRolesId request
	GetEmployeeRolesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetEmployeeRolesIdResponse, error)

	// PutEmployeeRolesId request with any body
	PutEmployeeRolesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEmployeeRolesIdResponse, error)

	// GetEmployees request
	GetEmployeesWithResponse(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*GetEmployeesResponse, error)

	// GetEmployeesId request
	GetEmployeesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetEmployeesIdResponse, error)

	// GetEmployeetypes request
	GetEmployeetypesWithResponse(ctx context.Context, params *GetEmployeetypesParams, reqEditors ...RequestEditorFn) (*GetEmployeetypesResponse, error)

	// PostEmployeetypes request with any body
	PostEmployeetypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmployeetypesResponse, error)

	PostEmployeetypesWithResponse(ctx context.Context, body PostEmployeetypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmployeetypesResponse, error)

	// GetEmployeetypesId request
	GetEmployeetypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetEmployeetypesIdResponse, error)

	// PutEmployeetypesId request with any body
	PutEmployeetypesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEmployeetypesIdResponse, error)

	PutEmployeetypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutEmployeetypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEmployeetypesIdResponse, error)

	// GetEvents request
	GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error)

	// GetEventsId request
	GetEventsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetEventsIdResponse, error)

	// GetFunctionalBlocks request
	GetFunctionalBlocksWithResponse(ctx context.Context, params *GetFunctionalBlocksParams, reqEditors ...RequestEditorFn) (*GetFunctionalBlocksResponse, error)

	// PostFunctionalBlocks request with any body
	PostFunctionalBlocksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFunctionalBlocksResponse, error)

	// GetFunctionalBlocksId request
	GetFunctionalBlocksIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetFunctionalBlocksIdResponse, error)

	// PutFunctionalBlocksId request with any body
	PutFunctionalBlocksIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFunctionalBlocksIdResponse, error)

	// GetGrades request
	GetGradesWithResponse(ctx context.Context, params *GetGradesParams, reqEditors ...RequestEditorFn) (*GetGradesResponse, error)

	// PostGrades request with any body
	PostGradesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGradesResponse, error)

	PostGradesWithResponse(ctx context.Context, body PostGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGradesResponse, error)

	// GetGradesId request
	GetGradesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetGradesIdResponse, error)

	// PutGradesId request with any body
	PutGradesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGradesIdResponse, error)

	PutGradesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutGradesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGradesIdResponse, error)

	// GetHierarchies request
	GetHierarchiesWithResponse(ctx context.Context, params *GetHierarchiesParams, reqEditors ...RequestEditorFn) (*GetHierarchiesResponse, error)

	// PostHierarchies request with any body
	PostHierarchiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHierarchiesResponse, error)

	PostHierarchiesWithResponse(ctx context.Context, body PostHierarchiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHierarchiesResponse, error)

	// GetHierarchiesId request
	GetHierarchiesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetHierarchiesIdResponse, error)

	// PutHierarchiesId request with any body
	PutHierarchiesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutHierarchiesIdResponse, error)

	PutHierarchiesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutHierarchiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutHierarchiesIdResponse, error)

	// GetHierarchyLinks request
	GetHierarchyLinksWithResponse(ctx context.Context, params *GetHierarchyLinksParams, reqEditors ...RequestEditorFn) (*GetHierarchyLinksResponse, error)

	// PostHierarchyLinks request with any body
	PostHierarchyLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHierarchyLinksResponse, error)

	PostHierarchyLinksWithResponse(ctx context.Context, body PostHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHierarchyLinksResponse, error)

	// GetHierarchyLinksId request
	GetHierarchyLinksIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetHierarchyLinksIdResponse, error)

	// PutHierarchyLinksId request with any body
	PutHierarchyLinksIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutHierarchyLinksIdResponse, error)

	PutHierarchyLinksIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutHierarchyLinksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutHierarchyLinksIdResponse, error)

	// GetHourlyRate request
	GetHourlyRateWithResponse(ctx context.Context, params *GetHourlyRateParams, reqEditors ...RequestEditorFn) (*GetHourlyRateResponse, error)

	// GetLeavingReasons request
	GetLeavingReasonsWithResponse(ctx context.Context, params *GetLeavingReasonsParams, reqEditors ...RequestEditorFn) (*GetLeavingReasonsResponse, error)

	// GetLeavingReasonsId request
	GetLeavingReasonsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetLeavingReasonsIdResponse, error)

	// GetLocations request
	GetLocationsWithResponse(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*GetLocationsResponse, error)

	// GetLocationsId request
	GetLocationsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetLocationsIdResponse, error)

	// PutManualTriggerManagers request
	PutManualTriggerManagersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutManualTriggerManagersResponse, error)

	// GetOffices request
	GetOfficesWithResponse(ctx context.Context, params *GetOfficesParams, reqEditors ...RequestEditorFn) (*GetOfficesResponse, error)

	// GetOrganizations request
	GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error)

	// PostOrganizations request with any body
	PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	// GetOrganizationsId request
	GetOrganizationsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetOrganizationsIdResponse, error)

	// PutOrganizationsId request with any body
	PutOrganizationsIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsIdResponse, error)

	PutOrganizationsIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsIdResponse, error)

	// GetPaoBonusPaymentCategories request
	GetPaoBonusPaymentCategoriesWithResponse(ctx context.Context, params *GetPaoBonusPaymentCategoriesParams, reqEditors ...RequestEditorFn) (*GetPaoBonusPaymentCategoriesResponse, error)

	// GetPaoBonusPaymentCategoriesId request
	GetPaoBonusPaymentCategoriesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPaoBonusPaymentCategoriesIdResponse, error)

	// GetPayTypes request
	GetPayTypesWithResponse(ctx context.Context, params *GetPayTypesParams, reqEditors ...RequestEditorFn) (*GetPayTypesResponse, error)

	// GetPeople request
	GetPeopleWithResponse(ctx context.Context, params *GetPeopleParams, reqEditors ...RequestEditorFn) (*GetPeopleResponse, error)

	// GetPeopleId request
	GetPeopleIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPeopleIdResponse, error)

	// GetPeopleIdDocuments request
	GetPeopleIdDocumentsWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPeopleIdDocumentsResponse, error)

	// GetPeopleIdOrigin request
	GetPeopleIdOriginWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPeopleIdOriginResponse, error)

	// GetPersonEducation request
	GetPersonEducationWithResponse(ctx context.Context, params *GetPersonEducationParams, reqEditors ...RequestEditorFn) (*GetPersonEducationResponse, error)

	// GetPersonalSchedules request
	GetPersonalSchedulesWithResponse(ctx context.Context, params *GetPersonalSchedulesParams, reqEditors ...RequestEditorFn) (*GetPersonalSchedulesResponse, error)

	// GetPositionCategories request
	GetPositionCategoriesWithResponse(ctx context.Context, params *GetPositionCategoriesParams, reqEditors ...RequestEditorFn) (*GetPositionCategoriesResponse, error)

	// GetPositionCategoriesId request
	GetPositionCategoriesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPositionCategoriesIdResponse, error)

	// GetPositions request
	GetPositionsWithResponse(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*GetPositionsResponse, error)

	// PostPositions request with any body
	PostPositionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPositionsResponse, error)

	PostPositionsWithResponse(ctx context.Context, body PostPositionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPositionsResponse, error)

	// GetPositionsId request
	GetPositionsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPositionsIdResponse, error)

	// PutPositionsId request with any body
	PutPositionsIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPositionsIdResponse, error)

	PutPositionsIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutPositionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPositionsIdResponse, error)

	// GetProductEntities request
	GetProductEntitiesWithResponse(ctx context.Context, params *GetProductEntitiesParams, reqEditors ...RequestEditorFn) (*GetProductEntitiesResponse, error)

	// GetProductEntityLinks request
	GetProductEntityLinksWithResponse(ctx context.Context, params *GetProductEntityLinksParams, reqEditors ...RequestEditorFn) (*GetProductEntityLinksResponse, error)

	// GetProductStatuses request
	GetProductStatusesWithResponse(ctx context.Context, params *GetProductStatusesParams, reqEditors ...RequestEditorFn) (*GetProductStatusesResponse, error)

	// GetProducts request
	GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	// GetProductsId request
	GetProductsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetProductsIdResponse, error)

	// GetSalaries request
	GetSalariesWithResponse(ctx context.Context, params *GetSalariesParams, reqEditors ...RequestEditorFn) (*GetSalariesResponse, error)

	// GetSalariesId request
	GetSalariesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetSalariesIdResponse, error)

	// GetScheduleDays request
	GetScheduleDaysWithResponse(ctx context.Context, params *GetScheduleDaysParams, reqEditors ...RequestEditorFn) (*GetScheduleDaysResponse, error)

	// GetSchedules request
	GetSchedulesWithResponse(ctx context.Context, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*GetSchedulesResponse, error)

	// GetShiftTypes request
	GetShiftTypesWithResponse(ctx context.Context, params *GetShiftTypesParams, reqEditors ...RequestEditorFn) (*GetShiftTypesResponse, error)

	// GetStaff request
	GetStaffWithResponse(ctx context.Context, params *GetStaffParams, reqEditors ...RequestEditorFn) (*GetStaffResponse, error)

	// GetStaffAvailabilityStatuses request
	GetStaffAvailabilityStatusesWithResponse(ctx context.Context, params *GetStaffAvailabilityStatusesParams, reqEditors ...RequestEditorFn) (*GetStaffAvailabilityStatusesResponse, error)

	// GetStaffAvailabilityStatusesId request
	GetStaffAvailabilityStatusesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetStaffAvailabilityStatusesIdResponse, error)

	// GetStaffRoles request
	GetStaffRolesWithResponse(ctx context.Context, params *GetStaffRolesParams, reqEditors ...RequestEditorFn) (*GetStaffRolesResponse, error)

	// GetStaffRolesId request
	GetStaffRolesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetStaffRolesIdResponse, error)

	// GetStaffTypes request
	GetStaffTypesWithResponse(ctx context.Context, params *GetStaffTypesParams, reqEditors ...RequestEditorFn) (*GetStaffTypesResponse, error)

	// GetStaffTypesId request
	GetStaffTypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetStaffTypesIdResponse, error)

	// GetSubunits request
	GetSubunitsWithResponse(ctx context.Context, params *GetSubunitsParams, reqEditors ...RequestEditorFn) (*GetSubunitsResponse, error)

	// GetTaskId request
	GetTaskIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetTaskIdResponse, error)

	// PutTaskId request with any body
	PutTaskIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaskIdResponse, error)

	PutTaskIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaskIdResponse, error)

	// GetTimekeeperGroups request
	GetTimekeeperGroupsWithResponse(ctx context.Context, params *GetTimekeeperGroupsParams, reqEditors ...RequestEditorFn) (*GetTimekeeperGroupsResponse, error)

	// GetTimekeeperGroupsId request
	GetTimekeeperGroupsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetTimekeeperGroupsIdResponse, error)

	// GetTimekeepers request
	GetTimekeepersWithResponse(ctx context.Context, params *GetTimekeepersParams, reqEditors ...RequestEditorFn) (*GetTimekeepersResponse, error)

	// GetUnits request
	GetUnitsWithResponse(ctx context.Context, params *GetUnitsParams, reqEditors ...RequestEditorFn) (*GetUnitsResponse, error)

	// GetUnitsWithoutHierarchies request
	GetUnitsWithoutHierarchiesWithResponse(ctx context.Context, params *GetUnitsWithoutHierarchiesParams, reqEditors ...RequestEditorFn) (*GetUnitsWithoutHierarchiesResponse, error)

	// GetUnitsId request
	GetUnitsIdWithResponse(ctx context.Context, id UUIDPathObjectID, params *GetUnitsIdParams, reqEditors ...RequestEditorFn) (*GetUnitsIdResponse, error)

	// GetUnittypes request
	GetUnittypesWithResponse(ctx context.Context, params *GetUnittypesParams, reqEditors ...RequestEditorFn) (*GetUnittypesResponse, error)

	// PostUnittypes request with any body
	PostUnittypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnittypesResponse, error)

	PostUnittypesWithResponse(ctx context.Context, body PostUnittypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnittypesResponse, error)

	// GetUnittypesId request
	GetUnittypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetUnittypesIdResponse, error)

	// PutUnittypesId request with any body
	PutUnittypesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUnittypesIdResponse, error)

	PutUnittypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutUnittypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUnittypesIdResponse, error)

	// GetVacationBalances request
	GetVacationBalancesWithResponse(ctx context.Context, params *GetVacationBalancesParams, reqEditors ...RequestEditorFn) (*GetVacationBalancesResponse, error)

	// GetVacationPeriods request
	GetVacationPeriodsWithResponse(ctx context.Context, params *GetVacationPeriodsParams, reqEditors ...RequestEditorFn) (*GetVacationPeriodsResponse, error)

	// GetVhi request
	GetVhiWithResponse(ctx context.Context, params *GetVhiParams, reqEditors ...RequestEditorFn) (*GetVhiResponse, error)

	// GetVhiId request
	GetVhiIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetVhiIdResponse, error)

	// GetWorkingHours request
	GetWorkingHoursWithResponse(ctx context.Context, params *GetWorkingHoursParams, reqEditors ...RequestEditorFn) (*GetWorkingHoursResponse, error)
}

type GetAbsenceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AbsenceType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAbsenceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAbsenceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAbsenceTypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AbsenceType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAbsenceTypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAbsenceTypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAbsencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Absence
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAbsencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAbsencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAbsencesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Absence
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAbsencesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAbsencesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllowancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Allowance
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAllowancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllowancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllowancesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Allowance
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAllowancesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllowancesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Applicant
}

// Status returns HTTPResponse.Status
func (r GetApplicantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApplicantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Task
}

// Status returns HTTPResponse.Status
func (r PostApplicantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApplicantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicantsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Applicant
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetApplicantsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicantsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssignmentcategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssignmentCategory
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAssignmentcategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssignmentcategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAssignmentcategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostAssignmentcategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAssignmentcategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssignmentcategoriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssignmentCategory
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAssignmentcategoriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssignmentcategoriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAssignmentcategoriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssignmentCategory
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutAssignmentcategoriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAssignmentcategoriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Assignment
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssignmentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Assignment
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAssignmentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssignmentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssignmentstatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssignmentStatus
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAssignmentstatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssignmentstatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAssignmentstatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostAssignmentstatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAssignmentstatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssignmentstatusIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssignmentStatus
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAssignmentstatusIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssignmentstatusIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAssignmentstatusIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssignmentStatus
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutAssignmentstatusIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAssignmentstatusIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssignmenttypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssignmentType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAssignmenttypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssignmenttypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAssignmenttypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostAssignmenttypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAssignmenttypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssignmenttypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssignmentType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetAssignmenttypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssignmenttypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAssignmenttypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssignmentType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutAssignmenttypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAssignmenttypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackBonusPaymentCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BackBonusPaymentCategory
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetBackBonusPaymentCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackBonusPaymentCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackBonusPaymentCategoriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackBonusPaymentCategory
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetBackBonusPaymentCategoriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackBonusPaymentCategoriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBalanceUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceUnit
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetBalanceUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBalanceUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBalanceUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBalanceUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBalanceUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBalanceUnitsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BalanceUnit
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetBalanceUnitsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBalanceUnitsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBalanceUnitsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BalanceUnit
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBalanceUnitsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBalanceUnitsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBanksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Bank
}

// Status returns HTTPResponse.Status
func (r GetBanksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBanksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBanksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bank
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetBanksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBanksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchAbsenceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchAbsenceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchAbsenceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchAbsenceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchAbsenceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchAbsenceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchAbsencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchAbsencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchAbsencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchAbsencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchAbsencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchAbsencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchAllowancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchAllowancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchAllowancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchAllowancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchAllowancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchAllowancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchApplicantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchApplicantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchApplicantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchApplicantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchApplicantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchApplicantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchAssignmentsWithHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchAssignmentsWithHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchAssignmentsWithHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchAssignmentsWithHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchAssignmentsWithHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchAssignmentsWithHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchBackBonusPaymentCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchBackBonusPaymentCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchBackBonusPaymentCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchBackBonusPaymentCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchBackBonusPaymentCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchBackBonusPaymentCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchBanksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchBanksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchBanksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchBanksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchBanksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchBanksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchCalendarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchCalendarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchCalendarDaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchCalendarDaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchCalendarDaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchCalendarDaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchCalendarDaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchCalendarDaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchDgphDonorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchDgphDonorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchDgphDonorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchDgphDonorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchDgphDonorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchDgphDonorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchDisabilityCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchDisabilityCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchDisabilityCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchDisabilityCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchDisabilityCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchDisabilityCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchDistWorkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchDistWorkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchDistWorkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchDistWorkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchDistWorkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchDistWorkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchEarningPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchEarningPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchEarningPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchEarningPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchEarningPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchEarningPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchEmployeePersonalDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchEmployeePersonalDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchEmployeePersonalDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchEmployeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchEmployeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchEmployeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchEmployeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchEmployeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchEmployeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchGradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchGradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchGradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchGradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchGradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchGradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchHierarchyLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchHierarchyLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchHierarchyLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchHierarchyLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchHierarchyLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchHierarchyLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchHourlyRateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchHourlyRateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchHourlyRateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchHourlyRateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchHourlyRateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchHourlyRateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchLeavingReasonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchLeavingReasonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchLeavingReasonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchLeavingReasonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchLeavingReasonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchLeavingReasonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchOfficesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchOfficesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchOfficesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchOfficesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchOfficesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchOfficesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchPaoBonusPaymentCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchPaoBonusPaymentCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchPaoBonusPaymentCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchPaoBonusPaymentCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchPaoBonusPaymentCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchPaoBonusPaymentCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchPayTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchPayTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchPayTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchPayTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchPayTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchPayTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchPeopleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchPeopleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchPeopleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchPeopleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchPeopleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchPeopleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchPersonEducationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchPersonEducationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchPersonEducationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchPersonEducationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchPersonEducationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchPersonEducationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchPersonMilitaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchPersonMilitaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchPersonMilitaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchPersonPictureIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchPersonPictureIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchPersonPictureIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchPersonalSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchPersonalSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchPersonalSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchPersonalSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchPersonalSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchPersonalSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchPositionCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchPositionCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchPositionCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchPositionCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchPositionCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchPositionCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchProductEntitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchProductEntitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchProductEntitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchProductEntitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchProductEntitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchProductEntitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchProductEntityLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchProductEntityLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchProductEntityLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchProductEntityLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchProductEntityLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchProductEntityLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchProductStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchProductStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchProductStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchProductStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchProductStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchProductStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchSalariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchSalariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchSalariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchSalariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchSalariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchSalariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchScheduleDaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchScheduleDaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchScheduleDaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchScheduleDaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchScheduleDaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchScheduleDaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchShiftTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchShiftTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchShiftTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchShiftTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchShiftTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchShiftTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchStaffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchStaffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchStaffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchStaffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchStaffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchStaffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchStaffAvailabilityStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchStaffAvailabilityStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchStaffAvailabilityStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchStaffAvailabilityStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchStaffAvailabilityStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchStaffAvailabilityStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchStaffRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchStaffRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchStaffRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchStaffRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchStaffRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchStaffRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchStaffTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchStaffTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchStaffTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchStaffTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchStaffTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchStaffTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchStaffWithHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchStaffWithHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchStaffWithHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchStaffWithHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchStaffWithHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchStaffWithHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchTimekeeperGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchTimekeeperGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchTimekeeperGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchTimekeeperGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchTimekeeperGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchTimekeeperGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchTimekeepersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchTimekeepersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchTimekeepersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchVacationBalancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchVacationBalancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchVacationBalancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchVacationBalancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchVacationBalancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchVacationBalancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchVacationPeriodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchVacationPeriodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchVacationPeriodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchVacationPeriodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchVacationPeriodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchVacationPeriodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchVhiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchVhiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchVhiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchVhiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchVhiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchVhiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchWorkWeekHoursResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchWorkWeekHoursResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchWorkWeekHoursResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchWorkWeekHoursResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchWorkWeekHoursResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchWorkWeekHoursResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBatchWorkingHoursResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BatchCreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostBatchWorkingHoursResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBatchWorkingHoursResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBatchWorkingHoursResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutBatchWorkingHoursResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBatchWorkingHoursResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCalendarDaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CalendarDay
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetCalendarDaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCalendarDaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCalendarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Calendar
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetCalendarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCalendarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCalendarsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Calendar
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetCalendarsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCalendarsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Cluster
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClustersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetClustersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClustersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutClustersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClustersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComplexAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ComplexAssignment
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetComplexAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComplexAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComplexAssignmentsV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ComplexAssignmentV2
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetComplexAssignmentsV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComplexAssignmentsV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComplexOrganizationStructureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationStructure
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetComplexOrganizationStructureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComplexOrganizationStructureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComplexPeopleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullPersonProfile
}

// Status returns HTTPResponse.Status
func (r GetComplexPeopleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComplexPeopleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComplexUnitpathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UnitPath
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetComplexUnitpathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComplexUnitpathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComplexUnitsIdSubunitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullUnit
}

// Status returns HTTPResponse.Status
func (r GetComplexUnitsIdSubunitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComplexUnitsIdSubunitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Contract
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractstatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ContractStatus
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetContractstatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractstatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContractstatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostContractstatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContractstatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractstatusIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractStatus
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetContractstatusIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractstatusIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutContractstatusIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractStatus
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutContractstatusIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutContractstatusIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContracttypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ContractType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetContracttypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContracttypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContracttypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostContracttypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContracttypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContracttypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetContracttypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContracttypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutContracttypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutContracttypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutContracttypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCostcentersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CostCenter
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetCostcentersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCostcentersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCostcentersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostCostcentersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCostcentersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCostcentersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostCenter
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetCostcentersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCostcentersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCostcentersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostCenter
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutCostcentersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCostcentersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDgphDonorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DGPHDonor
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetDgphDonorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDgphDonorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDgphDonorsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DGPHDonor
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetDgphDonorsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDgphDonorsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDisabilityCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DisabilityCategory
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetDisabilityCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDisabilityCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDistWorkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DistWork
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetDistWorkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDistWorkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDistWorkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistWork
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetDistWorkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDistWorkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Documents
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEarningPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EarningPolicy
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetEarningPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEarningPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeeRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EmployeeRole
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetEmployeeRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeeRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmployeeRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmployeeRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmployeeRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeeRolesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmployeeRole
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetEmployeeRolesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeeRolesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutEmployeeRolesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutEmployeeRolesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutEmployeeRolesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Employee
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetEmployeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Employee
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetEmployeesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeetypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EmployeeType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetEmployeetypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeetypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmployeetypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostEmployeetypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmployeetypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeetypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmployeeType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetEmployeetypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeetypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutEmployeetypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmployeeType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutEmployeetypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutEmployeetypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Event
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetEventsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalBlocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FunctionalBlock
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetFunctionalBlocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalBlocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFunctionalBlocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostFunctionalBlocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFunctionalBlocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionalBlocksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FunctionalBlock
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetFunctionalBlocksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionalBlocksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFunctionalBlocksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FunctionalBlock
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutFunctionalBlocksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFunctionalBlocksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Grade
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetGradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostGradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGradesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Grade
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetGradesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGradesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGradesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Grade
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutGradesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGradesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHierarchiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Hierarchy
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetHierarchiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHierarchiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHierarchiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostHierarchiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHierarchiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHierarchiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Hierarchy
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetHierarchiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHierarchiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutHierarchiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Hierarchy
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutHierarchiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutHierarchiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHierarchyLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HierarchyLink
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetHierarchyLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHierarchyLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHierarchyLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostHierarchyLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHierarchyLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHierarchyLinksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HierarchyLink
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetHierarchyLinksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHierarchyLinksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutHierarchyLinksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HierarchyLink
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutHierarchyLinksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutHierarchyLinksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHourlyRateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HourlyRate
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetHourlyRateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHourlyRateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeavingReasonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LeavingReason
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetLeavingReasonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeavingReasonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeavingReasonsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LeavingReason
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetLeavingReasonsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeavingReasonsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Location
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Location
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetLocationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutManualTriggerManagersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutManualTriggerManagersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutManualTriggerManagersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOfficesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Offices
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetOfficesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOfficesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Organization
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaoBonusPaymentCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PAOBonusPaymentCategory
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPaoBonusPaymentCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaoBonusPaymentCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaoBonusPaymentCategoriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PAOBonusPaymentCategory
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPaoBonusPaymentCategoriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaoBonusPaymentCategoriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPayTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PayType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPayTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPayTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeopleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Person
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPeopleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeopleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeopleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Person
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPeopleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeopleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeopleIdDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Documents
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPeopleIdDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeopleIdDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeopleIdOriginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Person
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPeopleIdOriginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeopleIdOriginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersonEducationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PersonEducation
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPersonEducationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonEducationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersonalSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PersonalSchedule
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPersonalSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonalSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPositionCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PositionCategory
}

// Status returns HTTPResponse.Status
func (r GetPositionCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPositionCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPositionCategoriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PositionCategory
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPositionCategoriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPositionCategoriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Position
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPositionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Position
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetPositionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPositionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPositionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Position
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutPositionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPositionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductEntitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProductEntity
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetProductEntitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductEntitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductEntityLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProductEntityLink
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetProductEntityLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductEntityLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProductStatus
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetProductStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Product
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetProductsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSalariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Salary
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetSalariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSalariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSalariesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Salary
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetSalariesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSalariesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduleDaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ScheduleDay
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetScheduleDaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduleDaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Schedule
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShiftTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ShiftType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetShiftTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShiftTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StaffUnit
}

// Status returns HTTPResponse.Status
func (r GetStaffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaffAvailabilityStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StaffAvailabilityStatus
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetStaffAvailabilityStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaffAvailabilityStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaffAvailabilityStatusesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StaffAvailabilityStatus
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetStaffAvailabilityStatusesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaffAvailabilityStatusesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaffRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StaffRoles
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetStaffRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaffRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaffRolesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StaffRoles
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetStaffRolesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaffRolesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaffTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StaffType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetStaffTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaffTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaffTypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StaffType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetStaffTypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaffTypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubunitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Unit
}

// Status returns HTTPResponse.Status
func (r GetSubunitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubunitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskStatusRespBody
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Сообщение
		Message string `json:"message"`
	}
	JSONDefault *APIError
}

// Status returns HTTPResponse.Status
func (r PutTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimekeeperGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TimekeeperGroup
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetTimekeeperGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimekeeperGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimekeeperGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimekeeperGroup
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetTimekeeperGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimekeeperGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimekeepersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Timekeeper
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetTimekeepersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimekeepersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Unit
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnitsWithoutHierarchiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Unit
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetUnitsWithoutHierarchiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnitsWithoutHierarchiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnitsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Unit
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetUnitsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnitsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnittypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UnitType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetUnittypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnittypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUnittypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatedItem
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PostUnittypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUnittypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnittypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UnitType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetUnittypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnittypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUnittypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UnitType
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r PutUnittypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUnittypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVacationBalancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VacationBalance
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetVacationBalancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVacationBalancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVacationPeriodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VacationPeriod
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetVacationPeriodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVacationPeriodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVhiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VHI
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetVhiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVhiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVhiIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VHI
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetVhiIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVhiIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkingHoursResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkingHours
	JSONDefault  *APIError
}

// Status returns HTTPResponse.Status
func (r GetWorkingHoursResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkingHoursResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAbsenceTypesWithResponse request returning *GetAbsenceTypesResponse
func (c *ClientWithResponses) GetAbsenceTypesWithResponse(ctx context.Context, params *GetAbsenceTypesParams, reqEditors ...RequestEditorFn) (*GetAbsenceTypesResponse, error) {
	rsp, err := c.GetAbsenceTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAbsenceTypesResponse(rsp)
}

// GetAbsenceTypesIdWithResponse request returning *GetAbsenceTypesIdResponse
func (c *ClientWithResponses) GetAbsenceTypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAbsenceTypesIdResponse, error) {
	rsp, err := c.GetAbsenceTypesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAbsenceTypesIdResponse(rsp)
}

// GetAbsencesWithResponse request returning *GetAbsencesResponse
func (c *ClientWithResponses) GetAbsencesWithResponse(ctx context.Context, params *GetAbsencesParams, reqEditors ...RequestEditorFn) (*GetAbsencesResponse, error) {
	rsp, err := c.GetAbsences(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAbsencesResponse(rsp)
}

// GetAbsencesIdWithResponse request returning *GetAbsencesIdResponse
func (c *ClientWithResponses) GetAbsencesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAbsencesIdResponse, error) {
	rsp, err := c.GetAbsencesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAbsencesIdResponse(rsp)
}

// GetAllowancesWithResponse request returning *GetAllowancesResponse
func (c *ClientWithResponses) GetAllowancesWithResponse(ctx context.Context, params *GetAllowancesParams, reqEditors ...RequestEditorFn) (*GetAllowancesResponse, error) {
	rsp, err := c.GetAllowances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllowancesResponse(rsp)
}

// GetAllowancesIdWithResponse request returning *GetAllowancesIdResponse
func (c *ClientWithResponses) GetAllowancesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAllowancesIdResponse, error) {
	rsp, err := c.GetAllowancesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllowancesIdResponse(rsp)
}

// GetApplicantsWithResponse request returning *GetApplicantsResponse
func (c *ClientWithResponses) GetApplicantsWithResponse(ctx context.Context, params *GetApplicantsParams, reqEditors ...RequestEditorFn) (*GetApplicantsResponse, error) {
	rsp, err := c.GetApplicants(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicantsResponse(rsp)
}

// PostApplicantsWithBodyWithResponse request with arbitrary body returning *PostApplicantsResponse
func (c *ClientWithResponses) PostApplicantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicantsResponse, error) {
	rsp, err := c.PostApplicantsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicantsResponse(rsp)
}

func (c *ClientWithResponses) PostApplicantsWithResponse(ctx context.Context, body PostApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicantsResponse, error) {
	rsp, err := c.PostApplicants(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicantsResponse(rsp)
}

// GetApplicantsIdWithResponse request returning *GetApplicantsIdResponse
func (c *ClientWithResponses) GetApplicantsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetApplicantsIdResponse, error) {
	rsp, err := c.GetApplicantsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicantsIdResponse(rsp)
}

// GetAssignmentcategoriesWithResponse request returning *GetAssignmentcategoriesResponse
func (c *ClientWithResponses) GetAssignmentcategoriesWithResponse(ctx context.Context, params *GetAssignmentcategoriesParams, reqEditors ...RequestEditorFn) (*GetAssignmentcategoriesResponse, error) {
	rsp, err := c.GetAssignmentcategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssignmentcategoriesResponse(rsp)
}

// PostAssignmentcategoriesWithBodyWithResponse request with arbitrary body returning *PostAssignmentcategoriesResponse
func (c *ClientWithResponses) PostAssignmentcategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssignmentcategoriesResponse, error) {
	rsp, err := c.PostAssignmentcategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAssignmentcategoriesResponse(rsp)
}

func (c *ClientWithResponses) PostAssignmentcategoriesWithResponse(ctx context.Context, body PostAssignmentcategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAssignmentcategoriesResponse, error) {
	rsp, err := c.PostAssignmentcategories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAssignmentcategoriesResponse(rsp)
}

// GetAssignmentcategoriesIdWithResponse request returning *GetAssignmentcategoriesIdResponse
func (c *ClientWithResponses) GetAssignmentcategoriesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAssignmentcategoriesIdResponse, error) {
	rsp, err := c.GetAssignmentcategoriesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssignmentcategoriesIdResponse(rsp)
}

// PutAssignmentcategoriesIdWithBodyWithResponse request with arbitrary body returning *PutAssignmentcategoriesIdResponse
func (c *ClientWithResponses) PutAssignmentcategoriesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssignmentcategoriesIdResponse, error) {
	rsp, err := c.PutAssignmentcategoriesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssignmentcategoriesIdResponse(rsp)
}

func (c *ClientWithResponses) PutAssignmentcategoriesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutAssignmentcategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssignmentcategoriesIdResponse, error) {
	rsp, err := c.PutAssignmentcategoriesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssignmentcategoriesIdResponse(rsp)
}

// GetAssignmentsWithResponse request returning *GetAssignmentsResponse
func (c *ClientWithResponses) GetAssignmentsWithResponse(ctx context.Context, params *GetAssignmentsParams, reqEditors ...RequestEditorFn) (*GetAssignmentsResponse, error) {
	rsp, err := c.GetAssignments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssignmentsResponse(rsp)
}

// GetAssignmentsIdWithResponse request returning *GetAssignmentsIdResponse
func (c *ClientWithResponses) GetAssignmentsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAssignmentsIdResponse, error) {
	rsp, err := c.GetAssignmentsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssignmentsIdResponse(rsp)
}

// GetAssignmentstatusWithResponse request returning *GetAssignmentstatusResponse
func (c *ClientWithResponses) GetAssignmentstatusWithResponse(ctx context.Context, params *GetAssignmentstatusParams, reqEditors ...RequestEditorFn) (*GetAssignmentstatusResponse, error) {
	rsp, err := c.GetAssignmentstatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssignmentstatusResponse(rsp)
}

// PostAssignmentstatusWithBodyWithResponse request with arbitrary body returning *PostAssignmentstatusResponse
func (c *ClientWithResponses) PostAssignmentstatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssignmentstatusResponse, error) {
	rsp, err := c.PostAssignmentstatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAssignmentstatusResponse(rsp)
}

func (c *ClientWithResponses) PostAssignmentstatusWithResponse(ctx context.Context, body PostAssignmentstatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAssignmentstatusResponse, error) {
	rsp, err := c.PostAssignmentstatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAssignmentstatusResponse(rsp)
}

// GetAssignmentstatusIdWithResponse request returning *GetAssignmentstatusIdResponse
func (c *ClientWithResponses) GetAssignmentstatusIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAssignmentstatusIdResponse, error) {
	rsp, err := c.GetAssignmentstatusId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssignmentstatusIdResponse(rsp)
}

// PutAssignmentstatusIdWithBodyWithResponse request with arbitrary body returning *PutAssignmentstatusIdResponse
func (c *ClientWithResponses) PutAssignmentstatusIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssignmentstatusIdResponse, error) {
	rsp, err := c.PutAssignmentstatusIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssignmentstatusIdResponse(rsp)
}

func (c *ClientWithResponses) PutAssignmentstatusIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutAssignmentstatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssignmentstatusIdResponse, error) {
	rsp, err := c.PutAssignmentstatusId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssignmentstatusIdResponse(rsp)
}

// GetAssignmenttypesWithResponse request returning *GetAssignmenttypesResponse
func (c *ClientWithResponses) GetAssignmenttypesWithResponse(ctx context.Context, params *GetAssignmenttypesParams, reqEditors ...RequestEditorFn) (*GetAssignmenttypesResponse, error) {
	rsp, err := c.GetAssignmenttypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssignmenttypesResponse(rsp)
}

// PostAssignmenttypesWithBodyWithResponse request with arbitrary body returning *PostAssignmenttypesResponse
func (c *ClientWithResponses) PostAssignmenttypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssignmenttypesResponse, error) {
	rsp, err := c.PostAssignmenttypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAssignmenttypesResponse(rsp)
}

func (c *ClientWithResponses) PostAssignmenttypesWithResponse(ctx context.Context, body PostAssignmenttypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAssignmenttypesResponse, error) {
	rsp, err := c.PostAssignmenttypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAssignmenttypesResponse(rsp)
}

// GetAssignmenttypesIdWithResponse request returning *GetAssignmenttypesIdResponse
func (c *ClientWithResponses) GetAssignmenttypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetAssignmenttypesIdResponse, error) {
	rsp, err := c.GetAssignmenttypesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssignmenttypesIdResponse(rsp)
}

// PutAssignmenttypesIdWithBodyWithResponse request with arbitrary body returning *PutAssignmenttypesIdResponse
func (c *ClientWithResponses) PutAssignmenttypesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAssignmenttypesIdResponse, error) {
	rsp, err := c.PutAssignmenttypesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssignmenttypesIdResponse(rsp)
}

func (c *ClientWithResponses) PutAssignmenttypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutAssignmenttypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAssignmenttypesIdResponse, error) {
	rsp, err := c.PutAssignmenttypesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAssignmenttypesIdResponse(rsp)
}

// GetBackBonusPaymentCategoriesWithResponse request returning *GetBackBonusPaymentCategoriesResponse
func (c *ClientWithResponses) GetBackBonusPaymentCategoriesWithResponse(ctx context.Context, params *GetBackBonusPaymentCategoriesParams, reqEditors ...RequestEditorFn) (*GetBackBonusPaymentCategoriesResponse, error) {
	rsp, err := c.GetBackBonusPaymentCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackBonusPaymentCategoriesResponse(rsp)
}

// GetBackBonusPaymentCategoriesIdWithResponse request returning *GetBackBonusPaymentCategoriesIdResponse
func (c *ClientWithResponses) GetBackBonusPaymentCategoriesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetBackBonusPaymentCategoriesIdResponse, error) {
	rsp, err := c.GetBackBonusPaymentCategoriesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackBonusPaymentCategoriesIdResponse(rsp)
}

// GetBalanceUnitsWithResponse request returning *GetBalanceUnitsResponse
func (c *ClientWithResponses) GetBalanceUnitsWithResponse(ctx context.Context, params *GetBalanceUnitsParams, reqEditors ...RequestEditorFn) (*GetBalanceUnitsResponse, error) {
	rsp, err := c.GetBalanceUnits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBalanceUnitsResponse(rsp)
}

// PostBalanceUnitsWithBodyWithResponse request with arbitrary body returning *PostBalanceUnitsResponse
func (c *ClientWithResponses) PostBalanceUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBalanceUnitsResponse, error) {
	rsp, err := c.PostBalanceUnitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBalanceUnitsResponse(rsp)
}

func (c *ClientWithResponses) PostBalanceUnitsWithResponse(ctx context.Context, body PostBalanceUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBalanceUnitsResponse, error) {
	rsp, err := c.PostBalanceUnits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBalanceUnitsResponse(rsp)
}

// GetBalanceUnitsIdWithResponse request returning *GetBalanceUnitsIdResponse
func (c *ClientWithResponses) GetBalanceUnitsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetBalanceUnitsIdResponse, error) {
	rsp, err := c.GetBalanceUnitsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBalanceUnitsIdResponse(rsp)
}

// PutBalanceUnitsIdWithBodyWithResponse request with arbitrary body returning *PutBalanceUnitsIdResponse
func (c *ClientWithResponses) PutBalanceUnitsIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBalanceUnitsIdResponse, error) {
	rsp, err := c.PutBalanceUnitsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBalanceUnitsIdResponse(rsp)
}

func (c *ClientWithResponses) PutBalanceUnitsIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutBalanceUnitsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBalanceUnitsIdResponse, error) {
	rsp, err := c.PutBalanceUnitsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBalanceUnitsIdResponse(rsp)
}

// GetBanksWithResponse request returning *GetBanksResponse
func (c *ClientWithResponses) GetBanksWithResponse(ctx context.Context, params *GetBanksParams, reqEditors ...RequestEditorFn) (*GetBanksResponse, error) {
	rsp, err := c.GetBanks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBanksResponse(rsp)
}

// GetBanksIdWithResponse request returning *GetBanksIdResponse
func (c *ClientWithResponses) GetBanksIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetBanksIdResponse, error) {
	rsp, err := c.GetBanksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBanksIdResponse(rsp)
}

// PostBatchAbsenceTypesWithBodyWithResponse request with arbitrary body returning *PostBatchAbsenceTypesResponse
func (c *ClientWithResponses) PostBatchAbsenceTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchAbsenceTypesResponse, error) {
	rsp, err := c.PostBatchAbsenceTypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchAbsenceTypesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchAbsenceTypesWithResponse(ctx context.Context, body PostBatchAbsenceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchAbsenceTypesResponse, error) {
	rsp, err := c.PostBatchAbsenceTypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchAbsenceTypesResponse(rsp)
}

// PutBatchAbsenceTypesWithBodyWithResponse request with arbitrary body returning *PutBatchAbsenceTypesResponse
func (c *ClientWithResponses) PutBatchAbsenceTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchAbsenceTypesResponse, error) {
	rsp, err := c.PutBatchAbsenceTypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchAbsenceTypesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchAbsenceTypesWithResponse(ctx context.Context, body PutBatchAbsenceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchAbsenceTypesResponse, error) {
	rsp, err := c.PutBatchAbsenceTypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchAbsenceTypesResponse(rsp)
}

// PostBatchAbsencesWithBodyWithResponse request with arbitrary body returning *PostBatchAbsencesResponse
func (c *ClientWithResponses) PostBatchAbsencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchAbsencesResponse, error) {
	rsp, err := c.PostBatchAbsencesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchAbsencesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchAbsencesWithResponse(ctx context.Context, body PostBatchAbsencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchAbsencesResponse, error) {
	rsp, err := c.PostBatchAbsences(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchAbsencesResponse(rsp)
}

// PutBatchAbsencesWithBodyWithResponse request with arbitrary body returning *PutBatchAbsencesResponse
func (c *ClientWithResponses) PutBatchAbsencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchAbsencesResponse, error) {
	rsp, err := c.PutBatchAbsencesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchAbsencesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchAbsencesWithResponse(ctx context.Context, body PutBatchAbsencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchAbsencesResponse, error) {
	rsp, err := c.PutBatchAbsences(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchAbsencesResponse(rsp)
}

// PostBatchAllowancesWithBodyWithResponse request with arbitrary body returning *PostBatchAllowancesResponse
func (c *ClientWithResponses) PostBatchAllowancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchAllowancesResponse, error) {
	rsp, err := c.PostBatchAllowancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchAllowancesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchAllowancesWithResponse(ctx context.Context, body PostBatchAllowancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchAllowancesResponse, error) {
	rsp, err := c.PostBatchAllowances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchAllowancesResponse(rsp)
}

// PutBatchAllowancesWithBodyWithResponse request with arbitrary body returning *PutBatchAllowancesResponse
func (c *ClientWithResponses) PutBatchAllowancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchAllowancesResponse, error) {
	rsp, err := c.PutBatchAllowancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchAllowancesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchAllowancesWithResponse(ctx context.Context, body PutBatchAllowancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchAllowancesResponse, error) {
	rsp, err := c.PutBatchAllowances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchAllowancesResponse(rsp)
}

// PostBatchApplicantsWithBodyWithResponse request with arbitrary body returning *PostBatchApplicantsResponse
func (c *ClientWithResponses) PostBatchApplicantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchApplicantsResponse, error) {
	rsp, err := c.PostBatchApplicantsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchApplicantsResponse(rsp)
}

func (c *ClientWithResponses) PostBatchApplicantsWithResponse(ctx context.Context, body PostBatchApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchApplicantsResponse, error) {
	rsp, err := c.PostBatchApplicants(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchApplicantsResponse(rsp)
}

// PutBatchApplicantsWithBodyWithResponse request with arbitrary body returning *PutBatchApplicantsResponse
func (c *ClientWithResponses) PutBatchApplicantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchApplicantsResponse, error) {
	rsp, err := c.PutBatchApplicantsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchApplicantsResponse(rsp)
}

func (c *ClientWithResponses) PutBatchApplicantsWithResponse(ctx context.Context, body PutBatchApplicantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchApplicantsResponse, error) {
	rsp, err := c.PutBatchApplicants(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchApplicantsResponse(rsp)
}

// PostBatchAssignmentsWithBodyWithResponse request with arbitrary body returning *PostBatchAssignmentsResponse
func (c *ClientWithResponses) PostBatchAssignmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchAssignmentsResponse, error) {
	rsp, err := c.PostBatchAssignmentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchAssignmentsResponse(rsp)
}

func (c *ClientWithResponses) PostBatchAssignmentsWithResponse(ctx context.Context, body PostBatchAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchAssignmentsResponse, error) {
	rsp, err := c.PostBatchAssignments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchAssignmentsResponse(rsp)
}

// PutBatchAssignmentsWithBodyWithResponse request with arbitrary body returning *PutBatchAssignmentsResponse
func (c *ClientWithResponses) PutBatchAssignmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchAssignmentsResponse, error) {
	rsp, err := c.PutBatchAssignmentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchAssignmentsResponse(rsp)
}

func (c *ClientWithResponses) PutBatchAssignmentsWithResponse(ctx context.Context, body PutBatchAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchAssignmentsResponse, error) {
	rsp, err := c.PutBatchAssignments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchAssignmentsResponse(rsp)
}

// PostBatchAssignmentsWithHistoryWithBodyWithResponse request with arbitrary body returning *PostBatchAssignmentsWithHistoryResponse
func (c *ClientWithResponses) PostBatchAssignmentsWithHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchAssignmentsWithHistoryResponse, error) {
	rsp, err := c.PostBatchAssignmentsWithHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchAssignmentsWithHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostBatchAssignmentsWithHistoryWithResponse(ctx context.Context, body PostBatchAssignmentsWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchAssignmentsWithHistoryResponse, error) {
	rsp, err := c.PostBatchAssignmentsWithHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchAssignmentsWithHistoryResponse(rsp)
}

// PutBatchAssignmentsWithHistoryWithBodyWithResponse request with arbitrary body returning *PutBatchAssignmentsWithHistoryResponse
func (c *ClientWithResponses) PutBatchAssignmentsWithHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchAssignmentsWithHistoryResponse, error) {
	rsp, err := c.PutBatchAssignmentsWithHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchAssignmentsWithHistoryResponse(rsp)
}

func (c *ClientWithResponses) PutBatchAssignmentsWithHistoryWithResponse(ctx context.Context, body PutBatchAssignmentsWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchAssignmentsWithHistoryResponse, error) {
	rsp, err := c.PutBatchAssignmentsWithHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchAssignmentsWithHistoryResponse(rsp)
}

// PostBatchBackBonusPaymentCategoriesWithBodyWithResponse request with arbitrary body returning *PostBatchBackBonusPaymentCategoriesResponse
func (c *ClientWithResponses) PostBatchBackBonusPaymentCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchBackBonusPaymentCategoriesResponse, error) {
	rsp, err := c.PostBatchBackBonusPaymentCategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchBackBonusPaymentCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchBackBonusPaymentCategoriesWithResponse(ctx context.Context, body PostBatchBackBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchBackBonusPaymentCategoriesResponse, error) {
	rsp, err := c.PostBatchBackBonusPaymentCategories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchBackBonusPaymentCategoriesResponse(rsp)
}

// PutBatchBackBonusPaymentCategoriesWithBodyWithResponse request with arbitrary body returning *PutBatchBackBonusPaymentCategoriesResponse
func (c *ClientWithResponses) PutBatchBackBonusPaymentCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchBackBonusPaymentCategoriesResponse, error) {
	rsp, err := c.PutBatchBackBonusPaymentCategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchBackBonusPaymentCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchBackBonusPaymentCategoriesWithResponse(ctx context.Context, body PutBatchBackBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchBackBonusPaymentCategoriesResponse, error) {
	rsp, err := c.PutBatchBackBonusPaymentCategories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchBackBonusPaymentCategoriesResponse(rsp)
}

// PostBatchBanksWithBodyWithResponse request with arbitrary body returning *PostBatchBanksResponse
func (c *ClientWithResponses) PostBatchBanksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchBanksResponse, error) {
	rsp, err := c.PostBatchBanksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchBanksResponse(rsp)
}

func (c *ClientWithResponses) PostBatchBanksWithResponse(ctx context.Context, body PostBatchBanksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchBanksResponse, error) {
	rsp, err := c.PostBatchBanks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchBanksResponse(rsp)
}

// PutBatchBanksWithBodyWithResponse request with arbitrary body returning *PutBatchBanksResponse
func (c *ClientWithResponses) PutBatchBanksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchBanksResponse, error) {
	rsp, err := c.PutBatchBanksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchBanksResponse(rsp)
}

func (c *ClientWithResponses) PutBatchBanksWithResponse(ctx context.Context, body PutBatchBanksJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchBanksResponse, error) {
	rsp, err := c.PutBatchBanks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchBanksResponse(rsp)
}

// PostBatchCalendarWithBodyWithResponse request with arbitrary body returning *PostBatchCalendarResponse
func (c *ClientWithResponses) PostBatchCalendarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchCalendarResponse, error) {
	rsp, err := c.PostBatchCalendarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchCalendarResponse(rsp)
}

func (c *ClientWithResponses) PostBatchCalendarWithResponse(ctx context.Context, body PostBatchCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchCalendarResponse, error) {
	rsp, err := c.PostBatchCalendar(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchCalendarResponse(rsp)
}

// PutBatchCalendarWithBodyWithResponse request with arbitrary body returning *PutBatchCalendarResponse
func (c *ClientWithResponses) PutBatchCalendarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchCalendarResponse, error) {
	rsp, err := c.PutBatchCalendarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchCalendarResponse(rsp)
}

func (c *ClientWithResponses) PutBatchCalendarWithResponse(ctx context.Context, body PutBatchCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchCalendarResponse, error) {
	rsp, err := c.PutBatchCalendar(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchCalendarResponse(rsp)
}

// PostBatchCalendarDaysWithBodyWithResponse request with arbitrary body returning *PostBatchCalendarDaysResponse
func (c *ClientWithResponses) PostBatchCalendarDaysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchCalendarDaysResponse, error) {
	rsp, err := c.PostBatchCalendarDaysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchCalendarDaysResponse(rsp)
}

func (c *ClientWithResponses) PostBatchCalendarDaysWithResponse(ctx context.Context, body PostBatchCalendarDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchCalendarDaysResponse, error) {
	rsp, err := c.PostBatchCalendarDays(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchCalendarDaysResponse(rsp)
}

// PutBatchCalendarDaysWithBodyWithResponse request with arbitrary body returning *PutBatchCalendarDaysResponse
func (c *ClientWithResponses) PutBatchCalendarDaysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchCalendarDaysResponse, error) {
	rsp, err := c.PutBatchCalendarDaysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchCalendarDaysResponse(rsp)
}

func (c *ClientWithResponses) PutBatchCalendarDaysWithResponse(ctx context.Context, body PutBatchCalendarDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchCalendarDaysResponse, error) {
	rsp, err := c.PutBatchCalendarDays(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchCalendarDaysResponse(rsp)
}

// PostBatchContractsWithBodyWithResponse request with arbitrary body returning *PostBatchContractsResponse
func (c *ClientWithResponses) PostBatchContractsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchContractsResponse, error) {
	rsp, err := c.PostBatchContractsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchContractsResponse(rsp)
}

func (c *ClientWithResponses) PostBatchContractsWithResponse(ctx context.Context, body PostBatchContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchContractsResponse, error) {
	rsp, err := c.PostBatchContracts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchContractsResponse(rsp)
}

// PutBatchContractsWithBodyWithResponse request with arbitrary body returning *PutBatchContractsResponse
func (c *ClientWithResponses) PutBatchContractsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchContractsResponse, error) {
	rsp, err := c.PutBatchContractsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchContractsResponse(rsp)
}

func (c *ClientWithResponses) PutBatchContractsWithResponse(ctx context.Context, body PutBatchContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchContractsResponse, error) {
	rsp, err := c.PutBatchContracts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchContractsResponse(rsp)
}

// PostBatchDeleteWithBodyWithResponse request with arbitrary body returning *PostBatchDeleteResponse
func (c *ClientWithResponses) PostBatchDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchDeleteResponse, error) {
	rsp, err := c.PostBatchDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostBatchDeleteWithResponse(ctx context.Context, body PostBatchDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchDeleteResponse, error) {
	rsp, err := c.PostBatchDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchDeleteResponse(rsp)
}

// PostBatchDgphDonorsWithBodyWithResponse request with arbitrary body returning *PostBatchDgphDonorsResponse
func (c *ClientWithResponses) PostBatchDgphDonorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchDgphDonorsResponse, error) {
	rsp, err := c.PostBatchDgphDonorsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchDgphDonorsResponse(rsp)
}

func (c *ClientWithResponses) PostBatchDgphDonorsWithResponse(ctx context.Context, body PostBatchDgphDonorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchDgphDonorsResponse, error) {
	rsp, err := c.PostBatchDgphDonors(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchDgphDonorsResponse(rsp)
}

// PutBatchDgphDonorsWithBodyWithResponse request with arbitrary body returning *PutBatchDgphDonorsResponse
func (c *ClientWithResponses) PutBatchDgphDonorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchDgphDonorsResponse, error) {
	rsp, err := c.PutBatchDgphDonorsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchDgphDonorsResponse(rsp)
}

func (c *ClientWithResponses) PutBatchDgphDonorsWithResponse(ctx context.Context, body PutBatchDgphDonorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchDgphDonorsResponse, error) {
	rsp, err := c.PutBatchDgphDonors(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchDgphDonorsResponse(rsp)
}

// PostBatchDisabilityCategoriesWithBodyWithResponse request with arbitrary body returning *PostBatchDisabilityCategoriesResponse
func (c *ClientWithResponses) PostBatchDisabilityCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchDisabilityCategoriesResponse, error) {
	rsp, err := c.PostBatchDisabilityCategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchDisabilityCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchDisabilityCategoriesWithResponse(ctx context.Context, body PostBatchDisabilityCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchDisabilityCategoriesResponse, error) {
	rsp, err := c.PostBatchDisabilityCategories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchDisabilityCategoriesResponse(rsp)
}

// PutBatchDisabilityCategoriesWithBodyWithResponse request with arbitrary body returning *PutBatchDisabilityCategoriesResponse
func (c *ClientWithResponses) PutBatchDisabilityCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchDisabilityCategoriesResponse, error) {
	rsp, err := c.PutBatchDisabilityCategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchDisabilityCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchDisabilityCategoriesWithResponse(ctx context.Context, body PutBatchDisabilityCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchDisabilityCategoriesResponse, error) {
	rsp, err := c.PutBatchDisabilityCategories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchDisabilityCategoriesResponse(rsp)
}

// PostBatchDistWorkWithBodyWithResponse request with arbitrary body returning *PostBatchDistWorkResponse
func (c *ClientWithResponses) PostBatchDistWorkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchDistWorkResponse, error) {
	rsp, err := c.PostBatchDistWorkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchDistWorkResponse(rsp)
}

func (c *ClientWithResponses) PostBatchDistWorkWithResponse(ctx context.Context, body PostBatchDistWorkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchDistWorkResponse, error) {
	rsp, err := c.PostBatchDistWork(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchDistWorkResponse(rsp)
}

// PutBatchDistWorkWithBodyWithResponse request with arbitrary body returning *PutBatchDistWorkResponse
func (c *ClientWithResponses) PutBatchDistWorkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchDistWorkResponse, error) {
	rsp, err := c.PutBatchDistWorkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchDistWorkResponse(rsp)
}

func (c *ClientWithResponses) PutBatchDistWorkWithResponse(ctx context.Context, body PutBatchDistWorkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchDistWorkResponse, error) {
	rsp, err := c.PutBatchDistWork(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchDistWorkResponse(rsp)
}

// PostBatchEarningPoliciesWithBodyWithResponse request with arbitrary body returning *PostBatchEarningPoliciesResponse
func (c *ClientWithResponses) PostBatchEarningPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchEarningPoliciesResponse, error) {
	rsp, err := c.PostBatchEarningPoliciesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchEarningPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchEarningPoliciesWithResponse(ctx context.Context, body PostBatchEarningPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchEarningPoliciesResponse, error) {
	rsp, err := c.PostBatchEarningPolicies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchEarningPoliciesResponse(rsp)
}

// PutBatchEarningPoliciesWithBodyWithResponse request with arbitrary body returning *PutBatchEarningPoliciesResponse
func (c *ClientWithResponses) PutBatchEarningPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchEarningPoliciesResponse, error) {
	rsp, err := c.PutBatchEarningPoliciesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchEarningPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchEarningPoliciesWithResponse(ctx context.Context, body PutBatchEarningPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchEarningPoliciesResponse, error) {
	rsp, err := c.PutBatchEarningPolicies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchEarningPoliciesResponse(rsp)
}

// PutBatchEmployeePersonalDataWithBodyWithResponse request with arbitrary body returning *PutBatchEmployeePersonalDataResponse
func (c *ClientWithResponses) PutBatchEmployeePersonalDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchEmployeePersonalDataResponse, error) {
	rsp, err := c.PutBatchEmployeePersonalDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchEmployeePersonalDataResponse(rsp)
}

func (c *ClientWithResponses) PutBatchEmployeePersonalDataWithResponse(ctx context.Context, body PutBatchEmployeePersonalDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchEmployeePersonalDataResponse, error) {
	rsp, err := c.PutBatchEmployeePersonalData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchEmployeePersonalDataResponse(rsp)
}

// PostBatchEmployeesWithBodyWithResponse request with arbitrary body returning *PostBatchEmployeesResponse
func (c *ClientWithResponses) PostBatchEmployeesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchEmployeesResponse, error) {
	rsp, err := c.PostBatchEmployeesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchEmployeesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchEmployeesWithResponse(ctx context.Context, body PostBatchEmployeesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchEmployeesResponse, error) {
	rsp, err := c.PostBatchEmployees(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchEmployeesResponse(rsp)
}

// PutBatchEmployeesWithBodyWithResponse request with arbitrary body returning *PutBatchEmployeesResponse
func (c *ClientWithResponses) PutBatchEmployeesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchEmployeesResponse, error) {
	rsp, err := c.PutBatchEmployeesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchEmployeesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchEmployeesWithResponse(ctx context.Context, body PutBatchEmployeesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchEmployeesResponse, error) {
	rsp, err := c.PutBatchEmployees(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchEmployeesResponse(rsp)
}

// PostBatchGradesWithBodyWithResponse request with arbitrary body returning *PostBatchGradesResponse
func (c *ClientWithResponses) PostBatchGradesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchGradesResponse, error) {
	rsp, err := c.PostBatchGradesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchGradesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchGradesWithResponse(ctx context.Context, body PostBatchGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchGradesResponse, error) {
	rsp, err := c.PostBatchGrades(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchGradesResponse(rsp)
}

// PutBatchGradesWithBodyWithResponse request with arbitrary body returning *PutBatchGradesResponse
func (c *ClientWithResponses) PutBatchGradesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchGradesResponse, error) {
	rsp, err := c.PutBatchGradesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchGradesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchGradesWithResponse(ctx context.Context, body PutBatchGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchGradesResponse, error) {
	rsp, err := c.PutBatchGrades(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchGradesResponse(rsp)
}

// PostBatchHierarchyLinksWithBodyWithResponse request with arbitrary body returning *PostBatchHierarchyLinksResponse
func (c *ClientWithResponses) PostBatchHierarchyLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchHierarchyLinksResponse, error) {
	rsp, err := c.PostBatchHierarchyLinksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchHierarchyLinksResponse(rsp)
}

func (c *ClientWithResponses) PostBatchHierarchyLinksWithResponse(ctx context.Context, body PostBatchHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchHierarchyLinksResponse, error) {
	rsp, err := c.PostBatchHierarchyLinks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchHierarchyLinksResponse(rsp)
}

// PutBatchHierarchyLinksWithBodyWithResponse request with arbitrary body returning *PutBatchHierarchyLinksResponse
func (c *ClientWithResponses) PutBatchHierarchyLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchHierarchyLinksResponse, error) {
	rsp, err := c.PutBatchHierarchyLinksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchHierarchyLinksResponse(rsp)
}

func (c *ClientWithResponses) PutBatchHierarchyLinksWithResponse(ctx context.Context, body PutBatchHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchHierarchyLinksResponse, error) {
	rsp, err := c.PutBatchHierarchyLinks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchHierarchyLinksResponse(rsp)
}

// PostBatchHourlyRateWithBodyWithResponse request with arbitrary body returning *PostBatchHourlyRateResponse
func (c *ClientWithResponses) PostBatchHourlyRateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchHourlyRateResponse, error) {
	rsp, err := c.PostBatchHourlyRateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchHourlyRateResponse(rsp)
}

func (c *ClientWithResponses) PostBatchHourlyRateWithResponse(ctx context.Context, body PostBatchHourlyRateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchHourlyRateResponse, error) {
	rsp, err := c.PostBatchHourlyRate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchHourlyRateResponse(rsp)
}

// PutBatchHourlyRateWithBodyWithResponse request with arbitrary body returning *PutBatchHourlyRateResponse
func (c *ClientWithResponses) PutBatchHourlyRateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchHourlyRateResponse, error) {
	rsp, err := c.PutBatchHourlyRateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchHourlyRateResponse(rsp)
}

func (c *ClientWithResponses) PutBatchHourlyRateWithResponse(ctx context.Context, body PutBatchHourlyRateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchHourlyRateResponse, error) {
	rsp, err := c.PutBatchHourlyRate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchHourlyRateResponse(rsp)
}

// PostBatchLeavingReasonsWithBodyWithResponse request with arbitrary body returning *PostBatchLeavingReasonsResponse
func (c *ClientWithResponses) PostBatchLeavingReasonsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchLeavingReasonsResponse, error) {
	rsp, err := c.PostBatchLeavingReasonsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchLeavingReasonsResponse(rsp)
}

func (c *ClientWithResponses) PostBatchLeavingReasonsWithResponse(ctx context.Context, body PostBatchLeavingReasonsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchLeavingReasonsResponse, error) {
	rsp, err := c.PostBatchLeavingReasons(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchLeavingReasonsResponse(rsp)
}

// PutBatchLeavingReasonsWithBodyWithResponse request with arbitrary body returning *PutBatchLeavingReasonsResponse
func (c *ClientWithResponses) PutBatchLeavingReasonsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchLeavingReasonsResponse, error) {
	rsp, err := c.PutBatchLeavingReasonsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchLeavingReasonsResponse(rsp)
}

func (c *ClientWithResponses) PutBatchLeavingReasonsWithResponse(ctx context.Context, body PutBatchLeavingReasonsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchLeavingReasonsResponse, error) {
	rsp, err := c.PutBatchLeavingReasons(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchLeavingReasonsResponse(rsp)
}

// PostBatchLocationsWithBodyWithResponse request with arbitrary body returning *PostBatchLocationsResponse
func (c *ClientWithResponses) PostBatchLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchLocationsResponse, error) {
	rsp, err := c.PostBatchLocationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchLocationsResponse(rsp)
}

func (c *ClientWithResponses) PostBatchLocationsWithResponse(ctx context.Context, body PostBatchLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchLocationsResponse, error) {
	rsp, err := c.PostBatchLocations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchLocationsResponse(rsp)
}

// PutBatchLocationsWithBodyWithResponse request with arbitrary body returning *PutBatchLocationsResponse
func (c *ClientWithResponses) PutBatchLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchLocationsResponse, error) {
	rsp, err := c.PutBatchLocationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchLocationsResponse(rsp)
}

func (c *ClientWithResponses) PutBatchLocationsWithResponse(ctx context.Context, body PutBatchLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchLocationsResponse, error) {
	rsp, err := c.PutBatchLocations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchLocationsResponse(rsp)
}

// PostBatchOfficesWithBodyWithResponse request with arbitrary body returning *PostBatchOfficesResponse
func (c *ClientWithResponses) PostBatchOfficesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchOfficesResponse, error) {
	rsp, err := c.PostBatchOfficesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchOfficesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchOfficesWithResponse(ctx context.Context, body PostBatchOfficesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchOfficesResponse, error) {
	rsp, err := c.PostBatchOffices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchOfficesResponse(rsp)
}

// PutBatchOfficesWithBodyWithResponse request with arbitrary body returning *PutBatchOfficesResponse
func (c *ClientWithResponses) PutBatchOfficesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchOfficesResponse, error) {
	rsp, err := c.PutBatchOfficesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchOfficesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchOfficesWithResponse(ctx context.Context, body PutBatchOfficesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchOfficesResponse, error) {
	rsp, err := c.PutBatchOffices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchOfficesResponse(rsp)
}

// PostBatchPaoBonusPaymentCategoriesWithBodyWithResponse request with arbitrary body returning *PostBatchPaoBonusPaymentCategoriesResponse
func (c *ClientWithResponses) PostBatchPaoBonusPaymentCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPaoBonusPaymentCategoriesResponse, error) {
	rsp, err := c.PostBatchPaoBonusPaymentCategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPaoBonusPaymentCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchPaoBonusPaymentCategoriesWithResponse(ctx context.Context, body PostBatchPaoBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPaoBonusPaymentCategoriesResponse, error) {
	rsp, err := c.PostBatchPaoBonusPaymentCategories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPaoBonusPaymentCategoriesResponse(rsp)
}

// PutBatchPaoBonusPaymentCategoriesWithBodyWithResponse request with arbitrary body returning *PutBatchPaoBonusPaymentCategoriesResponse
func (c *ClientWithResponses) PutBatchPaoBonusPaymentCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPaoBonusPaymentCategoriesResponse, error) {
	rsp, err := c.PutBatchPaoBonusPaymentCategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPaoBonusPaymentCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchPaoBonusPaymentCategoriesWithResponse(ctx context.Context, body PutBatchPaoBonusPaymentCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPaoBonusPaymentCategoriesResponse, error) {
	rsp, err := c.PutBatchPaoBonusPaymentCategories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPaoBonusPaymentCategoriesResponse(rsp)
}

// PostBatchPayTypesWithBodyWithResponse request with arbitrary body returning *PostBatchPayTypesResponse
func (c *ClientWithResponses) PostBatchPayTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPayTypesResponse, error) {
	rsp, err := c.PostBatchPayTypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPayTypesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchPayTypesWithResponse(ctx context.Context, body PostBatchPayTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPayTypesResponse, error) {
	rsp, err := c.PostBatchPayTypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPayTypesResponse(rsp)
}

// PutBatchPayTypesWithBodyWithResponse request with arbitrary body returning *PutBatchPayTypesResponse
func (c *ClientWithResponses) PutBatchPayTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPayTypesResponse, error) {
	rsp, err := c.PutBatchPayTypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPayTypesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchPayTypesWithResponse(ctx context.Context, body PutBatchPayTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPayTypesResponse, error) {
	rsp, err := c.PutBatchPayTypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPayTypesResponse(rsp)
}

// PostBatchPeopleWithBodyWithResponse request with arbitrary body returning *PostBatchPeopleResponse
func (c *ClientWithResponses) PostBatchPeopleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPeopleResponse, error) {
	rsp, err := c.PostBatchPeopleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPeopleResponse(rsp)
}

func (c *ClientWithResponses) PostBatchPeopleWithResponse(ctx context.Context, body PostBatchPeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPeopleResponse, error) {
	rsp, err := c.PostBatchPeople(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPeopleResponse(rsp)
}

// PutBatchPeopleWithBodyWithResponse request with arbitrary body returning *PutBatchPeopleResponse
func (c *ClientWithResponses) PutBatchPeopleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPeopleResponse, error) {
	rsp, err := c.PutBatchPeopleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPeopleResponse(rsp)
}

func (c *ClientWithResponses) PutBatchPeopleWithResponse(ctx context.Context, body PutBatchPeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPeopleResponse, error) {
	rsp, err := c.PutBatchPeople(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPeopleResponse(rsp)
}

// PostBatchPersonEducationWithBodyWithResponse request with arbitrary body returning *PostBatchPersonEducationResponse
func (c *ClientWithResponses) PostBatchPersonEducationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPersonEducationResponse, error) {
	rsp, err := c.PostBatchPersonEducationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPersonEducationResponse(rsp)
}

func (c *ClientWithResponses) PostBatchPersonEducationWithResponse(ctx context.Context, body PostBatchPersonEducationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPersonEducationResponse, error) {
	rsp, err := c.PostBatchPersonEducation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPersonEducationResponse(rsp)
}

// PutBatchPersonEducationWithBodyWithResponse request with arbitrary body returning *PutBatchPersonEducationResponse
func (c *ClientWithResponses) PutBatchPersonEducationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPersonEducationResponse, error) {
	rsp, err := c.PutBatchPersonEducationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPersonEducationResponse(rsp)
}

func (c *ClientWithResponses) PutBatchPersonEducationWithResponse(ctx context.Context, body PutBatchPersonEducationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPersonEducationResponse, error) {
	rsp, err := c.PutBatchPersonEducation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPersonEducationResponse(rsp)
}

// PutBatchPersonMilitaryWithBodyWithResponse request with arbitrary body returning *PutBatchPersonMilitaryResponse
func (c *ClientWithResponses) PutBatchPersonMilitaryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPersonMilitaryResponse, error) {
	rsp, err := c.PutBatchPersonMilitaryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPersonMilitaryResponse(rsp)
}

func (c *ClientWithResponses) PutBatchPersonMilitaryWithResponse(ctx context.Context, body PutBatchPersonMilitaryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPersonMilitaryResponse, error) {
	rsp, err := c.PutBatchPersonMilitary(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPersonMilitaryResponse(rsp)
}

// PutBatchPersonPictureIdWithBodyWithResponse request with arbitrary body returning *PutBatchPersonPictureIdResponse
func (c *ClientWithResponses) PutBatchPersonPictureIdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPersonPictureIdResponse, error) {
	rsp, err := c.PutBatchPersonPictureIdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPersonPictureIdResponse(rsp)
}

func (c *ClientWithResponses) PutBatchPersonPictureIdWithResponse(ctx context.Context, body PutBatchPersonPictureIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPersonPictureIdResponse, error) {
	rsp, err := c.PutBatchPersonPictureId(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPersonPictureIdResponse(rsp)
}

// PostBatchPersonalSchedulesWithBodyWithResponse request with arbitrary body returning *PostBatchPersonalSchedulesResponse
func (c *ClientWithResponses) PostBatchPersonalSchedulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPersonalSchedulesResponse, error) {
	rsp, err := c.PostBatchPersonalSchedulesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPersonalSchedulesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchPersonalSchedulesWithResponse(ctx context.Context, body PostBatchPersonalSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPersonalSchedulesResponse, error) {
	rsp, err := c.PostBatchPersonalSchedules(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPersonalSchedulesResponse(rsp)
}

// PutBatchPersonalSchedulesWithBodyWithResponse request with arbitrary body returning *PutBatchPersonalSchedulesResponse
func (c *ClientWithResponses) PutBatchPersonalSchedulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPersonalSchedulesResponse, error) {
	rsp, err := c.PutBatchPersonalSchedulesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPersonalSchedulesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchPersonalSchedulesWithResponse(ctx context.Context, body PutBatchPersonalSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPersonalSchedulesResponse, error) {
	rsp, err := c.PutBatchPersonalSchedules(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPersonalSchedulesResponse(rsp)
}

// PostBatchPositionCategoriesWithBodyWithResponse request with arbitrary body returning *PostBatchPositionCategoriesResponse
func (c *ClientWithResponses) PostBatchPositionCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchPositionCategoriesResponse, error) {
	rsp, err := c.PostBatchPositionCategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPositionCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchPositionCategoriesWithResponse(ctx context.Context, body PostBatchPositionCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchPositionCategoriesResponse, error) {
	rsp, err := c.PostBatchPositionCategories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchPositionCategoriesResponse(rsp)
}

// PutBatchPositionCategoriesWithBodyWithResponse request with arbitrary body returning *PutBatchPositionCategoriesResponse
func (c *ClientWithResponses) PutBatchPositionCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchPositionCategoriesResponse, error) {
	rsp, err := c.PutBatchPositionCategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPositionCategoriesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchPositionCategoriesWithResponse(ctx context.Context, body PutBatchPositionCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchPositionCategoriesResponse, error) {
	rsp, err := c.PutBatchPositionCategories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchPositionCategoriesResponse(rsp)
}

// PostBatchProductEntitiesWithBodyWithResponse request with arbitrary body returning *PostBatchProductEntitiesResponse
func (c *ClientWithResponses) PostBatchProductEntitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchProductEntitiesResponse, error) {
	rsp, err := c.PostBatchProductEntitiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchProductEntitiesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchProductEntitiesWithResponse(ctx context.Context, body PostBatchProductEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchProductEntitiesResponse, error) {
	rsp, err := c.PostBatchProductEntities(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchProductEntitiesResponse(rsp)
}

// PutBatchProductEntitiesWithBodyWithResponse request with arbitrary body returning *PutBatchProductEntitiesResponse
func (c *ClientWithResponses) PutBatchProductEntitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchProductEntitiesResponse, error) {
	rsp, err := c.PutBatchProductEntitiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchProductEntitiesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchProductEntitiesWithResponse(ctx context.Context, body PutBatchProductEntitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchProductEntitiesResponse, error) {
	rsp, err := c.PutBatchProductEntities(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchProductEntitiesResponse(rsp)
}

// PostBatchProductEntityLinksWithBodyWithResponse request with arbitrary body returning *PostBatchProductEntityLinksResponse
func (c *ClientWithResponses) PostBatchProductEntityLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchProductEntityLinksResponse, error) {
	rsp, err := c.PostBatchProductEntityLinksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchProductEntityLinksResponse(rsp)
}

func (c *ClientWithResponses) PostBatchProductEntityLinksWithResponse(ctx context.Context, body PostBatchProductEntityLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchProductEntityLinksResponse, error) {
	rsp, err := c.PostBatchProductEntityLinks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchProductEntityLinksResponse(rsp)
}

// PutBatchProductEntityLinksWithBodyWithResponse request with arbitrary body returning *PutBatchProductEntityLinksResponse
func (c *ClientWithResponses) PutBatchProductEntityLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchProductEntityLinksResponse, error) {
	rsp, err := c.PutBatchProductEntityLinksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchProductEntityLinksResponse(rsp)
}

func (c *ClientWithResponses) PutBatchProductEntityLinksWithResponse(ctx context.Context, body PutBatchProductEntityLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchProductEntityLinksResponse, error) {
	rsp, err := c.PutBatchProductEntityLinks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchProductEntityLinksResponse(rsp)
}

// PostBatchProductStatusesWithBodyWithResponse request with arbitrary body returning *PostBatchProductStatusesResponse
func (c *ClientWithResponses) PostBatchProductStatusesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchProductStatusesResponse, error) {
	rsp, err := c.PostBatchProductStatusesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchProductStatusesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchProductStatusesWithResponse(ctx context.Context, body PostBatchProductStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchProductStatusesResponse, error) {
	rsp, err := c.PostBatchProductStatuses(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchProductStatusesResponse(rsp)
}

// PutBatchProductStatusesWithBodyWithResponse request with arbitrary body returning *PutBatchProductStatusesResponse
func (c *ClientWithResponses) PutBatchProductStatusesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchProductStatusesResponse, error) {
	rsp, err := c.PutBatchProductStatusesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchProductStatusesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchProductStatusesWithResponse(ctx context.Context, body PutBatchProductStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchProductStatusesResponse, error) {
	rsp, err := c.PutBatchProductStatuses(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchProductStatusesResponse(rsp)
}

// PostBatchProductsWithBodyWithResponse request with arbitrary body returning *PostBatchProductsResponse
func (c *ClientWithResponses) PostBatchProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchProductsResponse, error) {
	rsp, err := c.PostBatchProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchProductsResponse(rsp)
}

func (c *ClientWithResponses) PostBatchProductsWithResponse(ctx context.Context, body PostBatchProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchProductsResponse, error) {
	rsp, err := c.PostBatchProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchProductsResponse(rsp)
}

// PutBatchProductsWithBodyWithResponse request with arbitrary body returning *PutBatchProductsResponse
func (c *ClientWithResponses) PutBatchProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchProductsResponse, error) {
	rsp, err := c.PutBatchProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchProductsResponse(rsp)
}

func (c *ClientWithResponses) PutBatchProductsWithResponse(ctx context.Context, body PutBatchProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchProductsResponse, error) {
	rsp, err := c.PutBatchProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchProductsResponse(rsp)
}

// PostBatchSalariesWithBodyWithResponse request with arbitrary body returning *PostBatchSalariesResponse
func (c *ClientWithResponses) PostBatchSalariesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchSalariesResponse, error) {
	rsp, err := c.PostBatchSalariesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchSalariesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchSalariesWithResponse(ctx context.Context, body PostBatchSalariesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchSalariesResponse, error) {
	rsp, err := c.PostBatchSalaries(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchSalariesResponse(rsp)
}

// PutBatchSalariesWithBodyWithResponse request with arbitrary body returning *PutBatchSalariesResponse
func (c *ClientWithResponses) PutBatchSalariesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchSalariesResponse, error) {
	rsp, err := c.PutBatchSalariesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchSalariesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchSalariesWithResponse(ctx context.Context, body PutBatchSalariesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchSalariesResponse, error) {
	rsp, err := c.PutBatchSalaries(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchSalariesResponse(rsp)
}

// PostBatchScheduleDaysWithBodyWithResponse request with arbitrary body returning *PostBatchScheduleDaysResponse
func (c *ClientWithResponses) PostBatchScheduleDaysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchScheduleDaysResponse, error) {
	rsp, err := c.PostBatchScheduleDaysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchScheduleDaysResponse(rsp)
}

func (c *ClientWithResponses) PostBatchScheduleDaysWithResponse(ctx context.Context, body PostBatchScheduleDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchScheduleDaysResponse, error) {
	rsp, err := c.PostBatchScheduleDays(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchScheduleDaysResponse(rsp)
}

// PutBatchScheduleDaysWithBodyWithResponse request with arbitrary body returning *PutBatchScheduleDaysResponse
func (c *ClientWithResponses) PutBatchScheduleDaysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchScheduleDaysResponse, error) {
	rsp, err := c.PutBatchScheduleDaysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchScheduleDaysResponse(rsp)
}

func (c *ClientWithResponses) PutBatchScheduleDaysWithResponse(ctx context.Context, body PutBatchScheduleDaysJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchScheduleDaysResponse, error) {
	rsp, err := c.PutBatchScheduleDays(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchScheduleDaysResponse(rsp)
}

// PostBatchSchedulesWithBodyWithResponse request with arbitrary body returning *PostBatchSchedulesResponse
func (c *ClientWithResponses) PostBatchSchedulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchSchedulesResponse, error) {
	rsp, err := c.PostBatchSchedulesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchSchedulesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchSchedulesWithResponse(ctx context.Context, body PostBatchSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchSchedulesResponse, error) {
	rsp, err := c.PostBatchSchedules(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchSchedulesResponse(rsp)
}

// PutBatchSchedulesWithBodyWithResponse request with arbitrary body returning *PutBatchSchedulesResponse
func (c *ClientWithResponses) PutBatchSchedulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchSchedulesResponse, error) {
	rsp, err := c.PutBatchSchedulesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchSchedulesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchSchedulesWithResponse(ctx context.Context, body PutBatchSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchSchedulesResponse, error) {
	rsp, err := c.PutBatchSchedules(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchSchedulesResponse(rsp)
}

// PostBatchShiftTypesWithBodyWithResponse request with arbitrary body returning *PostBatchShiftTypesResponse
func (c *ClientWithResponses) PostBatchShiftTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchShiftTypesResponse, error) {
	rsp, err := c.PostBatchShiftTypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchShiftTypesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchShiftTypesWithResponse(ctx context.Context, body PostBatchShiftTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchShiftTypesResponse, error) {
	rsp, err := c.PostBatchShiftTypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchShiftTypesResponse(rsp)
}

// PutBatchShiftTypesWithBodyWithResponse request with arbitrary body returning *PutBatchShiftTypesResponse
func (c *ClientWithResponses) PutBatchShiftTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchShiftTypesResponse, error) {
	rsp, err := c.PutBatchShiftTypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchShiftTypesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchShiftTypesWithResponse(ctx context.Context, body PutBatchShiftTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchShiftTypesResponse, error) {
	rsp, err := c.PutBatchShiftTypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchShiftTypesResponse(rsp)
}

// PostBatchStaffWithBodyWithResponse request with arbitrary body returning *PostBatchStaffResponse
func (c *ClientWithResponses) PostBatchStaffWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchStaffResponse, error) {
	rsp, err := c.PostBatchStaffWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchStaffResponse(rsp)
}

func (c *ClientWithResponses) PostBatchStaffWithResponse(ctx context.Context, body PostBatchStaffJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchStaffResponse, error) {
	rsp, err := c.PostBatchStaff(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchStaffResponse(rsp)
}

// PutBatchStaffWithBodyWithResponse request with arbitrary body returning *PutBatchStaffResponse
func (c *ClientWithResponses) PutBatchStaffWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchStaffResponse, error) {
	rsp, err := c.PutBatchStaffWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchStaffResponse(rsp)
}

func (c *ClientWithResponses) PutBatchStaffWithResponse(ctx context.Context, body PutBatchStaffJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchStaffResponse, error) {
	rsp, err := c.PutBatchStaff(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchStaffResponse(rsp)
}

// PostBatchStaffAvailabilityStatusesWithBodyWithResponse request with arbitrary body returning *PostBatchStaffAvailabilityStatusesResponse
func (c *ClientWithResponses) PostBatchStaffAvailabilityStatusesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchStaffAvailabilityStatusesResponse, error) {
	rsp, err := c.PostBatchStaffAvailabilityStatusesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchStaffAvailabilityStatusesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchStaffAvailabilityStatusesWithResponse(ctx context.Context, body PostBatchStaffAvailabilityStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchStaffAvailabilityStatusesResponse, error) {
	rsp, err := c.PostBatchStaffAvailabilityStatuses(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchStaffAvailabilityStatusesResponse(rsp)
}

// PutBatchStaffAvailabilityStatusesWithBodyWithResponse request with arbitrary body returning *PutBatchStaffAvailabilityStatusesResponse
func (c *ClientWithResponses) PutBatchStaffAvailabilityStatusesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchStaffAvailabilityStatusesResponse, error) {
	rsp, err := c.PutBatchStaffAvailabilityStatusesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchStaffAvailabilityStatusesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchStaffAvailabilityStatusesWithResponse(ctx context.Context, body PutBatchStaffAvailabilityStatusesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchStaffAvailabilityStatusesResponse, error) {
	rsp, err := c.PutBatchStaffAvailabilityStatuses(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchStaffAvailabilityStatusesResponse(rsp)
}

// PostBatchStaffRolesWithBodyWithResponse request with arbitrary body returning *PostBatchStaffRolesResponse
func (c *ClientWithResponses) PostBatchStaffRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchStaffRolesResponse, error) {
	rsp, err := c.PostBatchStaffRolesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchStaffRolesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchStaffRolesWithResponse(ctx context.Context, body PostBatchStaffRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchStaffRolesResponse, error) {
	rsp, err := c.PostBatchStaffRoles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchStaffRolesResponse(rsp)
}

// PutBatchStaffRolesWithBodyWithResponse request with arbitrary body returning *PutBatchStaffRolesResponse
func (c *ClientWithResponses) PutBatchStaffRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchStaffRolesResponse, error) {
	rsp, err := c.PutBatchStaffRolesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchStaffRolesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchStaffRolesWithResponse(ctx context.Context, body PutBatchStaffRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchStaffRolesResponse, error) {
	rsp, err := c.PutBatchStaffRoles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchStaffRolesResponse(rsp)
}

// PostBatchStaffTypesWithBodyWithResponse request with arbitrary body returning *PostBatchStaffTypesResponse
func (c *ClientWithResponses) PostBatchStaffTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchStaffTypesResponse, error) {
	rsp, err := c.PostBatchStaffTypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchStaffTypesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchStaffTypesWithResponse(ctx context.Context, body PostBatchStaffTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchStaffTypesResponse, error) {
	rsp, err := c.PostBatchStaffTypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchStaffTypesResponse(rsp)
}

// PutBatchStaffTypesWithBodyWithResponse request with arbitrary body returning *PutBatchStaffTypesResponse
func (c *ClientWithResponses) PutBatchStaffTypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchStaffTypesResponse, error) {
	rsp, err := c.PutBatchStaffTypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchStaffTypesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchStaffTypesWithResponse(ctx context.Context, body PutBatchStaffTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchStaffTypesResponse, error) {
	rsp, err := c.PutBatchStaffTypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchStaffTypesResponse(rsp)
}

// PostBatchStaffWithHistoryWithBodyWithResponse request with arbitrary body returning *PostBatchStaffWithHistoryResponse
func (c *ClientWithResponses) PostBatchStaffWithHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchStaffWithHistoryResponse, error) {
	rsp, err := c.PostBatchStaffWithHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchStaffWithHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostBatchStaffWithHistoryWithResponse(ctx context.Context, body PostBatchStaffWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchStaffWithHistoryResponse, error) {
	rsp, err := c.PostBatchStaffWithHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchStaffWithHistoryResponse(rsp)
}

// PutBatchStaffWithHistoryWithBodyWithResponse request with arbitrary body returning *PutBatchStaffWithHistoryResponse
func (c *ClientWithResponses) PutBatchStaffWithHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchStaffWithHistoryResponse, error) {
	rsp, err := c.PutBatchStaffWithHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchStaffWithHistoryResponse(rsp)
}

func (c *ClientWithResponses) PutBatchStaffWithHistoryWithResponse(ctx context.Context, body PutBatchStaffWithHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchStaffWithHistoryResponse, error) {
	rsp, err := c.PutBatchStaffWithHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchStaffWithHistoryResponse(rsp)
}

// PostBatchTimekeeperGroupsWithBodyWithResponse request with arbitrary body returning *PostBatchTimekeeperGroupsResponse
func (c *ClientWithResponses) PostBatchTimekeeperGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchTimekeeperGroupsResponse, error) {
	rsp, err := c.PostBatchTimekeeperGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchTimekeeperGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostBatchTimekeeperGroupsWithResponse(ctx context.Context, body PostBatchTimekeeperGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchTimekeeperGroupsResponse, error) {
	rsp, err := c.PostBatchTimekeeperGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchTimekeeperGroupsResponse(rsp)
}

// PutBatchTimekeeperGroupsWithBodyWithResponse request with arbitrary body returning *PutBatchTimekeeperGroupsResponse
func (c *ClientWithResponses) PutBatchTimekeeperGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchTimekeeperGroupsResponse, error) {
	rsp, err := c.PutBatchTimekeeperGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchTimekeeperGroupsResponse(rsp)
}

func (c *ClientWithResponses) PutBatchTimekeeperGroupsWithResponse(ctx context.Context, body PutBatchTimekeeperGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchTimekeeperGroupsResponse, error) {
	rsp, err := c.PutBatchTimekeeperGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchTimekeeperGroupsResponse(rsp)
}

// PostBatchTimekeepersWithBodyWithResponse request with arbitrary body returning *PostBatchTimekeepersResponse
func (c *ClientWithResponses) PostBatchTimekeepersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchTimekeepersResponse, error) {
	rsp, err := c.PostBatchTimekeepersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchTimekeepersResponse(rsp)
}

func (c *ClientWithResponses) PostBatchTimekeepersWithResponse(ctx context.Context, body PostBatchTimekeepersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchTimekeepersResponse, error) {
	rsp, err := c.PostBatchTimekeepers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchTimekeepersResponse(rsp)
}

// PostBatchUnitsWithBodyWithResponse request with arbitrary body returning *PostBatchUnitsResponse
func (c *ClientWithResponses) PostBatchUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchUnitsResponse, error) {
	rsp, err := c.PostBatchUnitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchUnitsResponse(rsp)
}

func (c *ClientWithResponses) PostBatchUnitsWithResponse(ctx context.Context, body PostBatchUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchUnitsResponse, error) {
	rsp, err := c.PostBatchUnits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchUnitsResponse(rsp)
}

// PutBatchUnitsWithBodyWithResponse request with arbitrary body returning *PutBatchUnitsResponse
func (c *ClientWithResponses) PutBatchUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchUnitsResponse, error) {
	rsp, err := c.PutBatchUnitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchUnitsResponse(rsp)
}

func (c *ClientWithResponses) PutBatchUnitsWithResponse(ctx context.Context, body PutBatchUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchUnitsResponse, error) {
	rsp, err := c.PutBatchUnits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchUnitsResponse(rsp)
}

// PostBatchVacationBalancesWithBodyWithResponse request with arbitrary body returning *PostBatchVacationBalancesResponse
func (c *ClientWithResponses) PostBatchVacationBalancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchVacationBalancesResponse, error) {
	rsp, err := c.PostBatchVacationBalancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchVacationBalancesResponse(rsp)
}

func (c *ClientWithResponses) PostBatchVacationBalancesWithResponse(ctx context.Context, body PostBatchVacationBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchVacationBalancesResponse, error) {
	rsp, err := c.PostBatchVacationBalances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchVacationBalancesResponse(rsp)
}

// PutBatchVacationBalancesWithBodyWithResponse request with arbitrary body returning *PutBatchVacationBalancesResponse
func (c *ClientWithResponses) PutBatchVacationBalancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchVacationBalancesResponse, error) {
	rsp, err := c.PutBatchVacationBalancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchVacationBalancesResponse(rsp)
}

func (c *ClientWithResponses) PutBatchVacationBalancesWithResponse(ctx context.Context, body PutBatchVacationBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchVacationBalancesResponse, error) {
	rsp, err := c.PutBatchVacationBalances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchVacationBalancesResponse(rsp)
}

// PostBatchVacationPeriodsWithBodyWithResponse request with arbitrary body returning *PostBatchVacationPeriodsResponse
func (c *ClientWithResponses) PostBatchVacationPeriodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchVacationPeriodsResponse, error) {
	rsp, err := c.PostBatchVacationPeriodsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchVacationPeriodsResponse(rsp)
}

func (c *ClientWithResponses) PostBatchVacationPeriodsWithResponse(ctx context.Context, body PostBatchVacationPeriodsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchVacationPeriodsResponse, error) {
	rsp, err := c.PostBatchVacationPeriods(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchVacationPeriodsResponse(rsp)
}

// PutBatchVacationPeriodsWithBodyWithResponse request with arbitrary body returning *PutBatchVacationPeriodsResponse
func (c *ClientWithResponses) PutBatchVacationPeriodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchVacationPeriodsResponse, error) {
	rsp, err := c.PutBatchVacationPeriodsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchVacationPeriodsResponse(rsp)
}

func (c *ClientWithResponses) PutBatchVacationPeriodsWithResponse(ctx context.Context, body PutBatchVacationPeriodsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchVacationPeriodsResponse, error) {
	rsp, err := c.PutBatchVacationPeriods(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchVacationPeriodsResponse(rsp)
}

// PostBatchVhiWithBodyWithResponse request with arbitrary body returning *PostBatchVhiResponse
func (c *ClientWithResponses) PostBatchVhiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchVhiResponse, error) {
	rsp, err := c.PostBatchVhiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchVhiResponse(rsp)
}

func (c *ClientWithResponses) PostBatchVhiWithResponse(ctx context.Context, body PostBatchVhiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchVhiResponse, error) {
	rsp, err := c.PostBatchVhi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchVhiResponse(rsp)
}

// PutBatchVhiWithBodyWithResponse request with arbitrary body returning *PutBatchVhiResponse
func (c *ClientWithResponses) PutBatchVhiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchVhiResponse, error) {
	rsp, err := c.PutBatchVhiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchVhiResponse(rsp)
}

func (c *ClientWithResponses) PutBatchVhiWithResponse(ctx context.Context, body PutBatchVhiJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchVhiResponse, error) {
	rsp, err := c.PutBatchVhi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchVhiResponse(rsp)
}

// PostBatchWorkWeekHoursWithBodyWithResponse request with arbitrary body returning *PostBatchWorkWeekHoursResponse
func (c *ClientWithResponses) PostBatchWorkWeekHoursWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchWorkWeekHoursResponse, error) {
	rsp, err := c.PostBatchWorkWeekHoursWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchWorkWeekHoursResponse(rsp)
}

func (c *ClientWithResponses) PostBatchWorkWeekHoursWithResponse(ctx context.Context, body PostBatchWorkWeekHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchWorkWeekHoursResponse, error) {
	rsp, err := c.PostBatchWorkWeekHours(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchWorkWeekHoursResponse(rsp)
}

// PutBatchWorkWeekHoursWithBodyWithResponse request with arbitrary body returning *PutBatchWorkWeekHoursResponse
func (c *ClientWithResponses) PutBatchWorkWeekHoursWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchWorkWeekHoursResponse, error) {
	rsp, err := c.PutBatchWorkWeekHoursWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchWorkWeekHoursResponse(rsp)
}

func (c *ClientWithResponses) PutBatchWorkWeekHoursWithResponse(ctx context.Context, body PutBatchWorkWeekHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchWorkWeekHoursResponse, error) {
	rsp, err := c.PutBatchWorkWeekHours(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchWorkWeekHoursResponse(rsp)
}

// PostBatchWorkingHoursWithBodyWithResponse request with arbitrary body returning *PostBatchWorkingHoursResponse
func (c *ClientWithResponses) PostBatchWorkingHoursWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBatchWorkingHoursResponse, error) {
	rsp, err := c.PostBatchWorkingHoursWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchWorkingHoursResponse(rsp)
}

func (c *ClientWithResponses) PostBatchWorkingHoursWithResponse(ctx context.Context, body PostBatchWorkingHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBatchWorkingHoursResponse, error) {
	rsp, err := c.PostBatchWorkingHours(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBatchWorkingHoursResponse(rsp)
}

// PutBatchWorkingHoursWithBodyWithResponse request with arbitrary body returning *PutBatchWorkingHoursResponse
func (c *ClientWithResponses) PutBatchWorkingHoursWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBatchWorkingHoursResponse, error) {
	rsp, err := c.PutBatchWorkingHoursWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchWorkingHoursResponse(rsp)
}

func (c *ClientWithResponses) PutBatchWorkingHoursWithResponse(ctx context.Context, body PutBatchWorkingHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBatchWorkingHoursResponse, error) {
	rsp, err := c.PutBatchWorkingHours(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBatchWorkingHoursResponse(rsp)
}

// GetCalendarDaysWithResponse request returning *GetCalendarDaysResponse
func (c *ClientWithResponses) GetCalendarDaysWithResponse(ctx context.Context, params *GetCalendarDaysParams, reqEditors ...RequestEditorFn) (*GetCalendarDaysResponse, error) {
	rsp, err := c.GetCalendarDays(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCalendarDaysResponse(rsp)
}

// GetCalendarsWithResponse request returning *GetCalendarsResponse
func (c *ClientWithResponses) GetCalendarsWithResponse(ctx context.Context, params *GetCalendarsParams, reqEditors ...RequestEditorFn) (*GetCalendarsResponse, error) {
	rsp, err := c.GetCalendars(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCalendarsResponse(rsp)
}

// GetCalendarsIdWithResponse request returning *GetCalendarsIdResponse
func (c *ClientWithResponses) GetCalendarsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetCalendarsIdResponse, error) {
	rsp, err := c.GetCalendarsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCalendarsIdResponse(rsp)
}

// GetClustersWithResponse request returning *GetClustersResponse
func (c *ClientWithResponses) GetClustersWithResponse(ctx context.Context, params *GetClustersParams, reqEditors ...RequestEditorFn) (*GetClustersResponse, error) {
	rsp, err := c.GetClusters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersResponse(rsp)
}

// PostClustersWithBodyWithResponse request with arbitrary body returning *PostClustersResponse
func (c *ClientWithResponses) PostClustersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClustersResponse, error) {
	rsp, err := c.PostClustersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClustersResponse(rsp)
}

// GetClustersIdWithResponse request returning *GetClustersIdResponse
func (c *ClientWithResponses) GetClustersIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetClustersIdResponse, error) {
	rsp, err := c.GetClustersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersIdResponse(rsp)
}

// PutClustersIdWithBodyWithResponse request with arbitrary body returning *PutClustersIdResponse
func (c *ClientWithResponses) PutClustersIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClustersIdResponse, error) {
	rsp, err := c.PutClustersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClustersIdResponse(rsp)
}

// GetComplexAssignmentsWithResponse request returning *GetComplexAssignmentsResponse
func (c *ClientWithResponses) GetComplexAssignmentsWithResponse(ctx context.Context, params *GetComplexAssignmentsParams, reqEditors ...RequestEditorFn) (*GetComplexAssignmentsResponse, error) {
	rsp, err := c.GetComplexAssignments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComplexAssignmentsResponse(rsp)
}

// GetComplexAssignmentsV2WithResponse request returning *GetComplexAssignmentsV2Response
func (c *ClientWithResponses) GetComplexAssignmentsV2WithResponse(ctx context.Context, params *GetComplexAssignmentsV2Params, reqEditors ...RequestEditorFn) (*GetComplexAssignmentsV2Response, error) {
	rsp, err := c.GetComplexAssignmentsV2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComplexAssignmentsV2Response(rsp)
}

// GetComplexOrganizationStructureWithResponse request returning *GetComplexOrganizationStructureResponse
func (c *ClientWithResponses) GetComplexOrganizationStructureWithResponse(ctx context.Context, params *GetComplexOrganizationStructureParams, reqEditors ...RequestEditorFn) (*GetComplexOrganizationStructureResponse, error) {
	rsp, err := c.GetComplexOrganizationStructure(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComplexOrganizationStructureResponse(rsp)
}

// GetComplexPeopleIdWithResponse request returning *GetComplexPeopleIdResponse
func (c *ClientWithResponses) GetComplexPeopleIdWithResponse(ctx context.Context, id UUIDPathObjectID, params *GetComplexPeopleIdParams, reqEditors ...RequestEditorFn) (*GetComplexPeopleIdResponse, error) {
	rsp, err := c.GetComplexPeopleId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComplexPeopleIdResponse(rsp)
}

// GetComplexUnitpathWithResponse request returning *GetComplexUnitpathResponse
func (c *ClientWithResponses) GetComplexUnitpathWithResponse(ctx context.Context, params *GetComplexUnitpathParams, reqEditors ...RequestEditorFn) (*GetComplexUnitpathResponse, error) {
	rsp, err := c.GetComplexUnitpath(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComplexUnitpathResponse(rsp)
}

// GetComplexUnitsIdSubunitsWithResponse request returning *GetComplexUnitsIdSubunitsResponse
func (c *ClientWithResponses) GetComplexUnitsIdSubunitsWithResponse(ctx context.Context, id UUIDPathObjectID, params *GetComplexUnitsIdSubunitsParams, reqEditors ...RequestEditorFn) (*GetComplexUnitsIdSubunitsResponse, error) {
	rsp, err := c.GetComplexUnitsIdSubunits(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComplexUnitsIdSubunitsResponse(rsp)
}

// GetContractsWithResponse request returning *GetContractsResponse
func (c *ClientWithResponses) GetContractsWithResponse(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*GetContractsResponse, error) {
	rsp, err := c.GetContracts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractsResponse(rsp)
}

// GetContractstatusWithResponse request returning *GetContractstatusResponse
func (c *ClientWithResponses) GetContractstatusWithResponse(ctx context.Context, params *GetContractstatusParams, reqEditors ...RequestEditorFn) (*GetContractstatusResponse, error) {
	rsp, err := c.GetContractstatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractstatusResponse(rsp)
}

// PostContractstatusWithBodyWithResponse request with arbitrary body returning *PostContractstatusResponse
func (c *ClientWithResponses) PostContractstatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContractstatusResponse, error) {
	rsp, err := c.PostContractstatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContractstatusResponse(rsp)
}

func (c *ClientWithResponses) PostContractstatusWithResponse(ctx context.Context, body PostContractstatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContractstatusResponse, error) {
	rsp, err := c.PostContractstatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContractstatusResponse(rsp)
}

// GetContractstatusIdWithResponse request returning *GetContractstatusIdResponse
func (c *ClientWithResponses) GetContractstatusIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetContractstatusIdResponse, error) {
	rsp, err := c.GetContractstatusId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractstatusIdResponse(rsp)
}

// PutContractstatusIdWithBodyWithResponse request with arbitrary body returning *PutContractstatusIdResponse
func (c *ClientWithResponses) PutContractstatusIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContractstatusIdResponse, error) {
	rsp, err := c.PutContractstatusIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContractstatusIdResponse(rsp)
}

func (c *ClientWithResponses) PutContractstatusIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutContractstatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContractstatusIdResponse, error) {
	rsp, err := c.PutContractstatusId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContractstatusIdResponse(rsp)
}

// GetContracttypesWithResponse request returning *GetContracttypesResponse
func (c *ClientWithResponses) GetContracttypesWithResponse(ctx context.Context, params *GetContracttypesParams, reqEditors ...RequestEditorFn) (*GetContracttypesResponse, error) {
	rsp, err := c.GetContracttypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContracttypesResponse(rsp)
}

// PostContracttypesWithBodyWithResponse request with arbitrary body returning *PostContracttypesResponse
func (c *ClientWithResponses) PostContracttypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContracttypesResponse, error) {
	rsp, err := c.PostContracttypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContracttypesResponse(rsp)
}

func (c *ClientWithResponses) PostContracttypesWithResponse(ctx context.Context, body PostContracttypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContracttypesResponse, error) {
	rsp, err := c.PostContracttypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContracttypesResponse(rsp)
}

// GetContracttypesIdWithResponse request returning *GetContracttypesIdResponse
func (c *ClientWithResponses) GetContracttypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetContracttypesIdResponse, error) {
	rsp, err := c.GetContracttypesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContracttypesIdResponse(rsp)
}

// PutContracttypesIdWithBodyWithResponse request with arbitrary body returning *PutContracttypesIdResponse
func (c *ClientWithResponses) PutContracttypesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContracttypesIdResponse, error) {
	rsp, err := c.PutContracttypesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContracttypesIdResponse(rsp)
}

func (c *ClientWithResponses) PutContracttypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutContracttypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContracttypesIdResponse, error) {
	rsp, err := c.PutContracttypesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContracttypesIdResponse(rsp)
}

// GetCostcentersWithResponse request returning *GetCostcentersResponse
func (c *ClientWithResponses) GetCostcentersWithResponse(ctx context.Context, params *GetCostcentersParams, reqEditors ...RequestEditorFn) (*GetCostcentersResponse, error) {
	rsp, err := c.GetCostcenters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCostcentersResponse(rsp)
}

// PostCostcentersWithBodyWithResponse request with arbitrary body returning *PostCostcentersResponse
func (c *ClientWithResponses) PostCostcentersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCostcentersResponse, error) {
	rsp, err := c.PostCostcentersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCostcentersResponse(rsp)
}

func (c *ClientWithResponses) PostCostcentersWithResponse(ctx context.Context, body PostCostcentersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCostcentersResponse, error) {
	rsp, err := c.PostCostcenters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCostcentersResponse(rsp)
}

// GetCostcentersIdWithResponse request returning *GetCostcentersIdResponse
func (c *ClientWithResponses) GetCostcentersIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetCostcentersIdResponse, error) {
	rsp, err := c.GetCostcentersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCostcentersIdResponse(rsp)
}

// PutCostcentersIdWithBodyWithResponse request with arbitrary body returning *PutCostcentersIdResponse
func (c *ClientWithResponses) PutCostcentersIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCostcentersIdResponse, error) {
	rsp, err := c.PutCostcentersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCostcentersIdResponse(rsp)
}

func (c *ClientWithResponses) PutCostcentersIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutCostcentersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCostcentersIdResponse, error) {
	rsp, err := c.PutCostcentersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCostcentersIdResponse(rsp)
}

// GetDgphDonorsWithResponse request returning *GetDgphDonorsResponse
func (c *ClientWithResponses) GetDgphDonorsWithResponse(ctx context.Context, params *GetDgphDonorsParams, reqEditors ...RequestEditorFn) (*GetDgphDonorsResponse, error) {
	rsp, err := c.GetDgphDonors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDgphDonorsResponse(rsp)
}

// GetDgphDonorsIdWithResponse request returning *GetDgphDonorsIdResponse
func (c *ClientWithResponses) GetDgphDonorsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetDgphDonorsIdResponse, error) {
	rsp, err := c.GetDgphDonorsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDgphDonorsIdResponse(rsp)
}

// GetDisabilityCategoriesWithResponse request returning *GetDisabilityCategoriesResponse
func (c *ClientWithResponses) GetDisabilityCategoriesWithResponse(ctx context.Context, params *GetDisabilityCategoriesParams, reqEditors ...RequestEditorFn) (*GetDisabilityCategoriesResponse, error) {
	rsp, err := c.GetDisabilityCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDisabilityCategoriesResponse(rsp)
}

// GetDistWorkWithResponse request returning *GetDistWorkResponse
func (c *ClientWithResponses) GetDistWorkWithResponse(ctx context.Context, params *GetDistWorkParams, reqEditors ...RequestEditorFn) (*GetDistWorkResponse, error) {
	rsp, err := c.GetDistWork(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDistWorkResponse(rsp)
}

// GetDistWorkIdWithResponse request returning *GetDistWorkIdResponse
func (c *ClientWithResponses) GetDistWorkIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetDistWorkIdResponse, error) {
	rsp, err := c.GetDistWorkId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDistWorkIdResponse(rsp)
}

// GetDocumentsWithResponse request returning *GetDocumentsResponse
func (c *ClientWithResponses) GetDocumentsWithResponse(ctx context.Context, params *GetDocumentsParams, reqEditors ...RequestEditorFn) (*GetDocumentsResponse, error) {
	rsp, err := c.GetDocuments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDocumentsResponse(rsp)
}

// GetEarningPoliciesWithResponse request returning *GetEarningPoliciesResponse
func (c *ClientWithResponses) GetEarningPoliciesWithResponse(ctx context.Context, params *GetEarningPoliciesParams, reqEditors ...RequestEditorFn) (*GetEarningPoliciesResponse, error) {
	rsp, err := c.GetEarningPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEarningPoliciesResponse(rsp)
}

// GetEmployeeRolesWithResponse request returning *GetEmployeeRolesResponse
func (c *ClientWithResponses) GetEmployeeRolesWithResponse(ctx context.Context, params *GetEmployeeRolesParams, reqEditors ...RequestEditorFn) (*GetEmployeeRolesResponse, error) {
	rsp, err := c.GetEmployeeRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeeRolesResponse(rsp)
}

// PostEmployeeRolesWithBodyWithResponse request with arbitrary body returning *PostEmployeeRolesResponse
func (c *ClientWithResponses) PostEmployeeRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmployeeRolesResponse, error) {
	rsp, err := c.PostEmployeeRolesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmployeeRolesResponse(rsp)
}

// GetEmployeeRolesIdWithResponse request returning *GetEmployeeRolesIdResponse
func (c *ClientWithResponses) GetEmployeeRolesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetEmployeeRolesIdResponse, error) {
	rsp, err := c.GetEmployeeRolesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeeRolesIdResponse(rsp)
}

// PutEmployeeRolesIdWithBodyWithResponse request with arbitrary body returning *PutEmployeeRolesIdResponse
func (c *ClientWithResponses) PutEmployeeRolesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEmployeeRolesIdResponse, error) {
	rsp, err := c.PutEmployeeRolesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEmployeeRolesIdResponse(rsp)
}

// GetEmployeesWithResponse request returning *GetEmployeesResponse
func (c *ClientWithResponses) GetEmployeesWithResponse(ctx context.Context, params *GetEmployeesParams, reqEditors ...RequestEditorFn) (*GetEmployeesResponse, error) {
	rsp, err := c.GetEmployees(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeesResponse(rsp)
}

// GetEmployeesIdWithResponse request returning *GetEmployeesIdResponse
func (c *ClientWithResponses) GetEmployeesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetEmployeesIdResponse, error) {
	rsp, err := c.GetEmployeesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeesIdResponse(rsp)
}

// GetEmployeetypesWithResponse request returning *GetEmployeetypesResponse
func (c *ClientWithResponses) GetEmployeetypesWithResponse(ctx context.Context, params *GetEmployeetypesParams, reqEditors ...RequestEditorFn) (*GetEmployeetypesResponse, error) {
	rsp, err := c.GetEmployeetypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeetypesResponse(rsp)
}

// PostEmployeetypesWithBodyWithResponse request with arbitrary body returning *PostEmployeetypesResponse
func (c *ClientWithResponses) PostEmployeetypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmployeetypesResponse, error) {
	rsp, err := c.PostEmployeetypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmployeetypesResponse(rsp)
}

func (c *ClientWithResponses) PostEmployeetypesWithResponse(ctx context.Context, body PostEmployeetypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmployeetypesResponse, error) {
	rsp, err := c.PostEmployeetypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmployeetypesResponse(rsp)
}

// GetEmployeetypesIdWithResponse request returning *GetEmployeetypesIdResponse
func (c *ClientWithResponses) GetEmployeetypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetEmployeetypesIdResponse, error) {
	rsp, err := c.GetEmployeetypesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeetypesIdResponse(rsp)
}

// PutEmployeetypesIdWithBodyWithResponse request with arbitrary body returning *PutEmployeetypesIdResponse
func (c *ClientWithResponses) PutEmployeetypesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEmployeetypesIdResponse, error) {
	rsp, err := c.PutEmployeetypesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEmployeetypesIdResponse(rsp)
}

func (c *ClientWithResponses) PutEmployeetypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutEmployeetypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEmployeetypesIdResponse, error) {
	rsp, err := c.PutEmployeetypesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEmployeetypesIdResponse(rsp)
}

// GetEventsWithResponse request returning *GetEventsResponse
func (c *ClientWithResponses) GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error) {
	rsp, err := c.GetEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsResponse(rsp)
}

// GetEventsIdWithResponse request returning *GetEventsIdResponse
func (c *ClientWithResponses) GetEventsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetEventsIdResponse, error) {
	rsp, err := c.GetEventsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsIdResponse(rsp)
}

// GetFunctionalBlocksWithResponse request returning *GetFunctionalBlocksResponse
func (c *ClientWithResponses) GetFunctionalBlocksWithResponse(ctx context.Context, params *GetFunctionalBlocksParams, reqEditors ...RequestEditorFn) (*GetFunctionalBlocksResponse, error) {
	rsp, err := c.GetFunctionalBlocks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalBlocksResponse(rsp)
}

// PostFunctionalBlocksWithBodyWithResponse request with arbitrary body returning *PostFunctionalBlocksResponse
func (c *ClientWithResponses) PostFunctionalBlocksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFunctionalBlocksResponse, error) {
	rsp, err := c.PostFunctionalBlocksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFunctionalBlocksResponse(rsp)
}

// GetFunctionalBlocksIdWithResponse request returning *GetFunctionalBlocksIdResponse
func (c *ClientWithResponses) GetFunctionalBlocksIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetFunctionalBlocksIdResponse, error) {
	rsp, err := c.GetFunctionalBlocksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionalBlocksIdResponse(rsp)
}

// PutFunctionalBlocksIdWithBodyWithResponse request with arbitrary body returning *PutFunctionalBlocksIdResponse
func (c *ClientWithResponses) PutFunctionalBlocksIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFunctionalBlocksIdResponse, error) {
	rsp, err := c.PutFunctionalBlocksIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFunctionalBlocksIdResponse(rsp)
}

// GetGradesWithResponse request returning *GetGradesResponse
func (c *ClientWithResponses) GetGradesWithResponse(ctx context.Context, params *GetGradesParams, reqEditors ...RequestEditorFn) (*GetGradesResponse, error) {
	rsp, err := c.GetGrades(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGradesResponse(rsp)
}

// PostGradesWithBodyWithResponse request with arbitrary body returning *PostGradesResponse
func (c *ClientWithResponses) PostGradesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGradesResponse, error) {
	rsp, err := c.PostGradesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGradesResponse(rsp)
}

func (c *ClientWithResponses) PostGradesWithResponse(ctx context.Context, body PostGradesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGradesResponse, error) {
	rsp, err := c.PostGrades(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGradesResponse(rsp)
}

// GetGradesIdWithResponse request returning *GetGradesIdResponse
func (c *ClientWithResponses) GetGradesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetGradesIdResponse, error) {
	rsp, err := c.GetGradesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGradesIdResponse(rsp)
}

// PutGradesIdWithBodyWithResponse request with arbitrary body returning *PutGradesIdResponse
func (c *ClientWithResponses) PutGradesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGradesIdResponse, error) {
	rsp, err := c.PutGradesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGradesIdResponse(rsp)
}

func (c *ClientWithResponses) PutGradesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutGradesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGradesIdResponse, error) {
	rsp, err := c.PutGradesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGradesIdResponse(rsp)
}

// GetHierarchiesWithResponse request returning *GetHierarchiesResponse
func (c *ClientWithResponses) GetHierarchiesWithResponse(ctx context.Context, params *GetHierarchiesParams, reqEditors ...RequestEditorFn) (*GetHierarchiesResponse, error) {
	rsp, err := c.GetHierarchies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHierarchiesResponse(rsp)
}

// PostHierarchiesWithBodyWithResponse request with arbitrary body returning *PostHierarchiesResponse
func (c *ClientWithResponses) PostHierarchiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHierarchiesResponse, error) {
	rsp, err := c.PostHierarchiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHierarchiesResponse(rsp)
}

func (c *ClientWithResponses) PostHierarchiesWithResponse(ctx context.Context, body PostHierarchiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHierarchiesResponse, error) {
	rsp, err := c.PostHierarchies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHierarchiesResponse(rsp)
}

// GetHierarchiesIdWithResponse request returning *GetHierarchiesIdResponse
func (c *ClientWithResponses) GetHierarchiesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetHierarchiesIdResponse, error) {
	rsp, err := c.GetHierarchiesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHierarchiesIdResponse(rsp)
}

// PutHierarchiesIdWithBodyWithResponse request with arbitrary body returning *PutHierarchiesIdResponse
func (c *ClientWithResponses) PutHierarchiesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutHierarchiesIdResponse, error) {
	rsp, err := c.PutHierarchiesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutHierarchiesIdResponse(rsp)
}

func (c *ClientWithResponses) PutHierarchiesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutHierarchiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutHierarchiesIdResponse, error) {
	rsp, err := c.PutHierarchiesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutHierarchiesIdResponse(rsp)
}

// GetHierarchyLinksWithResponse request returning *GetHierarchyLinksResponse
func (c *ClientWithResponses) GetHierarchyLinksWithResponse(ctx context.Context, params *GetHierarchyLinksParams, reqEditors ...RequestEditorFn) (*GetHierarchyLinksResponse, error) {
	rsp, err := c.GetHierarchyLinks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHierarchyLinksResponse(rsp)
}

// PostHierarchyLinksWithBodyWithResponse request with arbitrary body returning *PostHierarchyLinksResponse
func (c *ClientWithResponses) PostHierarchyLinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHierarchyLinksResponse, error) {
	rsp, err := c.PostHierarchyLinksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHierarchyLinksResponse(rsp)
}

func (c *ClientWithResponses) PostHierarchyLinksWithResponse(ctx context.Context, body PostHierarchyLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHierarchyLinksResponse, error) {
	rsp, err := c.PostHierarchyLinks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHierarchyLinksResponse(rsp)
}

// GetHierarchyLinksIdWithResponse request returning *GetHierarchyLinksIdResponse
func (c *ClientWithResponses) GetHierarchyLinksIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetHierarchyLinksIdResponse, error) {
	rsp, err := c.GetHierarchyLinksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHierarchyLinksIdResponse(rsp)
}

// PutHierarchyLinksIdWithBodyWithResponse request with arbitrary body returning *PutHierarchyLinksIdResponse
func (c *ClientWithResponses) PutHierarchyLinksIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutHierarchyLinksIdResponse, error) {
	rsp, err := c.PutHierarchyLinksIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutHierarchyLinksIdResponse(rsp)
}

func (c *ClientWithResponses) PutHierarchyLinksIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutHierarchyLinksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutHierarchyLinksIdResponse, error) {
	rsp, err := c.PutHierarchyLinksId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutHierarchyLinksIdResponse(rsp)
}

// GetHourlyRateWithResponse request returning *GetHourlyRateResponse
func (c *ClientWithResponses) GetHourlyRateWithResponse(ctx context.Context, params *GetHourlyRateParams, reqEditors ...RequestEditorFn) (*GetHourlyRateResponse, error) {
	rsp, err := c.GetHourlyRate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHourlyRateResponse(rsp)
}

// GetLeavingReasonsWithResponse request returning *GetLeavingReasonsResponse
func (c *ClientWithResponses) GetLeavingReasonsWithResponse(ctx context.Context, params *GetLeavingReasonsParams, reqEditors ...RequestEditorFn) (*GetLeavingReasonsResponse, error) {
	rsp, err := c.GetLeavingReasons(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeavingReasonsResponse(rsp)
}

// GetLeavingReasonsIdWithResponse request returning *GetLeavingReasonsIdResponse
func (c *ClientWithResponses) GetLeavingReasonsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetLeavingReasonsIdResponse, error) {
	rsp, err := c.GetLeavingReasonsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeavingReasonsIdResponse(rsp)
}

// GetLocationsWithResponse request returning *GetLocationsResponse
func (c *ClientWithResponses) GetLocationsWithResponse(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*GetLocationsResponse, error) {
	rsp, err := c.GetLocations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationsResponse(rsp)
}

// GetLocationsIdWithResponse request returning *GetLocationsIdResponse
func (c *ClientWithResponses) GetLocationsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetLocationsIdResponse, error) {
	rsp, err := c.GetLocationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationsIdResponse(rsp)
}

// PutManualTriggerManagersWithResponse request returning *PutManualTriggerManagersResponse
func (c *ClientWithResponses) PutManualTriggerManagersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutManualTriggerManagersResponse, error) {
	rsp, err := c.PutManualTriggerManagers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutManualTriggerManagersResponse(rsp)
}

// GetOfficesWithResponse request returning *GetOfficesResponse
func (c *ClientWithResponses) GetOfficesWithResponse(ctx context.Context, params *GetOfficesParams, reqEditors ...RequestEditorFn) (*GetOfficesResponse, error) {
	rsp, err := c.GetOffices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOfficesResponse(rsp)
}

// GetOrganizationsWithResponse request returning *GetOrganizationsResponse
func (c *ClientWithResponses) GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error) {
	rsp, err := c.GetOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsResponse(rsp)
}

// PostOrganizationsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsResponse
func (c *ClientWithResponses) PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

// GetOrganizationsIdWithResponse request returning *GetOrganizationsIdResponse
func (c *ClientWithResponses) GetOrganizationsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetOrganizationsIdResponse, error) {
	rsp, err := c.GetOrganizationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdResponse(rsp)
}

// PutOrganizationsIdWithBodyWithResponse request with arbitrary body returning *PutOrganizationsIdResponse
func (c *ClientWithResponses) PutOrganizationsIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsIdResponse, error) {
	rsp, err := c.PutOrganizationsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsIdResponse, error) {
	rsp, err := c.PutOrganizationsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsIdResponse(rsp)
}

// GetPaoBonusPaymentCategoriesWithResponse request returning *GetPaoBonusPaymentCategoriesResponse
func (c *ClientWithResponses) GetPaoBonusPaymentCategoriesWithResponse(ctx context.Context, params *GetPaoBonusPaymentCategoriesParams, reqEditors ...RequestEditorFn) (*GetPaoBonusPaymentCategoriesResponse, error) {
	rsp, err := c.GetPaoBonusPaymentCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaoBonusPaymentCategoriesResponse(rsp)
}

// GetPaoBonusPaymentCategoriesIdWithResponse request returning *GetPaoBonusPaymentCategoriesIdResponse
func (c *ClientWithResponses) GetPaoBonusPaymentCategoriesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPaoBonusPaymentCategoriesIdResponse, error) {
	rsp, err := c.GetPaoBonusPaymentCategoriesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaoBonusPaymentCategoriesIdResponse(rsp)
}

// GetPayTypesWithResponse request returning *GetPayTypesResponse
func (c *ClientWithResponses) GetPayTypesWithResponse(ctx context.Context, params *GetPayTypesParams, reqEditors ...RequestEditorFn) (*GetPayTypesResponse, error) {
	rsp, err := c.GetPayTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPayTypesResponse(rsp)
}

// GetPeopleWithResponse request returning *GetPeopleResponse
func (c *ClientWithResponses) GetPeopleWithResponse(ctx context.Context, params *GetPeopleParams, reqEditors ...RequestEditorFn) (*GetPeopleResponse, error) {
	rsp, err := c.GetPeople(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPeopleResponse(rsp)
}

// GetPeopleIdWithResponse request returning *GetPeopleIdResponse
func (c *ClientWithResponses) GetPeopleIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPeopleIdResponse, error) {
	rsp, err := c.GetPeopleId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPeopleIdResponse(rsp)
}

// GetPeopleIdDocumentsWithResponse request returning *GetPeopleIdDocumentsResponse
func (c *ClientWithResponses) GetPeopleIdDocumentsWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPeopleIdDocumentsResponse, error) {
	rsp, err := c.GetPeopleIdDocuments(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPeopleIdDocumentsResponse(rsp)
}

// GetPeopleIdOriginWithResponse request returning *GetPeopleIdOriginResponse
func (c *ClientWithResponses) GetPeopleIdOriginWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPeopleIdOriginResponse, error) {
	rsp, err := c.GetPeopleIdOrigin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPeopleIdOriginResponse(rsp)
}

// GetPersonEducationWithResponse request returning *GetPersonEducationResponse
func (c *ClientWithResponses) GetPersonEducationWithResponse(ctx context.Context, params *GetPersonEducationParams, reqEditors ...RequestEditorFn) (*GetPersonEducationResponse, error) {
	rsp, err := c.GetPersonEducation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersonEducationResponse(rsp)
}

// GetPersonalSchedulesWithResponse request returning *GetPersonalSchedulesResponse
func (c *ClientWithResponses) GetPersonalSchedulesWithResponse(ctx context.Context, params *GetPersonalSchedulesParams, reqEditors ...RequestEditorFn) (*GetPersonalSchedulesResponse, error) {
	rsp, err := c.GetPersonalSchedules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersonalSchedulesResponse(rsp)
}

// GetPositionCategoriesWithResponse request returning *GetPositionCategoriesResponse
func (c *ClientWithResponses) GetPositionCategoriesWithResponse(ctx context.Context, params *GetPositionCategoriesParams, reqEditors ...RequestEditorFn) (*GetPositionCategoriesResponse, error) {
	rsp, err := c.GetPositionCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPositionCategoriesResponse(rsp)
}

// GetPositionCategoriesIdWithResponse request returning *GetPositionCategoriesIdResponse
func (c *ClientWithResponses) GetPositionCategoriesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPositionCategoriesIdResponse, error) {
	rsp, err := c.GetPositionCategoriesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPositionCategoriesIdResponse(rsp)
}

// GetPositionsWithResponse request returning *GetPositionsResponse
func (c *ClientWithResponses) GetPositionsWithResponse(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*GetPositionsResponse, error) {
	rsp, err := c.GetPositions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPositionsResponse(rsp)
}

// PostPositionsWithBodyWithResponse request with arbitrary body returning *PostPositionsResponse
func (c *ClientWithResponses) PostPositionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPositionsResponse, error) {
	rsp, err := c.PostPositionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPositionsResponse(rsp)
}

func (c *ClientWithResponses) PostPositionsWithResponse(ctx context.Context, body PostPositionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPositionsResponse, error) {
	rsp, err := c.PostPositions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPositionsResponse(rsp)
}

// GetPositionsIdWithResponse request returning *GetPositionsIdResponse
func (c *ClientWithResponses) GetPositionsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetPositionsIdResponse, error) {
	rsp, err := c.GetPositionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPositionsIdResponse(rsp)
}

// PutPositionsIdWithBodyWithResponse request with arbitrary body returning *PutPositionsIdResponse
func (c *ClientWithResponses) PutPositionsIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPositionsIdResponse, error) {
	rsp, err := c.PutPositionsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPositionsIdResponse(rsp)
}

func (c *ClientWithResponses) PutPositionsIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutPositionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPositionsIdResponse, error) {
	rsp, err := c.PutPositionsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPositionsIdResponse(rsp)
}

// GetProductEntitiesWithResponse request returning *GetProductEntitiesResponse
func (c *ClientWithResponses) GetProductEntitiesWithResponse(ctx context.Context, params *GetProductEntitiesParams, reqEditors ...RequestEditorFn) (*GetProductEntitiesResponse, error) {
	rsp, err := c.GetProductEntities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductEntitiesResponse(rsp)
}

// GetProductEntityLinksWithResponse request returning *GetProductEntityLinksResponse
func (c *ClientWithResponses) GetProductEntityLinksWithResponse(ctx context.Context, params *GetProductEntityLinksParams, reqEditors ...RequestEditorFn) (*GetProductEntityLinksResponse, error) {
	rsp, err := c.GetProductEntityLinks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductEntityLinksResponse(rsp)
}

// GetProductStatusesWithResponse request returning *GetProductStatusesResponse
func (c *ClientWithResponses) GetProductStatusesWithResponse(ctx context.Context, params *GetProductStatusesParams, reqEditors ...RequestEditorFn) (*GetProductStatusesResponse, error) {
	rsp, err := c.GetProductStatuses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductStatusesResponse(rsp)
}

// GetProductsWithResponse request returning *GetProductsResponse
func (c *ClientWithResponses) GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProducts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

// GetProductsIdWithResponse request returning *GetProductsIdResponse
func (c *ClientWithResponses) GetProductsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetProductsIdResponse, error) {
	rsp, err := c.GetProductsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdResponse(rsp)
}

// GetSalariesWithResponse request returning *GetSalariesResponse
func (c *ClientWithResponses) GetSalariesWithResponse(ctx context.Context, params *GetSalariesParams, reqEditors ...RequestEditorFn) (*GetSalariesResponse, error) {
	rsp, err := c.GetSalaries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalariesResponse(rsp)
}

// GetSalariesIdWithResponse request returning *GetSalariesIdResponse
func (c *ClientWithResponses) GetSalariesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetSalariesIdResponse, error) {
	rsp, err := c.GetSalariesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalariesIdResponse(rsp)
}

// GetScheduleDaysWithResponse request returning *GetScheduleDaysResponse
func (c *ClientWithResponses) GetScheduleDaysWithResponse(ctx context.Context, params *GetScheduleDaysParams, reqEditors ...RequestEditorFn) (*GetScheduleDaysResponse, error) {
	rsp, err := c.GetScheduleDays(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduleDaysResponse(rsp)
}

// GetSchedulesWithResponse request returning *GetSchedulesResponse
func (c *ClientWithResponses) GetSchedulesWithResponse(ctx context.Context, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*GetSchedulesResponse, error) {
	rsp, err := c.GetSchedules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchedulesResponse(rsp)
}

// GetShiftTypesWithResponse request returning *GetShiftTypesResponse
func (c *ClientWithResponses) GetShiftTypesWithResponse(ctx context.Context, params *GetShiftTypesParams, reqEditors ...RequestEditorFn) (*GetShiftTypesResponse, error) {
	rsp, err := c.GetShiftTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShiftTypesResponse(rsp)
}

// GetStaffWithResponse request returning *GetStaffResponse
func (c *ClientWithResponses) GetStaffWithResponse(ctx context.Context, params *GetStaffParams, reqEditors ...RequestEditorFn) (*GetStaffResponse, error) {
	rsp, err := c.GetStaff(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaffResponse(rsp)
}

// GetStaffAvailabilityStatusesWithResponse request returning *GetStaffAvailabilityStatusesResponse
func (c *ClientWithResponses) GetStaffAvailabilityStatusesWithResponse(ctx context.Context, params *GetStaffAvailabilityStatusesParams, reqEditors ...RequestEditorFn) (*GetStaffAvailabilityStatusesResponse, error) {
	rsp, err := c.GetStaffAvailabilityStatuses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaffAvailabilityStatusesResponse(rsp)
}

// GetStaffAvailabilityStatusesIdWithResponse request returning *GetStaffAvailabilityStatusesIdResponse
func (c *ClientWithResponses) GetStaffAvailabilityStatusesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetStaffAvailabilityStatusesIdResponse, error) {
	rsp, err := c.GetStaffAvailabilityStatusesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaffAvailabilityStatusesIdResponse(rsp)
}

// GetStaffRolesWithResponse request returning *GetStaffRolesResponse
func (c *ClientWithResponses) GetStaffRolesWithResponse(ctx context.Context, params *GetStaffRolesParams, reqEditors ...RequestEditorFn) (*GetStaffRolesResponse, error) {
	rsp, err := c.GetStaffRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaffRolesResponse(rsp)
}

// GetStaffRolesIdWithResponse request returning *GetStaffRolesIdResponse
func (c *ClientWithResponses) GetStaffRolesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetStaffRolesIdResponse, error) {
	rsp, err := c.GetStaffRolesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaffRolesIdResponse(rsp)
}

// GetStaffTypesWithResponse request returning *GetStaffTypesResponse
func (c *ClientWithResponses) GetStaffTypesWithResponse(ctx context.Context, params *GetStaffTypesParams, reqEditors ...RequestEditorFn) (*GetStaffTypesResponse, error) {
	rsp, err := c.GetStaffTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaffTypesResponse(rsp)
}

// GetStaffTypesIdWithResponse request returning *GetStaffTypesIdResponse
func (c *ClientWithResponses) GetStaffTypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetStaffTypesIdResponse, error) {
	rsp, err := c.GetStaffTypesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaffTypesIdResponse(rsp)
}

// GetSubunitsWithResponse request returning *GetSubunitsResponse
func (c *ClientWithResponses) GetSubunitsWithResponse(ctx context.Context, params *GetSubunitsParams, reqEditors ...RequestEditorFn) (*GetSubunitsResponse, error) {
	rsp, err := c.GetSubunits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubunitsResponse(rsp)
}

// GetTaskIdWithResponse request returning *GetTaskIdResponse
func (c *ClientWithResponses) GetTaskIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetTaskIdResponse, error) {
	rsp, err := c.GetTaskId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskIdResponse(rsp)
}

// PutTaskIdWithBodyWithResponse request with arbitrary body returning *PutTaskIdResponse
func (c *ClientWithResponses) PutTaskIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaskIdResponse, error) {
	rsp, err := c.PutTaskIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaskIdResponse(rsp)
}

func (c *ClientWithResponses) PutTaskIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaskIdResponse, error) {
	rsp, err := c.PutTaskId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaskIdResponse(rsp)
}

// GetTimekeeperGroupsWithResponse request returning *GetTimekeeperGroupsResponse
func (c *ClientWithResponses) GetTimekeeperGroupsWithResponse(ctx context.Context, params *GetTimekeeperGroupsParams, reqEditors ...RequestEditorFn) (*GetTimekeeperGroupsResponse, error) {
	rsp, err := c.GetTimekeeperGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimekeeperGroupsResponse(rsp)
}

// GetTimekeeperGroupsIdWithResponse request returning *GetTimekeeperGroupsIdResponse
func (c *ClientWithResponses) GetTimekeeperGroupsIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetTimekeeperGroupsIdResponse, error) {
	rsp, err := c.GetTimekeeperGroupsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimekeeperGroupsIdResponse(rsp)
}

// GetTimekeepersWithResponse request returning *GetTimekeepersResponse
func (c *ClientWithResponses) GetTimekeepersWithResponse(ctx context.Context, params *GetTimekeepersParams, reqEditors ...RequestEditorFn) (*GetTimekeepersResponse, error) {
	rsp, err := c.GetTimekeepers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimekeepersResponse(rsp)
}

// GetUnitsWithResponse request returning *GetUnitsResponse
func (c *ClientWithResponses) GetUnitsWithResponse(ctx context.Context, params *GetUnitsParams, reqEditors ...RequestEditorFn) (*GetUnitsResponse, error) {
	rsp, err := c.GetUnits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnitsResponse(rsp)
}

// GetUnitsWithoutHierarchiesWithResponse request returning *GetUnitsWithoutHierarchiesResponse
func (c *ClientWithResponses) GetUnitsWithoutHierarchiesWithResponse(ctx context.Context, params *GetUnitsWithoutHierarchiesParams, reqEditors ...RequestEditorFn) (*GetUnitsWithoutHierarchiesResponse, error) {
	rsp, err := c.GetUnitsWithoutHierarchies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnitsWithoutHierarchiesResponse(rsp)
}

// GetUnitsIdWithResponse request returning *GetUnitsIdResponse
func (c *ClientWithResponses) GetUnitsIdWithResponse(ctx context.Context, id UUIDPathObjectID, params *GetUnitsIdParams, reqEditors ...RequestEditorFn) (*GetUnitsIdResponse, error) {
	rsp, err := c.GetUnitsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnitsIdResponse(rsp)
}

// GetUnittypesWithResponse request returning *GetUnittypesResponse
func (c *ClientWithResponses) GetUnittypesWithResponse(ctx context.Context, params *GetUnittypesParams, reqEditors ...RequestEditorFn) (*GetUnittypesResponse, error) {
	rsp, err := c.GetUnittypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnittypesResponse(rsp)
}

// PostUnittypesWithBodyWithResponse request with arbitrary body returning *PostUnittypesResponse
func (c *ClientWithResponses) PostUnittypesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnittypesResponse, error) {
	rsp, err := c.PostUnittypesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnittypesResponse(rsp)
}

func (c *ClientWithResponses) PostUnittypesWithResponse(ctx context.Context, body PostUnittypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnittypesResponse, error) {
	rsp, err := c.PostUnittypes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnittypesResponse(rsp)
}

// GetUnittypesIdWithResponse request returning *GetUnittypesIdResponse
func (c *ClientWithResponses) GetUnittypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetUnittypesIdResponse, error) {
	rsp, err := c.GetUnittypesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnittypesIdResponse(rsp)
}

// PutUnittypesIdWithBodyWithResponse request with arbitrary body returning *PutUnittypesIdResponse
func (c *ClientWithResponses) PutUnittypesIdWithBodyWithResponse(ctx context.Context, id UUIDPathObjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUnittypesIdResponse, error) {
	rsp, err := c.PutUnittypesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUnittypesIdResponse(rsp)
}

func (c *ClientWithResponses) PutUnittypesIdWithResponse(ctx context.Context, id UUIDPathObjectID, body PutUnittypesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUnittypesIdResponse, error) {
	rsp, err := c.PutUnittypesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUnittypesIdResponse(rsp)
}

// GetVacationBalancesWithResponse request returning *GetVacationBalancesResponse
func (c *ClientWithResponses) GetVacationBalancesWithResponse(ctx context.Context, params *GetVacationBalancesParams, reqEditors ...RequestEditorFn) (*GetVacationBalancesResponse, error) {
	rsp, err := c.GetVacationBalances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVacationBalancesResponse(rsp)
}

// GetVacationPeriodsWithResponse request returning *GetVacationPeriodsResponse
func (c *ClientWithResponses) GetVacationPeriodsWithResponse(ctx context.Context, params *GetVacationPeriodsParams, reqEditors ...RequestEditorFn) (*GetVacationPeriodsResponse, error) {
	rsp, err := c.GetVacationPeriods(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVacationPeriodsResponse(rsp)
}

// GetVhiWithResponse request returning *GetVhiResponse
func (c *ClientWithResponses) GetVhiWithResponse(ctx context.Context, params *GetVhiParams, reqEditors ...RequestEditorFn) (*GetVhiResponse, error) {
	rsp, err := c.GetVhi(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVhiResponse(rsp)
}

// GetVhiIdWithResponse request returning *GetVhiIdResponse
func (c *ClientWithResponses) GetVhiIdWithResponse(ctx context.Context, id UUIDPathObjectID, reqEditors ...RequestEditorFn) (*GetVhiIdResponse, error) {
	rsp, err := c.GetVhiId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVhiIdResponse(rsp)
}

// GetWorkingHoursWithResponse request returning *GetWorkingHoursResponse
func (c *ClientWithResponses) GetWorkingHoursWithResponse(ctx context.Context, params *GetWorkingHoursParams, reqEditors ...RequestEditorFn) (*GetWorkingHoursResponse, error) {
	rsp, err := c.GetWorkingHours(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkingHoursResponse(rsp)
}

// ParseGetAbsenceTypesResponse parses an HTTP response from a GetAbsenceTypesWithResponse call
func ParseGetAbsenceTypesResponse(rsp *http.Response) (*GetAbsenceTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAbsenceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AbsenceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAbsenceTypesIdResponse parses an HTTP response from a GetAbsenceTypesIdWithResponse call
func ParseGetAbsenceTypesIdResponse(rsp *http.Response) (*GetAbsenceTypesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAbsenceTypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AbsenceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAbsencesResponse parses an HTTP response from a GetAbsencesWithResponse call
func ParseGetAbsencesResponse(rsp *http.Response) (*GetAbsencesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAbsencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Absence
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAbsencesIdResponse parses an HTTP response from a GetAbsencesIdWithResponse call
func ParseGetAbsencesIdResponse(rsp *http.Response) (*GetAbsencesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAbsencesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Absence
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllowancesResponse parses an HTTP response from a GetAllowancesWithResponse call
func ParseGetAllowancesResponse(rsp *http.Response) (*GetAllowancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllowancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Allowance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllowancesIdResponse parses an HTTP response from a GetAllowancesIdWithResponse call
func ParseGetAllowancesIdResponse(rsp *http.Response) (*GetAllowancesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllowancesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Allowance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApplicantsResponse parses an HTTP response from a GetApplicantsWithResponse call
func ParseGetApplicantsResponse(rsp *http.Response) (*GetApplicantsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Applicant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApplicantsResponse parses an HTTP response from a PostApplicantsWithResponse call
func ParsePostApplicantsResponse(rsp *http.Response) (*PostApplicantsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApplicantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetApplicantsIdResponse parses an HTTP response from a GetApplicantsIdWithResponse call
func ParseGetApplicantsIdResponse(rsp *http.Response) (*GetApplicantsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicantsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Applicant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAssignmentcategoriesResponse parses an HTTP response from a GetAssignmentcategoriesWithResponse call
func ParseGetAssignmentcategoriesResponse(rsp *http.Response) (*GetAssignmentcategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssignmentcategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssignmentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAssignmentcategoriesResponse parses an HTTP response from a PostAssignmentcategoriesWithResponse call
func ParsePostAssignmentcategoriesResponse(rsp *http.Response) (*PostAssignmentcategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAssignmentcategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAssignmentcategoriesIdResponse parses an HTTP response from a GetAssignmentcategoriesIdWithResponse call
func ParseGetAssignmentcategoriesIdResponse(rsp *http.Response) (*GetAssignmentcategoriesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssignmentcategoriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssignmentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutAssignmentcategoriesIdResponse parses an HTTP response from a PutAssignmentcategoriesIdWithResponse call
func ParsePutAssignmentcategoriesIdResponse(rsp *http.Response) (*PutAssignmentcategoriesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAssignmentcategoriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssignmentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAssignmentsResponse parses an HTTP response from a GetAssignmentsWithResponse call
func ParseGetAssignmentsResponse(rsp *http.Response) (*GetAssignmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Assignment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAssignmentsIdResponse parses an HTTP response from a GetAssignmentsIdWithResponse call
func ParseGetAssignmentsIdResponse(rsp *http.Response) (*GetAssignmentsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssignmentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Assignment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAssignmentstatusResponse parses an HTTP response from a GetAssignmentstatusWithResponse call
func ParseGetAssignmentstatusResponse(rsp *http.Response) (*GetAssignmentstatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssignmentstatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssignmentStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAssignmentstatusResponse parses an HTTP response from a PostAssignmentstatusWithResponse call
func ParsePostAssignmentstatusResponse(rsp *http.Response) (*PostAssignmentstatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAssignmentstatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAssignmentstatusIdResponse parses an HTTP response from a GetAssignmentstatusIdWithResponse call
func ParseGetAssignmentstatusIdResponse(rsp *http.Response) (*GetAssignmentstatusIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssignmentstatusIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssignmentStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutAssignmentstatusIdResponse parses an HTTP response from a PutAssignmentstatusIdWithResponse call
func ParsePutAssignmentstatusIdResponse(rsp *http.Response) (*PutAssignmentstatusIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAssignmentstatusIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssignmentStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAssignmenttypesResponse parses an HTTP response from a GetAssignmenttypesWithResponse call
func ParseGetAssignmenttypesResponse(rsp *http.Response) (*GetAssignmenttypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssignmenttypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssignmentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAssignmenttypesResponse parses an HTTP response from a PostAssignmenttypesWithResponse call
func ParsePostAssignmenttypesResponse(rsp *http.Response) (*PostAssignmenttypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAssignmenttypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAssignmenttypesIdResponse parses an HTTP response from a GetAssignmenttypesIdWithResponse call
func ParseGetAssignmenttypesIdResponse(rsp *http.Response) (*GetAssignmenttypesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssignmenttypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssignmentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutAssignmenttypesIdResponse parses an HTTP response from a PutAssignmenttypesIdWithResponse call
func ParsePutAssignmenttypesIdResponse(rsp *http.Response) (*PutAssignmenttypesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAssignmenttypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssignmentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBackBonusPaymentCategoriesResponse parses an HTTP response from a GetBackBonusPaymentCategoriesWithResponse call
func ParseGetBackBonusPaymentCategoriesResponse(rsp *http.Response) (*GetBackBonusPaymentCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackBonusPaymentCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BackBonusPaymentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBackBonusPaymentCategoriesIdResponse parses an HTTP response from a GetBackBonusPaymentCategoriesIdWithResponse call
func ParseGetBackBonusPaymentCategoriesIdResponse(rsp *http.Response) (*GetBackBonusPaymentCategoriesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackBonusPaymentCategoriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackBonusPaymentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBalanceUnitsResponse parses an HTTP response from a GetBalanceUnitsWithResponse call
func ParseGetBalanceUnitsResponse(rsp *http.Response) (*GetBalanceUnitsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBalanceUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceUnit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBalanceUnitsResponse parses an HTTP response from a PostBalanceUnitsWithResponse call
func ParsePostBalanceUnitsResponse(rsp *http.Response) (*PostBalanceUnitsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBalanceUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBalanceUnitsIdResponse parses an HTTP response from a GetBalanceUnitsIdWithResponse call
func ParseGetBalanceUnitsIdResponse(rsp *http.Response) (*GetBalanceUnitsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBalanceUnitsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BalanceUnit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBalanceUnitsIdResponse parses an HTTP response from a PutBalanceUnitsIdWithResponse call
func ParsePutBalanceUnitsIdResponse(rsp *http.Response) (*PutBalanceUnitsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBalanceUnitsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BalanceUnit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetBanksResponse parses an HTTP response from a GetBanksWithResponse call
func ParseGetBanksResponse(rsp *http.Response) (*GetBanksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBanksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Bank
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBanksIdResponse parses an HTTP response from a GetBanksIdWithResponse call
func ParseGetBanksIdResponse(rsp *http.Response) (*GetBanksIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBanksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bank
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchAbsenceTypesResponse parses an HTTP response from a PostBatchAbsenceTypesWithResponse call
func ParsePostBatchAbsenceTypesResponse(rsp *http.Response) (*PostBatchAbsenceTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchAbsenceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchAbsenceTypesResponse parses an HTTP response from a PutBatchAbsenceTypesWithResponse call
func ParsePutBatchAbsenceTypesResponse(rsp *http.Response) (*PutBatchAbsenceTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchAbsenceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchAbsencesResponse parses an HTTP response from a PostBatchAbsencesWithResponse call
func ParsePostBatchAbsencesResponse(rsp *http.Response) (*PostBatchAbsencesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchAbsencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchAbsencesResponse parses an HTTP response from a PutBatchAbsencesWithResponse call
func ParsePutBatchAbsencesResponse(rsp *http.Response) (*PutBatchAbsencesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchAbsencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchAllowancesResponse parses an HTTP response from a PostBatchAllowancesWithResponse call
func ParsePostBatchAllowancesResponse(rsp *http.Response) (*PostBatchAllowancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchAllowancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchAllowancesResponse parses an HTTP response from a PutBatchAllowancesWithResponse call
func ParsePutBatchAllowancesResponse(rsp *http.Response) (*PutBatchAllowancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchAllowancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchApplicantsResponse parses an HTTP response from a PostBatchApplicantsWithResponse call
func ParsePostBatchApplicantsResponse(rsp *http.Response) (*PostBatchApplicantsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchApplicantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchApplicantsResponse parses an HTTP response from a PutBatchApplicantsWithResponse call
func ParsePutBatchApplicantsResponse(rsp *http.Response) (*PutBatchApplicantsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchApplicantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchAssignmentsResponse parses an HTTP response from a PostBatchAssignmentsWithResponse call
func ParsePostBatchAssignmentsResponse(rsp *http.Response) (*PostBatchAssignmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchAssignmentsResponse parses an HTTP response from a PutBatchAssignmentsWithResponse call
func ParsePutBatchAssignmentsResponse(rsp *http.Response) (*PutBatchAssignmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchAssignmentsWithHistoryResponse parses an HTTP response from a PostBatchAssignmentsWithHistoryWithResponse call
func ParsePostBatchAssignmentsWithHistoryResponse(rsp *http.Response) (*PostBatchAssignmentsWithHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchAssignmentsWithHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchAssignmentsWithHistoryResponse parses an HTTP response from a PutBatchAssignmentsWithHistoryWithResponse call
func ParsePutBatchAssignmentsWithHistoryResponse(rsp *http.Response) (*PutBatchAssignmentsWithHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchAssignmentsWithHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchBackBonusPaymentCategoriesResponse parses an HTTP response from a PostBatchBackBonusPaymentCategoriesWithResponse call
func ParsePostBatchBackBonusPaymentCategoriesResponse(rsp *http.Response) (*PostBatchBackBonusPaymentCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchBackBonusPaymentCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchBackBonusPaymentCategoriesResponse parses an HTTP response from a PutBatchBackBonusPaymentCategoriesWithResponse call
func ParsePutBatchBackBonusPaymentCategoriesResponse(rsp *http.Response) (*PutBatchBackBonusPaymentCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchBackBonusPaymentCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchBanksResponse parses an HTTP response from a PostBatchBanksWithResponse call
func ParsePostBatchBanksResponse(rsp *http.Response) (*PostBatchBanksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchBanksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchBanksResponse parses an HTTP response from a PutBatchBanksWithResponse call
func ParsePutBatchBanksResponse(rsp *http.Response) (*PutBatchBanksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchBanksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchCalendarResponse parses an HTTP response from a PostBatchCalendarWithResponse call
func ParsePostBatchCalendarResponse(rsp *http.Response) (*PostBatchCalendarResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchCalendarResponse parses an HTTP response from a PutBatchCalendarWithResponse call
func ParsePutBatchCalendarResponse(rsp *http.Response) (*PutBatchCalendarResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchCalendarDaysResponse parses an HTTP response from a PostBatchCalendarDaysWithResponse call
func ParsePostBatchCalendarDaysResponse(rsp *http.Response) (*PostBatchCalendarDaysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchCalendarDaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchCalendarDaysResponse parses an HTTP response from a PutBatchCalendarDaysWithResponse call
func ParsePutBatchCalendarDaysResponse(rsp *http.Response) (*PutBatchCalendarDaysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchCalendarDaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchContractsResponse parses an HTTP response from a PostBatchContractsWithResponse call
func ParsePostBatchContractsResponse(rsp *http.Response) (*PostBatchContractsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchContractsResponse parses an HTTP response from a PutBatchContractsWithResponse call
func ParsePutBatchContractsResponse(rsp *http.Response) (*PutBatchContractsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchDeleteResponse parses an HTTP response from a PostBatchDeleteWithResponse call
func ParsePostBatchDeleteResponse(rsp *http.Response) (*PostBatchDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchDgphDonorsResponse parses an HTTP response from a PostBatchDgphDonorsWithResponse call
func ParsePostBatchDgphDonorsResponse(rsp *http.Response) (*PostBatchDgphDonorsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchDgphDonorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchDgphDonorsResponse parses an HTTP response from a PutBatchDgphDonorsWithResponse call
func ParsePutBatchDgphDonorsResponse(rsp *http.Response) (*PutBatchDgphDonorsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchDgphDonorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchDisabilityCategoriesResponse parses an HTTP response from a PostBatchDisabilityCategoriesWithResponse call
func ParsePostBatchDisabilityCategoriesResponse(rsp *http.Response) (*PostBatchDisabilityCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchDisabilityCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchDisabilityCategoriesResponse parses an HTTP response from a PutBatchDisabilityCategoriesWithResponse call
func ParsePutBatchDisabilityCategoriesResponse(rsp *http.Response) (*PutBatchDisabilityCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchDisabilityCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchDistWorkResponse parses an HTTP response from a PostBatchDistWorkWithResponse call
func ParsePostBatchDistWorkResponse(rsp *http.Response) (*PostBatchDistWorkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchDistWorkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchDistWorkResponse parses an HTTP response from a PutBatchDistWorkWithResponse call
func ParsePutBatchDistWorkResponse(rsp *http.Response) (*PutBatchDistWorkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchDistWorkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchEarningPoliciesResponse parses an HTTP response from a PostBatchEarningPoliciesWithResponse call
func ParsePostBatchEarningPoliciesResponse(rsp *http.Response) (*PostBatchEarningPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchEarningPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchEarningPoliciesResponse parses an HTTP response from a PutBatchEarningPoliciesWithResponse call
func ParsePutBatchEarningPoliciesResponse(rsp *http.Response) (*PutBatchEarningPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchEarningPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchEmployeePersonalDataResponse parses an HTTP response from a PutBatchEmployeePersonalDataWithResponse call
func ParsePutBatchEmployeePersonalDataResponse(rsp *http.Response) (*PutBatchEmployeePersonalDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchEmployeePersonalDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchEmployeesResponse parses an HTTP response from a PostBatchEmployeesWithResponse call
func ParsePostBatchEmployeesResponse(rsp *http.Response) (*PostBatchEmployeesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchEmployeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchEmployeesResponse parses an HTTP response from a PutBatchEmployeesWithResponse call
func ParsePutBatchEmployeesResponse(rsp *http.Response) (*PutBatchEmployeesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchEmployeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchGradesResponse parses an HTTP response from a PostBatchGradesWithResponse call
func ParsePostBatchGradesResponse(rsp *http.Response) (*PostBatchGradesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchGradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchGradesResponse parses an HTTP response from a PutBatchGradesWithResponse call
func ParsePutBatchGradesResponse(rsp *http.Response) (*PutBatchGradesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchGradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchHierarchyLinksResponse parses an HTTP response from a PostBatchHierarchyLinksWithResponse call
func ParsePostBatchHierarchyLinksResponse(rsp *http.Response) (*PostBatchHierarchyLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchHierarchyLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchHierarchyLinksResponse parses an HTTP response from a PutBatchHierarchyLinksWithResponse call
func ParsePutBatchHierarchyLinksResponse(rsp *http.Response) (*PutBatchHierarchyLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchHierarchyLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchHourlyRateResponse parses an HTTP response from a PostBatchHourlyRateWithResponse call
func ParsePostBatchHourlyRateResponse(rsp *http.Response) (*PostBatchHourlyRateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchHourlyRateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchHourlyRateResponse parses an HTTP response from a PutBatchHourlyRateWithResponse call
func ParsePutBatchHourlyRateResponse(rsp *http.Response) (*PutBatchHourlyRateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchHourlyRateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchLeavingReasonsResponse parses an HTTP response from a PostBatchLeavingReasonsWithResponse call
func ParsePostBatchLeavingReasonsResponse(rsp *http.Response) (*PostBatchLeavingReasonsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchLeavingReasonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchLeavingReasonsResponse parses an HTTP response from a PutBatchLeavingReasonsWithResponse call
func ParsePutBatchLeavingReasonsResponse(rsp *http.Response) (*PutBatchLeavingReasonsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchLeavingReasonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchLocationsResponse parses an HTTP response from a PostBatchLocationsWithResponse call
func ParsePostBatchLocationsResponse(rsp *http.Response) (*PostBatchLocationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchLocationsResponse parses an HTTP response from a PutBatchLocationsWithResponse call
func ParsePutBatchLocationsResponse(rsp *http.Response) (*PutBatchLocationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchOfficesResponse parses an HTTP response from a PostBatchOfficesWithResponse call
func ParsePostBatchOfficesResponse(rsp *http.Response) (*PostBatchOfficesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchOfficesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchOfficesResponse parses an HTTP response from a PutBatchOfficesWithResponse call
func ParsePutBatchOfficesResponse(rsp *http.Response) (*PutBatchOfficesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchOfficesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchPaoBonusPaymentCategoriesResponse parses an HTTP response from a PostBatchPaoBonusPaymentCategoriesWithResponse call
func ParsePostBatchPaoBonusPaymentCategoriesResponse(rsp *http.Response) (*PostBatchPaoBonusPaymentCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchPaoBonusPaymentCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchPaoBonusPaymentCategoriesResponse parses an HTTP response from a PutBatchPaoBonusPaymentCategoriesWithResponse call
func ParsePutBatchPaoBonusPaymentCategoriesResponse(rsp *http.Response) (*PutBatchPaoBonusPaymentCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchPaoBonusPaymentCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchPayTypesResponse parses an HTTP response from a PostBatchPayTypesWithResponse call
func ParsePostBatchPayTypesResponse(rsp *http.Response) (*PostBatchPayTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchPayTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchPayTypesResponse parses an HTTP response from a PutBatchPayTypesWithResponse call
func ParsePutBatchPayTypesResponse(rsp *http.Response) (*PutBatchPayTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchPayTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchPeopleResponse parses an HTTP response from a PostBatchPeopleWithResponse call
func ParsePostBatchPeopleResponse(rsp *http.Response) (*PostBatchPeopleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchPeopleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchPeopleResponse parses an HTTP response from a PutBatchPeopleWithResponse call
func ParsePutBatchPeopleResponse(rsp *http.Response) (*PutBatchPeopleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchPeopleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchPersonEducationResponse parses an HTTP response from a PostBatchPersonEducationWithResponse call
func ParsePostBatchPersonEducationResponse(rsp *http.Response) (*PostBatchPersonEducationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchPersonEducationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchPersonEducationResponse parses an HTTP response from a PutBatchPersonEducationWithResponse call
func ParsePutBatchPersonEducationResponse(rsp *http.Response) (*PutBatchPersonEducationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchPersonEducationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchPersonMilitaryResponse parses an HTTP response from a PutBatchPersonMilitaryWithResponse call
func ParsePutBatchPersonMilitaryResponse(rsp *http.Response) (*PutBatchPersonMilitaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchPersonMilitaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchPersonPictureIdResponse parses an HTTP response from a PutBatchPersonPictureIdWithResponse call
func ParsePutBatchPersonPictureIdResponse(rsp *http.Response) (*PutBatchPersonPictureIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchPersonPictureIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchPersonalSchedulesResponse parses an HTTP response from a PostBatchPersonalSchedulesWithResponse call
func ParsePostBatchPersonalSchedulesResponse(rsp *http.Response) (*PostBatchPersonalSchedulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchPersonalSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchPersonalSchedulesResponse parses an HTTP response from a PutBatchPersonalSchedulesWithResponse call
func ParsePutBatchPersonalSchedulesResponse(rsp *http.Response) (*PutBatchPersonalSchedulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchPersonalSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchPositionCategoriesResponse parses an HTTP response from a PostBatchPositionCategoriesWithResponse call
func ParsePostBatchPositionCategoriesResponse(rsp *http.Response) (*PostBatchPositionCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchPositionCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchPositionCategoriesResponse parses an HTTP response from a PutBatchPositionCategoriesWithResponse call
func ParsePutBatchPositionCategoriesResponse(rsp *http.Response) (*PutBatchPositionCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchPositionCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchProductEntitiesResponse parses an HTTP response from a PostBatchProductEntitiesWithResponse call
func ParsePostBatchProductEntitiesResponse(rsp *http.Response) (*PostBatchProductEntitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchProductEntitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchProductEntitiesResponse parses an HTTP response from a PutBatchProductEntitiesWithResponse call
func ParsePutBatchProductEntitiesResponse(rsp *http.Response) (*PutBatchProductEntitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchProductEntitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchProductEntityLinksResponse parses an HTTP response from a PostBatchProductEntityLinksWithResponse call
func ParsePostBatchProductEntityLinksResponse(rsp *http.Response) (*PostBatchProductEntityLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchProductEntityLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchProductEntityLinksResponse parses an HTTP response from a PutBatchProductEntityLinksWithResponse call
func ParsePutBatchProductEntityLinksResponse(rsp *http.Response) (*PutBatchProductEntityLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchProductEntityLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchProductStatusesResponse parses an HTTP response from a PostBatchProductStatusesWithResponse call
func ParsePostBatchProductStatusesResponse(rsp *http.Response) (*PostBatchProductStatusesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchProductStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchProductStatusesResponse parses an HTTP response from a PutBatchProductStatusesWithResponse call
func ParsePutBatchProductStatusesResponse(rsp *http.Response) (*PutBatchProductStatusesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchProductStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchProductsResponse parses an HTTP response from a PostBatchProductsWithResponse call
func ParsePostBatchProductsResponse(rsp *http.Response) (*PostBatchProductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchProductsResponse parses an HTTP response from a PutBatchProductsWithResponse call
func ParsePutBatchProductsResponse(rsp *http.Response) (*PutBatchProductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchSalariesResponse parses an HTTP response from a PostBatchSalariesWithResponse call
func ParsePostBatchSalariesResponse(rsp *http.Response) (*PostBatchSalariesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchSalariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchSalariesResponse parses an HTTP response from a PutBatchSalariesWithResponse call
func ParsePutBatchSalariesResponse(rsp *http.Response) (*PutBatchSalariesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchSalariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchScheduleDaysResponse parses an HTTP response from a PostBatchScheduleDaysWithResponse call
func ParsePostBatchScheduleDaysResponse(rsp *http.Response) (*PostBatchScheduleDaysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchScheduleDaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchScheduleDaysResponse parses an HTTP response from a PutBatchScheduleDaysWithResponse call
func ParsePutBatchScheduleDaysResponse(rsp *http.Response) (*PutBatchScheduleDaysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchScheduleDaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchSchedulesResponse parses an HTTP response from a PostBatchSchedulesWithResponse call
func ParsePostBatchSchedulesResponse(rsp *http.Response) (*PostBatchSchedulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchSchedulesResponse parses an HTTP response from a PutBatchSchedulesWithResponse call
func ParsePutBatchSchedulesResponse(rsp *http.Response) (*PutBatchSchedulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchShiftTypesResponse parses an HTTP response from a PostBatchShiftTypesWithResponse call
func ParsePostBatchShiftTypesResponse(rsp *http.Response) (*PostBatchShiftTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchShiftTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchShiftTypesResponse parses an HTTP response from a PutBatchShiftTypesWithResponse call
func ParsePutBatchShiftTypesResponse(rsp *http.Response) (*PutBatchShiftTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchShiftTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchStaffResponse parses an HTTP response from a PostBatchStaffWithResponse call
func ParsePostBatchStaffResponse(rsp *http.Response) (*PostBatchStaffResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchStaffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchStaffResponse parses an HTTP response from a PutBatchStaffWithResponse call
func ParsePutBatchStaffResponse(rsp *http.Response) (*PutBatchStaffResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchStaffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchStaffAvailabilityStatusesResponse parses an HTTP response from a PostBatchStaffAvailabilityStatusesWithResponse call
func ParsePostBatchStaffAvailabilityStatusesResponse(rsp *http.Response) (*PostBatchStaffAvailabilityStatusesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchStaffAvailabilityStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchStaffAvailabilityStatusesResponse parses an HTTP response from a PutBatchStaffAvailabilityStatusesWithResponse call
func ParsePutBatchStaffAvailabilityStatusesResponse(rsp *http.Response) (*PutBatchStaffAvailabilityStatusesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchStaffAvailabilityStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchStaffRolesResponse parses an HTTP response from a PostBatchStaffRolesWithResponse call
func ParsePostBatchStaffRolesResponse(rsp *http.Response) (*PostBatchStaffRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchStaffRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchStaffRolesResponse parses an HTTP response from a PutBatchStaffRolesWithResponse call
func ParsePutBatchStaffRolesResponse(rsp *http.Response) (*PutBatchStaffRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchStaffRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchStaffTypesResponse parses an HTTP response from a PostBatchStaffTypesWithResponse call
func ParsePostBatchStaffTypesResponse(rsp *http.Response) (*PostBatchStaffTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchStaffTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchStaffTypesResponse parses an HTTP response from a PutBatchStaffTypesWithResponse call
func ParsePutBatchStaffTypesResponse(rsp *http.Response) (*PutBatchStaffTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchStaffTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchStaffWithHistoryResponse parses an HTTP response from a PostBatchStaffWithHistoryWithResponse call
func ParsePostBatchStaffWithHistoryResponse(rsp *http.Response) (*PostBatchStaffWithHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchStaffWithHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchStaffWithHistoryResponse parses an HTTP response from a PutBatchStaffWithHistoryWithResponse call
func ParsePutBatchStaffWithHistoryResponse(rsp *http.Response) (*PutBatchStaffWithHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchStaffWithHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchTimekeeperGroupsResponse parses an HTTP response from a PostBatchTimekeeperGroupsWithResponse call
func ParsePostBatchTimekeeperGroupsResponse(rsp *http.Response) (*PostBatchTimekeeperGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchTimekeeperGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchTimekeeperGroupsResponse parses an HTTP response from a PutBatchTimekeeperGroupsWithResponse call
func ParsePutBatchTimekeeperGroupsResponse(rsp *http.Response) (*PutBatchTimekeeperGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchTimekeeperGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchTimekeepersResponse parses an HTTP response from a PostBatchTimekeepersWithResponse call
func ParsePostBatchTimekeepersResponse(rsp *http.Response) (*PostBatchTimekeepersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchTimekeepersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchUnitsResponse parses an HTTP response from a PostBatchUnitsWithResponse call
func ParsePostBatchUnitsResponse(rsp *http.Response) (*PostBatchUnitsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchUnitsResponse parses an HTTP response from a PutBatchUnitsWithResponse call
func ParsePutBatchUnitsResponse(rsp *http.Response) (*PutBatchUnitsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchVacationBalancesResponse parses an HTTP response from a PostBatchVacationBalancesWithResponse call
func ParsePostBatchVacationBalancesResponse(rsp *http.Response) (*PostBatchVacationBalancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchVacationBalancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchVacationBalancesResponse parses an HTTP response from a PutBatchVacationBalancesWithResponse call
func ParsePutBatchVacationBalancesResponse(rsp *http.Response) (*PutBatchVacationBalancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchVacationBalancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchVacationPeriodsResponse parses an HTTP response from a PostBatchVacationPeriodsWithResponse call
func ParsePostBatchVacationPeriodsResponse(rsp *http.Response) (*PostBatchVacationPeriodsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchVacationPeriodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchVacationPeriodsResponse parses an HTTP response from a PutBatchVacationPeriodsWithResponse call
func ParsePutBatchVacationPeriodsResponse(rsp *http.Response) (*PutBatchVacationPeriodsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchVacationPeriodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchVhiResponse parses an HTTP response from a PostBatchVhiWithResponse call
func ParsePostBatchVhiResponse(rsp *http.Response) (*PostBatchVhiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchVhiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchVhiResponse parses an HTTP response from a PutBatchVhiWithResponse call
func ParsePutBatchVhiResponse(rsp *http.Response) (*PutBatchVhiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchVhiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchWorkWeekHoursResponse parses an HTTP response from a PostBatchWorkWeekHoursWithResponse call
func ParsePostBatchWorkWeekHoursResponse(rsp *http.Response) (*PostBatchWorkWeekHoursResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchWorkWeekHoursResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchWorkWeekHoursResponse parses an HTTP response from a PutBatchWorkWeekHoursWithResponse call
func ParsePutBatchWorkWeekHoursResponse(rsp *http.Response) (*PutBatchWorkWeekHoursResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchWorkWeekHoursResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostBatchWorkingHoursResponse parses an HTTP response from a PostBatchWorkingHoursWithResponse call
func ParsePostBatchWorkingHoursResponse(rsp *http.Response) (*PostBatchWorkingHoursResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBatchWorkingHoursResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BatchCreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutBatchWorkingHoursResponse parses an HTTP response from a PutBatchWorkingHoursWithResponse call
func ParsePutBatchWorkingHoursResponse(rsp *http.Response) (*PutBatchWorkingHoursResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBatchWorkingHoursResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCalendarDaysResponse parses an HTTP response from a GetCalendarDaysWithResponse call
func ParseGetCalendarDaysResponse(rsp *http.Response) (*GetCalendarDaysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCalendarDaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CalendarDay
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCalendarsResponse parses an HTTP response from a GetCalendarsWithResponse call
func ParseGetCalendarsResponse(rsp *http.Response) (*GetCalendarsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCalendarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Calendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCalendarsIdResponse parses an HTTP response from a GetCalendarsIdWithResponse call
func ParseGetCalendarsIdResponse(rsp *http.Response) (*GetCalendarsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCalendarsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Calendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetClustersResponse parses an HTTP response from a GetClustersWithResponse call
func ParseGetClustersResponse(rsp *http.Response) (*GetClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostClustersResponse parses an HTTP response from a PostClustersWithResponse call
func ParsePostClustersResponse(rsp *http.Response) (*PostClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClustersIdResponse parses an HTTP response from a GetClustersIdWithResponse call
func ParseGetClustersIdResponse(rsp *http.Response) (*GetClustersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClustersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutClustersIdResponse parses an HTTP response from a PutClustersIdWithResponse call
func ParsePutClustersIdResponse(rsp *http.Response) (*PutClustersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClustersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetComplexAssignmentsResponse parses an HTTP response from a GetComplexAssignmentsWithResponse call
func ParseGetComplexAssignmentsResponse(rsp *http.Response) (*GetComplexAssignmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComplexAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ComplexAssignment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetComplexAssignmentsV2Response parses an HTTP response from a GetComplexAssignmentsV2WithResponse call
func ParseGetComplexAssignmentsV2Response(rsp *http.Response) (*GetComplexAssignmentsV2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComplexAssignmentsV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ComplexAssignmentV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetComplexOrganizationStructureResponse parses an HTTP response from a GetComplexOrganizationStructureWithResponse call
func ParseGetComplexOrganizationStructureResponse(rsp *http.Response) (*GetComplexOrganizationStructureResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComplexOrganizationStructureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationStructure
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetComplexPeopleIdResponse parses an HTTP response from a GetComplexPeopleIdWithResponse call
func ParseGetComplexPeopleIdResponse(rsp *http.Response) (*GetComplexPeopleIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComplexPeopleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullPersonProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetComplexUnitpathResponse parses an HTTP response from a GetComplexUnitpathWithResponse call
func ParseGetComplexUnitpathResponse(rsp *http.Response) (*GetComplexUnitpathResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComplexUnitpathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UnitPath
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetComplexUnitsIdSubunitsResponse parses an HTTP response from a GetComplexUnitsIdSubunitsWithResponse call
func ParseGetComplexUnitsIdSubunitsResponse(rsp *http.Response) (*GetComplexUnitsIdSubunitsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComplexUnitsIdSubunitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullUnit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContractsResponse parses an HTTP response from a GetContractsWithResponse call
func ParseGetContractsResponse(rsp *http.Response) (*GetContractsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Contract
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetContractstatusResponse parses an HTTP response from a GetContractstatusWithResponse call
func ParseGetContractstatusResponse(rsp *http.Response) (*GetContractstatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractstatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ContractStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostContractstatusResponse parses an HTTP response from a PostContractstatusWithResponse call
func ParsePostContractstatusResponse(rsp *http.Response) (*PostContractstatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContractstatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetContractstatusIdResponse parses an HTTP response from a GetContractstatusIdWithResponse call
func ParseGetContractstatusIdResponse(rsp *http.Response) (*GetContractstatusIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractstatusIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutContractstatusIdResponse parses an HTTP response from a PutContractstatusIdWithResponse call
func ParsePutContractstatusIdResponse(rsp *http.Response) (*PutContractstatusIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutContractstatusIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetContracttypesResponse parses an HTTP response from a GetContracttypesWithResponse call
func ParseGetContracttypesResponse(rsp *http.Response) (*GetContracttypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContracttypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ContractType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostContracttypesResponse parses an HTTP response from a PostContracttypesWithResponse call
func ParsePostContracttypesResponse(rsp *http.Response) (*PostContracttypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContracttypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetContracttypesIdResponse parses an HTTP response from a GetContracttypesIdWithResponse call
func ParseGetContracttypesIdResponse(rsp *http.Response) (*GetContracttypesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContracttypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutContracttypesIdResponse parses an HTTP response from a PutContracttypesIdWithResponse call
func ParsePutContracttypesIdResponse(rsp *http.Response) (*PutContracttypesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutContracttypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCostcentersResponse parses an HTTP response from a GetCostcentersWithResponse call
func ParseGetCostcentersResponse(rsp *http.Response) (*GetCostcentersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCostcentersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CostCenter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCostcentersResponse parses an HTTP response from a PostCostcentersWithResponse call
func ParsePostCostcentersResponse(rsp *http.Response) (*PostCostcentersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCostcentersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCostcentersIdResponse parses an HTTP response from a GetCostcentersIdWithResponse call
func ParseGetCostcentersIdResponse(rsp *http.Response) (*GetCostcentersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCostcentersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostCenter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutCostcentersIdResponse parses an HTTP response from a PutCostcentersIdWithResponse call
func ParsePutCostcentersIdResponse(rsp *http.Response) (*PutCostcentersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCostcentersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostCenter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDgphDonorsResponse parses an HTTP response from a GetDgphDonorsWithResponse call
func ParseGetDgphDonorsResponse(rsp *http.Response) (*GetDgphDonorsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDgphDonorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DGPHDonor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDgphDonorsIdResponse parses an HTTP response from a GetDgphDonorsIdWithResponse call
func ParseGetDgphDonorsIdResponse(rsp *http.Response) (*GetDgphDonorsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDgphDonorsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DGPHDonor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDisabilityCategoriesResponse parses an HTTP response from a GetDisabilityCategoriesWithResponse call
func ParseGetDisabilityCategoriesResponse(rsp *http.Response) (*GetDisabilityCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDisabilityCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DisabilityCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDistWorkResponse parses an HTTP response from a GetDistWorkWithResponse call
func ParseGetDistWorkResponse(rsp *http.Response) (*GetDistWorkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDistWorkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DistWork
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDistWorkIdResponse parses an HTTP response from a GetDistWorkIdWithResponse call
func ParseGetDistWorkIdResponse(rsp *http.Response) (*GetDistWorkIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDistWorkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistWork
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDocumentsResponse parses an HTTP response from a GetDocumentsWithResponse call
func ParseGetDocumentsResponse(rsp *http.Response) (*GetDocumentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Documents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetEarningPoliciesResponse parses an HTTP response from a GetEarningPoliciesWithResponse call
func ParseGetEarningPoliciesResponse(rsp *http.Response) (*GetEarningPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEarningPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EarningPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetEmployeeRolesResponse parses an HTTP response from a GetEmployeeRolesWithResponse call
func ParseGetEmployeeRolesResponse(rsp *http.Response) (*GetEmployeeRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeeRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EmployeeRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostEmployeeRolesResponse parses an HTTP response from a PostEmployeeRolesWithResponse call
func ParsePostEmployeeRolesResponse(rsp *http.Response) (*PostEmployeeRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEmployeeRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEmployeeRolesIdResponse parses an HTTP response from a GetEmployeeRolesIdWithResponse call
func ParseGetEmployeeRolesIdResponse(rsp *http.Response) (*GetEmployeeRolesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeeRolesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmployeeRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutEmployeeRolesIdResponse parses an HTTP response from a PutEmployeeRolesIdWithResponse call
func ParsePutEmployeeRolesIdResponse(rsp *http.Response) (*PutEmployeeRolesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutEmployeeRolesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetEmployeesResponse parses an HTTP response from a GetEmployeesWithResponse call
func ParseGetEmployeesResponse(rsp *http.Response) (*GetEmployeesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Employee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetEmployeesIdResponse parses an HTTP response from a GetEmployeesIdWithResponse call
func ParseGetEmployeesIdResponse(rsp *http.Response) (*GetEmployeesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Employee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetEmployeetypesResponse parses an HTTP response from a GetEmployeetypesWithResponse call
func ParseGetEmployeetypesResponse(rsp *http.Response) (*GetEmployeetypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeetypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EmployeeType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostEmployeetypesResponse parses an HTTP response from a PostEmployeetypesWithResponse call
func ParsePostEmployeetypesResponse(rsp *http.Response) (*PostEmployeetypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEmployeetypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetEmployeetypesIdResponse parses an HTTP response from a GetEmployeetypesIdWithResponse call
func ParseGetEmployeetypesIdResponse(rsp *http.Response) (*GetEmployeetypesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeetypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmployeeType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutEmployeetypesIdResponse parses an HTTP response from a PutEmployeetypesIdWithResponse call
func ParsePutEmployeetypesIdResponse(rsp *http.Response) (*PutEmployeetypesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutEmployeetypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmployeeType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetEventsResponse parses an HTTP response from a GetEventsWithResponse call
func ParseGetEventsResponse(rsp *http.Response) (*GetEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetEventsIdResponse parses an HTTP response from a GetEventsIdWithResponse call
func ParseGetEventsIdResponse(rsp *http.Response) (*GetEventsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFunctionalBlocksResponse parses an HTTP response from a GetFunctionalBlocksWithResponse call
func ParseGetFunctionalBlocksResponse(rsp *http.Response) (*GetFunctionalBlocksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalBlocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FunctionalBlock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostFunctionalBlocksResponse parses an HTTP response from a PostFunctionalBlocksWithResponse call
func ParsePostFunctionalBlocksResponse(rsp *http.Response) (*PostFunctionalBlocksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFunctionalBlocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFunctionalBlocksIdResponse parses an HTTP response from a GetFunctionalBlocksIdWithResponse call
func ParseGetFunctionalBlocksIdResponse(rsp *http.Response) (*GetFunctionalBlocksIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionalBlocksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionalBlock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutFunctionalBlocksIdResponse parses an HTTP response from a PutFunctionalBlocksIdWithResponse call
func ParsePutFunctionalBlocksIdResponse(rsp *http.Response) (*PutFunctionalBlocksIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFunctionalBlocksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionalBlock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGradesResponse parses an HTTP response from a GetGradesWithResponse call
func ParseGetGradesResponse(rsp *http.Response) (*GetGradesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Grade
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGradesResponse parses an HTTP response from a PostGradesWithResponse call
func ParsePostGradesResponse(rsp *http.Response) (*PostGradesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGradesIdResponse parses an HTTP response from a GetGradesIdWithResponse call
func ParseGetGradesIdResponse(rsp *http.Response) (*GetGradesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGradesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Grade
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutGradesIdResponse parses an HTTP response from a PutGradesIdWithResponse call
func ParsePutGradesIdResponse(rsp *http.Response) (*PutGradesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGradesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Grade
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHierarchiesResponse parses an HTTP response from a GetHierarchiesWithResponse call
func ParseGetHierarchiesResponse(rsp *http.Response) (*GetHierarchiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHierarchiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Hierarchy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostHierarchiesResponse parses an HTTP response from a PostHierarchiesWithResponse call
func ParsePostHierarchiesResponse(rsp *http.Response) (*PostHierarchiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHierarchiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHierarchiesIdResponse parses an HTTP response from a GetHierarchiesIdWithResponse call
func ParseGetHierarchiesIdResponse(rsp *http.Response) (*GetHierarchiesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHierarchiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Hierarchy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutHierarchiesIdResponse parses an HTTP response from a PutHierarchiesIdWithResponse call
func ParsePutHierarchiesIdResponse(rsp *http.Response) (*PutHierarchiesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutHierarchiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Hierarchy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHierarchyLinksResponse parses an HTTP response from a GetHierarchyLinksWithResponse call
func ParseGetHierarchyLinksResponse(rsp *http.Response) (*GetHierarchyLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHierarchyLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HierarchyLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostHierarchyLinksResponse parses an HTTP response from a PostHierarchyLinksWithResponse call
func ParsePostHierarchyLinksResponse(rsp *http.Response) (*PostHierarchyLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHierarchyLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHierarchyLinksIdResponse parses an HTTP response from a GetHierarchyLinksIdWithResponse call
func ParseGetHierarchyLinksIdResponse(rsp *http.Response) (*GetHierarchyLinksIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHierarchyLinksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HierarchyLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutHierarchyLinksIdResponse parses an HTTP response from a PutHierarchyLinksIdWithResponse call
func ParsePutHierarchyLinksIdResponse(rsp *http.Response) (*PutHierarchyLinksIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutHierarchyLinksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HierarchyLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHourlyRateResponse parses an HTTP response from a GetHourlyRateWithResponse call
func ParseGetHourlyRateResponse(rsp *http.Response) (*GetHourlyRateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHourlyRateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HourlyRate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLeavingReasonsResponse parses an HTTP response from a GetLeavingReasonsWithResponse call
func ParseGetLeavingReasonsResponse(rsp *http.Response) (*GetLeavingReasonsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeavingReasonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LeavingReason
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLeavingReasonsIdResponse parses an HTTP response from a GetLeavingReasonsIdWithResponse call
func ParseGetLeavingReasonsIdResponse(rsp *http.Response) (*GetLeavingReasonsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeavingReasonsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LeavingReason
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLocationsResponse parses an HTTP response from a GetLocationsWithResponse call
func ParseGetLocationsResponse(rsp *http.Response) (*GetLocationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Location
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLocationsIdResponse parses an HTTP response from a GetLocationsIdWithResponse call
func ParseGetLocationsIdResponse(rsp *http.Response) (*GetLocationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Location
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutManualTriggerManagersResponse parses an HTTP response from a PutManualTriggerManagersWithResponse call
func ParsePutManualTriggerManagersResponse(rsp *http.Response) (*PutManualTriggerManagersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutManualTriggerManagersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOfficesResponse parses an HTTP response from a GetOfficesWithResponse call
func ParseGetOfficesResponse(rsp *http.Response) (*GetOfficesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOfficesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Offices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOrganizationsResponse parses an HTTP response from a GetOrganizationsWithResponse call
func ParseGetOrganizationsResponse(rsp *http.Response) (*GetOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostOrganizationsResponse parses an HTTP response from a PostOrganizationsWithResponse call
func ParsePostOrganizationsResponse(rsp *http.Response) (*PostOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOrganizationsIdResponse parses an HTTP response from a GetOrganizationsIdWithResponse call
func ParseGetOrganizationsIdResponse(rsp *http.Response) (*GetOrganizationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOrganizationsIdResponse parses an HTTP response from a PutOrganizationsIdWithResponse call
func ParsePutOrganizationsIdResponse(rsp *http.Response) (*PutOrganizationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPaoBonusPaymentCategoriesResponse parses an HTTP response from a GetPaoBonusPaymentCategoriesWithResponse call
func ParseGetPaoBonusPaymentCategoriesResponse(rsp *http.Response) (*GetPaoBonusPaymentCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaoBonusPaymentCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PAOBonusPaymentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPaoBonusPaymentCategoriesIdResponse parses an HTTP response from a GetPaoBonusPaymentCategoriesIdWithResponse call
func ParseGetPaoBonusPaymentCategoriesIdResponse(rsp *http.Response) (*GetPaoBonusPaymentCategoriesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaoBonusPaymentCategoriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PAOBonusPaymentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPayTypesResponse parses an HTTP response from a GetPayTypesWithResponse call
func ParseGetPayTypesResponse(rsp *http.Response) (*GetPayTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPayTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PayType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPeopleResponse parses an HTTP response from a GetPeopleWithResponse call
func ParseGetPeopleResponse(rsp *http.Response) (*GetPeopleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPeopleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Person
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPeopleIdResponse parses an HTTP response from a GetPeopleIdWithResponse call
func ParseGetPeopleIdResponse(rsp *http.Response) (*GetPeopleIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPeopleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Person
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPeopleIdDocumentsResponse parses an HTTP response from a GetPeopleIdDocumentsWithResponse call
func ParseGetPeopleIdDocumentsResponse(rsp *http.Response) (*GetPeopleIdDocumentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPeopleIdDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Documents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPeopleIdOriginResponse parses an HTTP response from a GetPeopleIdOriginWithResponse call
func ParseGetPeopleIdOriginResponse(rsp *http.Response) (*GetPeopleIdOriginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPeopleIdOriginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Person
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPersonEducationResponse parses an HTTP response from a GetPersonEducationWithResponse call
func ParseGetPersonEducationResponse(rsp *http.Response) (*GetPersonEducationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersonEducationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PersonEducation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPersonalSchedulesResponse parses an HTTP response from a GetPersonalSchedulesWithResponse call
func ParseGetPersonalSchedulesResponse(rsp *http.Response) (*GetPersonalSchedulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersonalSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PersonalSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPositionCategoriesResponse parses an HTTP response from a GetPositionCategoriesWithResponse call
func ParseGetPositionCategoriesResponse(rsp *http.Response) (*GetPositionCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPositionCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PositionCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPositionCategoriesIdResponse parses an HTTP response from a GetPositionCategoriesIdWithResponse call
func ParseGetPositionCategoriesIdResponse(rsp *http.Response) (*GetPositionCategoriesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPositionCategoriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PositionCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPositionsResponse parses an HTTP response from a GetPositionsWithResponse call
func ParseGetPositionsResponse(rsp *http.Response) (*GetPositionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Position
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostPositionsResponse parses an HTTP response from a PostPositionsWithResponse call
func ParsePostPositionsResponse(rsp *http.Response) (*PostPositionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPositionsIdResponse parses an HTTP response from a GetPositionsIdWithResponse call
func ParseGetPositionsIdResponse(rsp *http.Response) (*GetPositionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPositionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Position
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutPositionsIdResponse parses an HTTP response from a PutPositionsIdWithResponse call
func ParsePutPositionsIdResponse(rsp *http.Response) (*PutPositionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPositionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Position
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetProductEntitiesResponse parses an HTTP response from a GetProductEntitiesWithResponse call
func ParseGetProductEntitiesResponse(rsp *http.Response) (*GetProductEntitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductEntitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProductEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetProductEntityLinksResponse parses an HTTP response from a GetProductEntityLinksWithResponse call
func ParseGetProductEntityLinksResponse(rsp *http.Response) (*GetProductEntityLinksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductEntityLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProductEntityLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetProductStatusesResponse parses an HTTP response from a GetProductStatusesWithResponse call
func ParseGetProductStatusesResponse(rsp *http.Response) (*GetProductStatusesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProductStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetProductsResponse parses an HTTP response from a GetProductsWithResponse call
func ParseGetProductsResponse(rsp *http.Response) (*GetProductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetProductsIdResponse parses an HTTP response from a GetProductsIdWithResponse call
func ParseGetProductsIdResponse(rsp *http.Response) (*GetProductsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSalariesResponse parses an HTTP response from a GetSalariesWithResponse call
func ParseGetSalariesResponse(rsp *http.Response) (*GetSalariesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSalariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Salary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSalariesIdResponse parses an HTTP response from a GetSalariesIdWithResponse call
func ParseGetSalariesIdResponse(rsp *http.Response) (*GetSalariesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSalariesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Salary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetScheduleDaysResponse parses an HTTP response from a GetScheduleDaysWithResponse call
func ParseGetScheduleDaysResponse(rsp *http.Response) (*GetScheduleDaysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduleDaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ScheduleDay
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSchedulesResponse parses an HTTP response from a GetSchedulesWithResponse call
func ParseGetSchedulesResponse(rsp *http.Response) (*GetSchedulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetShiftTypesResponse parses an HTTP response from a GetShiftTypesWithResponse call
func ParseGetShiftTypesResponse(rsp *http.Response) (*GetShiftTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShiftTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ShiftType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStaffResponse parses an HTTP response from a GetStaffWithResponse call
func ParseGetStaffResponse(rsp *http.Response) (*GetStaffResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StaffUnit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStaffAvailabilityStatusesResponse parses an HTTP response from a GetStaffAvailabilityStatusesWithResponse call
func ParseGetStaffAvailabilityStatusesResponse(rsp *http.Response) (*GetStaffAvailabilityStatusesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaffAvailabilityStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StaffAvailabilityStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStaffAvailabilityStatusesIdResponse parses an HTTP response from a GetStaffAvailabilityStatusesIdWithResponse call
func ParseGetStaffAvailabilityStatusesIdResponse(rsp *http.Response) (*GetStaffAvailabilityStatusesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaffAvailabilityStatusesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StaffAvailabilityStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStaffRolesResponse parses an HTTP response from a GetStaffRolesWithResponse call
func ParseGetStaffRolesResponse(rsp *http.Response) (*GetStaffRolesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaffRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StaffRoles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStaffRolesIdResponse parses an HTTP response from a GetStaffRolesIdWithResponse call
func ParseGetStaffRolesIdResponse(rsp *http.Response) (*GetStaffRolesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaffRolesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StaffRoles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStaffTypesResponse parses an HTTP response from a GetStaffTypesWithResponse call
func ParseGetStaffTypesResponse(rsp *http.Response) (*GetStaffTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaffTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StaffType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStaffTypesIdResponse parses an HTTP response from a GetStaffTypesIdWithResponse call
func ParseGetStaffTypesIdResponse(rsp *http.Response) (*GetStaffTypesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaffTypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StaffType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSubunitsResponse parses an HTTP response from a GetSubunitsWithResponse call
func ParseGetSubunitsResponse(rsp *http.Response) (*GetSubunitsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubunitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaskIdResponse parses an HTTP response from a GetTaskIdWithResponse call
func ParseGetTaskIdResponse(rsp *http.Response) (*GetTaskIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskStatusRespBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutTaskIdResponse parses an HTTP response from a PutTaskIdWithResponse call
func ParsePutTaskIdResponse(rsp *http.Response) (*PutTaskIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Сообщение
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTimekeeperGroupsResponse parses an HTTP response from a GetTimekeeperGroupsWithResponse call
func ParseGetTimekeeperGroupsResponse(rsp *http.Response) (*GetTimekeeperGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimekeeperGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TimekeeperGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTimekeeperGroupsIdResponse parses an HTTP response from a GetTimekeeperGroupsIdWithResponse call
func ParseGetTimekeeperGroupsIdResponse(rsp *http.Response) (*GetTimekeeperGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimekeeperGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimekeeperGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTimekeepersResponse parses an HTTP response from a GetTimekeepersWithResponse call
func ParseGetTimekeepersResponse(rsp *http.Response) (*GetTimekeepersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimekeepersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Timekeeper
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUnitsResponse parses an HTTP response from a GetUnitsWithResponse call
func ParseGetUnitsResponse(rsp *http.Response) (*GetUnitsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUnitsWithoutHierarchiesResponse parses an HTTP response from a GetUnitsWithoutHierarchiesWithResponse call
func ParseGetUnitsWithoutHierarchiesResponse(rsp *http.Response) (*GetUnitsWithoutHierarchiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnitsWithoutHierarchiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUnitsIdResponse parses an HTTP response from a GetUnitsIdWithResponse call
func ParseGetUnitsIdResponse(rsp *http.Response) (*GetUnitsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnitsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUnittypesResponse parses an HTTP response from a GetUnittypesWithResponse call
func ParseGetUnittypesResponse(rsp *http.Response) (*GetUnittypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnittypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UnitType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUnittypesResponse parses an HTTP response from a PostUnittypesWithResponse call
func ParsePostUnittypesResponse(rsp *http.Response) (*PostUnittypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUnittypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUnittypesIdResponse parses an HTTP response from a GetUnittypesIdWithResponse call
func ParseGetUnittypesIdResponse(rsp *http.Response) (*GetUnittypesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnittypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UnitType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutUnittypesIdResponse parses an HTTP response from a PutUnittypesIdWithResponse call
func ParsePutUnittypesIdResponse(rsp *http.Response) (*PutUnittypesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUnittypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UnitType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVacationBalancesResponse parses an HTTP response from a GetVacationBalancesWithResponse call
func ParseGetVacationBalancesResponse(rsp *http.Response) (*GetVacationBalancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVacationBalancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VacationBalance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVacationPeriodsResponse parses an HTTP response from a GetVacationPeriodsWithResponse call
func ParseGetVacationPeriodsResponse(rsp *http.Response) (*GetVacationPeriodsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVacationPeriodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VacationPeriod
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVhiResponse parses an HTTP response from a GetVhiWithResponse call
func ParseGetVhiResponse(rsp *http.Response) (*GetVhiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVhiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VHI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVhiIdResponse parses an HTTP response from a GetVhiIdWithResponse call
func ParseGetVhiIdResponse(rsp *http.Response) (*GetVhiIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVhiIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VHI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetWorkingHoursResponse parses an HTTP response from a GetWorkingHoursWithResponse call
func ParseGetWorkingHoursResponse(rsp *http.Response) (*GetWorkingHoursResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkingHoursResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkingHours
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
