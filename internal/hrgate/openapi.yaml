openapi: 3.0.4
info:
  title: HR Gate
  version: 0.1.1
  contact:
    name: Aleksei Ivanov
    email: aaivanov1@mts.ru
  description: |
    Назначение сервиса - отдавать информацию из ERP систем компании, абстрагируясь от нюансов системы.

    Все *id* в сервисе имеют единый формат **UUID**.

    Для получения идентификатора системы-источника по hrgate id и наоборот есть сервис маппинга - [маппинг API](https://gitlab.services.mts.ru/hr-gate/api/-/blob/master/mapping.openapi.yaml#/default/get_mapping)

    Для получения аватаров - [аватар API](https://gitlab.services.mts.ru/hr-gate/api/-/blob/master/avatars.openapi.yaml#/)

tags:
  - name: person
    description: "person - физ лицо, каким-либо образом участвующее в процессах компании"
  - name: employee
    description: "employee - работник или другое лицо, влияющее или влиявшее на процессы подразделения, в т.ч. кандидаты, контакты, бывшие работники"
  - name: assignment
    description: "assignment - назначение работника на конкретную позицию"
  - name: document
    description: "document - документы физ лица, предоставленные компании"
  - name: unit
    description: "unit - подразделение компании (отдел, департамент и т.д.). Подразделения, не имеющие родительского, также являются организациями, если не находятся вне иерархии"
  - name: calendar
    description: "calendar - календарь рабочих и праздничных дней, может относиться к назначению/подразделению/штатной единице/организации"
  - name: contract
    description: "contract - договор о назначении сотрудника на должность, либо доп соглашение об изменениях в существующем"
  - name: absence
    description: "absence - отсутствие работника на рабочем месте, в том числе, отпуск, командировка, прогул"
  - name: event
    description: "event - событие системы hrgate, свидетельствующее о создании/изменении/удалении конкретного объекта"
  - name: staff
    description: "staff - штатная единица, позиция в организационной структуре, которую занимает/может занять работник организации"
  - name: timekeeper
    description: "timeKeeper - табельщик, работник занимающийся учетом рабочего времени подразделения/назначения"
  - name: position
    description: "position - описание должности, присваиваемой штатной единице"
  - name: grade
    description: "grade - ранг должности, присваиваемой штатной единице"
  - name: complex
    description: "Operations with complex entities that built from few simpler entities"
  - name: org
    description: "organization - юридическая информация о корневом подразделении (организации)"
  - name: costCenter
    description: "cost center - центр затрат, информация о списании расходов подразделения/назначения"
  - name: balanceUnit
    description: "balance unit - балансовая единица, финансовая организационная единица для подсчета прибыли и убытков"
  - name: hierarchy
    description: "hierarchy - организационная иерархия, дерево подразделений входящих в организацию. Одно и то же подразделение может входить в несколько иерархий. Основная иерархия - главная иерархия, используется по умолчанию"
  - name: functionalBlock
    description: "functional block - функциональный блок, к которому относится подразделение/штатная единица"
  - name: salary
    description: "salary - зарплата, надбавки, премирование"
  - name: location
    description: "location - физическое местоположение объекта, назначения сотрудника/подразделения/..., согласно документам"
  - name: cluster
    description: "cluster - территория, к которой может относиться подразделение"
  - name: applicant
    description: "applicant - претендент на должность в организации"
  - name: schedule
    description: "schedule - расписание рабочего времени"
  - name: bank
    description: "bank - информация о банке :)"
  - name: vacation
    description: "vacation - учет отпусков: списание отпускных дней, баланс отпускных дней"
  - name: product
    description: "product - продукт компании за который отвечает подразделение/назначение сотрудника"
  - name: dgphDonor
    description: "dgphDonor - источник финансирования ДГПХ"
  - name: hourlyRate
    description: "hourlyRate - Матрица ЧТС РТК"
  - name: distWork
    description: "distWork - Информация о дистанционной работе сотрудника"
  - name: task
    description: "task - взаимодействие с асинхронно выполняемыми задачами"
  - name: office
    description: "office - Информация о офисе работы"
  - name: productEntities
    description: "productEntities - Информация о продуктовых структурах"
  - name: manual
    description: "служебные методы"

servers:
  - url: https://hr-gate.dev.autobp.mts.ru
  - url: https://hr-gate.stage.autobp.mts.ru
  - url: https://hr-gate.mts.ru/api/v1

security:
  - oAuth2:
      - hr-gate

paths:
  "/people":
    get:
      summary: "Получить список людей (физ. лиц)"
      description: "Получение списка физ. лиц и их персональных данных"
      tags: [person]
      responses:
        "200":
          description: "Возврат списка людей"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Person"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - name: "sFullname"
          description: "Фильтр по полному соответствию фамилии и/или имени и/или отчества"
          in: query
          required: false
          schema:
            type: string
            example: "Акакиев Акакий"
        - name: "documents.snils"
          description: "Фильтр по полному соответствию снилс"
          in: query
          schema:
            type: string
            description: "СНИЛС в формате 00000000000. Без разделителей, пробелов, только 11 чисел"
            example: "32215121124"
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"

  "/people/{id}":
    get:
      summary: "Получить человека (физ. лицо) по id"
      tags: [person]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Person"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/people/{id}/origin":
    get:
      summary: "Получить оригинал физлица"
      tags: [person]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Person"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/people/{id}/documents":
    get:
      summary: "Получить данные документов человека"
      description: |
        Получение персональных данных, включая паспортные данные и адрес регистрации.

        Поля *passport, address, employmentRecord* недоступны для стандартного набора прав доступа,
        доступ к ним необходимо запросить отдельно
      tags: [person, document]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Documents"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/documents":
    get:
      summary: "Получить список документов физ. лиц"
      description: |
        В качестве параметра *ids* передавать *PersonID* людей, чьи документы необходимо выгрузить

        Поля *passport, address, employmentRecord* недоступны для стандартного набора прав доступа,
        доступ к ним необходимо запросить отдельно
      tags: [person, document]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - name: "snils"
          in: query
          description: "Фильтр по СНИЛСам"
          schema:
            type: array
            items:
              type: string
              description: "СНИЛС в формате 00000000000. Без разделителей, пробелов, только 11 чисел"
              example: "32215121124"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Documents"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/employees":
    get:
      summary: "Получить список сотрудников"
      tags: [employee]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Employee"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
        - $ref: "#/components/parameters/EmployeeTypeIdsFilterParam"
        - $ref: "#/components/parameters/PersonIDsParam"
        - $ref: "#/components/parameters/ActivityFilters"
        - name: "logins"
          in: query
          description: "Фильтр по логинам сотрудников"
          schema:
            type: array
            items:
              type: string
            example: "DSSARANO"
        - name: "tabNums"
          in: query
          description: "Фильтр по табельным номерам сотрудников"
          schema:
            type: array
            items:
              type: string
            example: "543210"

  "/employees/{id}":
    get:
      summary: "Получить сотрудника по id"
      tags: [employee]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Employee"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/assignments":
    get:
      summary: "Получить назначения сотрудника на должности"
      tags: [assignment]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Assignment"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/AssignmentStatusIdsFilterParam"
        - $ref: "#/components/parameters/AssignmentTypeIdsFilterParam"
        - $ref: "#/components/parameters/EmployeeTypeIdsFilterParam"
        - $ref: "#/components/parameters/EmployeeIDs"
        - $ref: "#/components/parameters/ActivityFilters"
        - name: "categoryIDs"
          in: query
          description: "Фильтр по id категорий назначений"
          schema:
            $ref: "#/components/schemas/IDsList"
        - name: "combinationStatuses"
          in: query
          description: "Фильтр по статусу совместительства"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CombinationStatus"
        - name: "actualTerminationDateFrom"
          in: query
          required: false
          schema:
            type: string
            format: date
          description: "Параметр запроса для уволенных сотрудников начиная с выбранной даты"
        - $ref: "#/components/parameters/StaffUnitIDs"
        - $ref: "#/components/parameters/StaffCodes"
        - name: "history"
          in: query
          schema:
            type: boolean
            description: "Параметр для получение назначений с историей"
            default: false
        - $ref: "#/components/parameters/UnitIDs"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"

  "/assignments/{id}":
    get:
      summary: "Получить назначение сотрудника на должность по id назначения"
      tags: [assignment]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Assignment"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/absences":
    get:
      summary: "Получить список отсутствий сотрудника"
      description: "Получить список отсутствий на рабочем месте. WARN! Фильтр по назначениям работает медленно, по возможности - избегать"
      tags: [absence]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/AssignmentIDs"
        - $ref: "#/components/parameters/EmployeeIDs"
        - $ref: "#/components/parameters/TypeIDs"
        - $ref: "#/components/parameters/ActivityFilters"
        - name: "category"
          in: query
          description: "Фильтр по кодам категорий отсутствия"
          schema:
            type: array
            items:
              type: string
              example: "ВП"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Absence"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/absences/{id}":
    get:
      summary: "Получить отсутствие сотрудника по  id"
      tags: [absence]
      description: "Получить отсутствие на рабочем месте по id"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Absence"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  /batch/absences:
    post:
      summary: "Создать отсутствия"
      description: "Создать отсутствия. Служебный метод"
      tags: [batch, absence]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/AbsenceToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить отсутствия"
      description: "Изменить отсутствия. Служебный метод"
      tags: [batch, absence]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/AbsenceToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/absence-types":
    get:
      summary: "Получить типы отсутствий"
      tags: [absence]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - name: "category"
          in: query
          description: "Фильтр по кодам категорий отсутствия"
          schema:
            type: array
            items:
              type: string
              example: "ВП"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AbsenceType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/absence-types/{id}":
    get:
      summary: "Получить тип отсутствия сотрудника на рабочем месте"
      tags: [absence]
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbsenceType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  /batch/absence-types:
    post:
      summary: "Создать типы отсутствий"
      description: "Создать типы отсутствий. Служебный метод"
      tags: [batch, absence]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/AbsenceTypeToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить типы отсутствий"
      description: "Изменить типы отсутствий. Служебный метод"
      tags: [batch, absence]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/AbsenceTypeToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/leaving-reasons":
    get:
      summary: "Получения списка существующих причин увольнения"
      tags: [assignment]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
      responses:
        200:
          description: "success"
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/LeavingReason"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
  "/leaving-reasons/{id}":
    get:
      summary: "Получить причину увольнения по id"
      tags: [assignment]
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeavingReason"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  /batch/leaving-reasons:
    post:
      summary: "Создать причины увольнения"
      description: "Создать причины увольнения. Служебный метод"
      tags: [batch, assignment]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/LeavingReasonToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить причины увольнения"
      description: "Изменить причины увольнения. Служебный метод"
      tags: [batch, assignment]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/LeavingReasonToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/complex/assignments":
    get:
      summary: "Получение полной информации о назначениях сотрудника, включающее штатную единицу, работника, физ. лицо"
      tags: [assignment, complex]
      parameters:
        - $ref: "#/components/parameters/EmployeeIDs"
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/AssignmentStatusIdsFilterParam"
        - $ref: "#/components/parameters/AssignmentTypeIdsFilterParam"
        - $ref: "#/components/parameters/EmployeeTypeIdsFilterParam"
        - $ref: "#/components/parameters/LoginFilterParam"
        - name: "currentUnitIds"
          example: "currentUnitIds=8869e21a-34c3-4cd6-8768-90707cc36e67&currentUnitIds=95d61cf8-5b4f-4103-9eca-654f822ee5e6"
          description: "фильтр по списку id подразделений, которым принадлежат назначения"
          in: query
          schema:
            $ref: "#/components/schemas/IDsList"
        - name: "unitIds"
          description: "Фильтр по id вышестоящего в иерархии подразделения"
          in: query
          schema:
            $ref: "#/components/schemas/IDsList"
          example: "unitIds=8869e21a-34c3-4cd6-8768-90707cc36e67&unitIds=95d61cf8-5b4f-4103-9eca-654f822ee5e6"
        - name: "categoryIDs"
          description: "фильтр по списку id категорий назначения"
          in: query
          example: "categoryIDs=8869e21a-34c3-4cd6-8768-90707cc36e67&categoryIDs=95d61cf8-5b4f-4103-9eca-654f822ee5e6"
          schema:
            $ref: "#/components/schemas/IDsList"
        - name: "combinationStatuses"
          in: query
          description: "фильтр по статусам совместительства"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CombinationStatus"
            example: "Основное назначение"
        - name: "actualTerminationDateFrom"
          in: query
          required: false
          description: "Параметр запроса для уволенных сотрудников начиная с конкретной даты"
          schema:
            type: string
            format: date
            example: "2007-06-30"
        - name: "hierarchyID"
          in: query
          required: false
          description: "фильтр по id иерархии"
          schema:
            type: string
            format: uuid
            example: "8869e21a-34c3-4cd6-8768-90707cc36e67"
        - $ref: "#/components/parameters/StaffUnitIDs"
        - $ref: "#/components/parameters/StaffCodes"
        - $ref: "#/components/parameters/ActivityFilters"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ComplexAssignment"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/complex/assignments_v2":
    get:
      summary: "Получение полной информации о назначениях сотрудника, включающее данные необходимые пользователю"
      tags: [ assignment, complex ]
      parameters:
        - $ref: "#/components/parameters/EmployeeIDs"
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/AssignmentStatusIdsFilterParam"
        - $ref: "#/components/parameters/AssignmentTypeIdsFilterParam"
        - $ref: "#/components/parameters/EmployeeTypeIdsFilterParam"
        - $ref: "#/components/parameters/LoginFilterParam"
        - name: "currentUnitIds"
          example: "currentUnitIds=8869e21a-34c3-4cd6-8768-90707cc36e67&currentUnitIds=95d61cf8-5b4f-4103-9eca-654f822ee5e6"
          description: "фильтр по списку id подразделений, которым принадлежат назначения"
          in: query
          schema:
            $ref: "#/components/schemas/IDsList"
        - name: "unitIds"
          description: "Фильтр по id вышестоящего в иерархии подразделения"
          in: query
          schema:
            $ref: "#/components/schemas/IDsList"
          example: "unitIds=8869e21a-34c3-4cd6-8768-90707cc36e67&unitIds=95d61cf8-5b4f-4103-9eca-654f822ee5e6"
        - name: "categoryIDs"
          description: "фильтр по списку id категорий назначения"
          in: query
          example: "categoryIDs=8869e21a-34c3-4cd6-8768-90707cc36e67&categoryIDs=95d61cf8-5b4f-4103-9eca-654f822ee5e6"
          schema:
            $ref: "#/components/schemas/IDsList"
        - name: "combinationStatuses"
          in: query
          description: "фильтр по статусам совместительства"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CombinationStatus"
            example: "Основное назначение"
        - name: "actualTerminationDateFrom"
          in: query
          required: false
          description: "Параметр запроса для уволенных сотрудников начиная с конкретной даты"
          schema:
            type: string
            format: date
            example: "2007-06-30"
        - $ref: "#/components/parameters/StaffUnitIDs"
        - $ref: "#/components/parameters/StaffCodes"
        - $ref: "#/components/parameters/ActivityFilters"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
        - $ref: "#/components/parameters/RequiredEntitiesComplexAssignmentV2"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ComplexAssignmentV2"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/employeetypes":
    get:
      summary: "Получить доступные типы сотрудников"
      tags: [employee]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/EmployeeType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
    post:
      summary: "Добавить тип сотрудника"
      tags: [employee]
      requestBody:
        $ref: "#/components/requestBodies/EmployeeTypeReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/employeetypes/{id}":
    get:
      summary: "Получить тип сотрудника по id"
      tags: [employee]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/EmployeeType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить тип сотрудника"
      tags: [employee]
      requestBody:
        $ref: "#/components/requestBodies/EmployeeTypeReqBody"
      responses:
        "200":
          description: "Обновленный тип сотрудника"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/EmployeeType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/employee-roles":
    get:
      summary: "Получить справочник ролей сотрудников"
      tags: [employee]
      parameters:
        - "$ref": "#/components/parameters/QueryFilters"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/EmployeeRole"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

    post:
      summary: "Создать новую роль сотрудника в справочнике"
      tags: [employee]
      requestBody:
        required: true
        content:
          "applicatopn/json":
            schema:
              "$ref": "#/components/schemas/EmployeeRoleReqBody"
      responses:
        "200":
          description: "success"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"

  "/employee-roles/{id}":
    get:
      summary: "Получить роль сотрудника в справочнике по id"
      tags: [employee]
      parameters:
        - "$ref": "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/EmployeeRole"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

    put:
      summary: "Обновить роль сотрудника в справочнике"
      tags: [employee]
      parameters:
        - "$ref": "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"
      requestBody:
        required: true
        content:
          "applicatopn/json":
            schema:
              "$ref": "#/components/schemas/EmployeeRoleReqBody"

  "/contracts":
    get:
      summary: "Получить список контрактов"
      tags: [contract]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Contract"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - name: "assignmentId"
          in: query
          description: "фильтр по id назначения"
          schema:
            type: string
            format: uuid
            example: "038900f8-7252-440d-a33b-4b3f6c093c93"
        - name: "employeeId"
          in: query
          description: "фильтр по id работника"
          schema:
            type: string
            format: uuid
            example: "10593240-0a83-4c17-9182-6de630c089bc"
        - $ref: "#/components/parameters/QueryFilters"
        - name: "statusIDs"
          in: query
          description: "фильтр по списку id статусов"
          required: false
          example: "statusIDs=09542b6d-b22d-41ca-b604-3af3ed516c75&statusIDs=b987b581-429f-47a6-b4e1-58aa05b7db86"
          schema:
            $ref: "#/components/schemas/IDsList"
        - name: "typeIDs"
          in: query
          required: false
          description: "фильтр по списку идентификаторов типов контрактов"
          schema:
            $ref: "#/components/schemas/IDsList"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"

  "/contractstatus":
    get:
      summary: "Получить доступные статусы контрактов"
      tags: [contract]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ContractStatus"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
    post:
      summary: "Добавить статус контрактов"
      tags: [contract]
      requestBody:
        $ref: "#/components/requestBodies/ContractStatusReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/contractstatus/{id}":
    get:
      summary: "Получить статус контракта по id"
      tags: [contract]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/ContractStatus"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить статус контракта"
      tags: [contract]
      requestBody:
        $ref: "#/components/requestBodies/ContractStatusReqBody"
      responses:
        "200":
          description: "Обновленный статус контракта"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ContractStatus"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/contracttypes":
    get:
      summary: "Получить доступные типы контрактов"
      tags: [contract]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ContractType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
    post:
      summary: "Добавить тип контрактов"
      tags: [contract]
      requestBody:
        $ref: "#/components/requestBodies/ContractTypeReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/contracttypes/{id}":
    get:
      summary: "Получить тип контракта по id"
      tags: [contract]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/ContractType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить тип контракта"
      tags: [contract]
      requestBody:
        $ref: "#/components/requestBodies/ContractTypeReqBody"
      responses:
        "200":
          description: "Обновленный тип контракта"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ContractType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/assignmentstatus":
    get:
      summary: "Получить доступные статусы назначений"
      tags: [assignment]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AssignmentStatus"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
    post:
      summary: "Добавить статус назначения"
      tags: [assignment]
      requestBody:
        $ref: "#/components/requestBodies/AssignmentStatusReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/assignmentstatus/{id}":
    get:
      summary: "Получить статус назначения по id"
      tags: [assignment]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/AssignmentStatus"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить статус назначения"
      tags: [assignment]
      requestBody:
        $ref: "#/components/requestBodies/AssignmentStatusReqBody"
      responses:
        "200":
          description: "Обновленный статус назначения"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AssignmentStatus"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/assignmenttypes":
    get:
      summary: "Получить доступные типы назначений"
      tags: [assignment]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AssignmentType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
    post:
      summary: "Добавить тип назначения"
      tags: [assignment]
      requestBody:
        $ref: "#/components/requestBodies/AssignmentTypeReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/assignmenttypes/{id}":
    get:
      summary: "Получить тип назначения по id"
      tags: [assignment]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/AssignmentType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить тип назначения"
      tags: [assignment]
      requestBody:
        $ref: "#/components/requestBodies/AssignmentTypeReqBody"
      responses:
        "200":
          description: "Обновленный тип назначения"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AssignmentType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/assignmentcategories":
    get:
      summary: "Получить доступные категории назначений"
      tags: [assignment]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AssignmentCategory"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
    post:
      summary: "Добавить категорию назначения"
      tags: [assignment]
      requestBody:
        $ref: "#/components/requestBodies/AssignmentCategoryReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/assignmentcategories/{id}":
    get:
      summary: "Получить категорию назначения по id"
      tags: [assignment]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/AssignmentCategory"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

    put:
      summary: "Изменить категорию назначения"
      tags: [assignment]
      requestBody:
        $ref: "#/components/requestBodies/AssignmentCategoryReqBody"
      responses:
        "200":
          description: "Обновленная категория назначения"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AssignmentCategory"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/balance-units":
    get:
      summary: "Получить список  балансовых единиц"
      tags: [balanceUnit, unit, assignment]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BalanceUnit"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
    post:
      summary: "Добавить балансовую единицу"
      tags: [balanceUnit]
      requestBody:
        $ref: "#/components/requestBodies/BalanceUnitReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/balance-units/{id}":
    get:
      summary: "Получить балансовую единицу по id"
      tags: [balanceUnit, unit, assignment]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/BalanceUnit"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить балансовую единицу"
      tags: [balanceUnit]
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
      requestBody:
        $ref: "#/components/requestBodies/BalanceUnitReqBody"
      responses:
        "200":
          description: "обновленная балансовая единица"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/BalanceUnit"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/units":
    get:
      summary: "Получить список орг.единиц (подразделений)"
      tags: [unit]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Unit"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - name: "sTitle"
          in: query
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/UnitTypesIdsFilterParam"
        - $ref: "#/components/parameters/HierarchyParam"
        - $ref: "#/components/parameters/ActivityFilters"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"

  "/units/{id}":
    get:
      summary: "Получить орг.единицу по id"
      tags: [unit]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Unit"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
        - $ref: "#/components/parameters/HierarchyParam"

  "/units-without-hierarchies":
    get:
      summary: "Получить список подразделений без учета иерархий (техническая ручка)"
      tags: [unit]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Unit"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"

  "/subunits":
    get:
      summary: "Получить список дочерних орг.единиц"
      description: |
        Выгружается список орг. единиц (подразделений) в рамках иерархии. Иерархия по умолчанию - основная

        При указании *unitIDs* - выгружается список дочерних орг единиц начиная с указанной
      tags: [unit]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Unit"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/UnitTypesIdsFilterParam"
        - $ref: "#/components/parameters/HierarchyParam"
        - $ref: "#/components/parameters/UnitIDs"
        - $ref: "#/components/parameters/ActivityFilters"

  "/schedules":
    get:
      summary: "Получить графики работы"
      description: "Метод содержит метаинформацию, для получения конкретных дней работ использовать /schedule-days"
      tags: [schedule]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Schedule"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - name: "calendarIDs"
          in: query
          description: "фильтр по списку id календарей"
          required: false
          schema:
            $ref: "#/components/schemas/IDsList"

  "/batch/schedules":
    post:
      summary: "Создать графики работы"
      description: "Создать графики работы. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ScheduleToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить графики работы"
      description: "Изменить графики работы. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ScheduleToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/schedule-days":
    get:
      summary: "Получить дни расписаний работы"
      description: "Если день выходной - параметр weekend=true, рабочие часы отсутствуют"
      tags: [schedule]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ScheduleDay"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/ScheduleIDs"

  "/batch/schedule-days":
    post:
      summary: "Создать дни расписаний работы"
      description: "Создать дни расписаний работы. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ScheduleDayToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить дни расписаний работы"
      description: "Изменить дни расписаний работы. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ScheduleDayToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/working-hours":
    get:
      summary: "Получить рабочие часы - начало, конец работы и продолжительность"
      tags: [schedule]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/WorkingHours"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"

  "/batch/working-hours":
    post:
      summary: "Создать рабочие часы - начало, конец работы и продолжительность"
      description: "Создать рабочие часы - начало, конец работы и продолжительность. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/WorkingHoursToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить рабочие часы - начало, конец работы и продолжительность"
      description: "Изменить рабочие часы - начало, конец работы и продолжительность. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/WorkingHoursToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/personal-schedules":
    get:
      summary: "Получить рабочее расписание для назначений сотрудников"
      tags: [schedule, assignment]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PersonalSchedule"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/ScheduleIDs"
        - $ref: "#/components/parameters/AssignmentIDs"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"

  "/batch/personal-schedules":
    post:
      summary: "Создать рабочее расписание для назначений сотрудников"
      description: "Создать рабочее расписание для назначений сотрудников. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PersonalScheduleToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить рабочее расписание для назначений сотрудников"
      description: "Изменить рабочее расписание для назначений сотрудников. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PersonalScheduleToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/shift-types":
    get:
      summary: "Получить значения справочника - тип графика работ"
      description: "Например - Пятидневная рабочая неделя"
      tags: [schedule]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ShiftType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - name: "ids"
          description: "Фильтр по id типов рабочих графиков"
          in: query
          schema:
            $ref: "#/components/schemas/IDsList"

  "/batch/shift-types":
    post:
      summary: "Создать значения справочника - тип графика работ"
      description: "Создать значения справочника - тип графика работ. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ShiftTypeToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить значения справочника - тип графика работ"
      description: "Изменить значения справочника - тип графика работ. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ShiftTypeToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/work-week-hours":
    post:
      summary: "Создать часы рабочей недели"
      description: "Создать часы рабочей недели. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/WorkWeekHoursToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить часы рабочей недели"
      description: "Изменить часы рабочей недели. Служебный метод"
      tags: [batch, schedule]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/WorkWeekHoursToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/staff":
    get:
      summary: "Получить список штатных единиц"
      tags: [staff]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/StaffUnit"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/UnitIDs"
        - $ref: "#/components/parameters/GradesIdsFilterParam"
        - $ref: "#/components/parameters/ActivityFilters"
        - name: "availabilityIDs"
          in: query
          description: "фильтр по идентификаторам доступности"
          schema:
            "$ref": "#/components/schemas/IDsList"
        - name: "staffRolesIDs"
          in: query
          description: "фильтр по идентификаторам роли"
          schema:
            "$ref": "#/components/schemas/IDsList"
        - $ref: "#/components/parameters/StaffCodes"
        - $ref: "#/components/parameters/StaffCodeSubstring"
        - name: "orgIDs"
          in: query
          description: "фильтр по идентификаторам организаций (юр. лиц)"
          schema:
            "$ref": "#/components/schemas/IDsList"
        - name: "history"
          in: query
          schema:
            type: boolean
            description: "Параметр для получение ШЕ с историей"
            default: false

  "/staff-availability-statuses":
    get:
      summary: "Справочник статусов доступности штатной единицы"
      tags: [staff]
      parameters:
        - "$ref": "#/components/parameters/QueryFilters"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/StaffAvailabilityStatus"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/staff-availability-statuses/{id}":
    get:
      summary: "Статус доступности штатной единицы"
      tags: [staff]
      parameters:
        - "$ref": "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/StaffAvailabilityStatus"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/staff-types":
    get:
      summary: "Справочник типов штатных единиц"
      tags: [staff]
      parameters:
        - "$ref": "#/components/parameters/QueryFilters"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/StaffType"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/staff-types/{id}":
    get:
      summary: "Тип штатной единицы"
      tags: [staff]
      parameters:
        - "$ref": "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/StaffType"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/back-bonus-payment-categories":
    get:
      summary: "Получить справочник категорий премирований сотрудников бэкофиса"
      tags: [salary, staff]
      parameters:
        - "$ref": "#/components/parameters/QueryFilters"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BackBonusPaymentCategory"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/back-bonus-payment-categories/{id}":
    get:
      summary: "Получить категорию премирования сотрудников бэкофиса по id"
      tags: [salary, staff]
      parameters:
        - "$ref": "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/BackBonusPaymentCategory"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/batch/back-bonus-payment-categories":
    post:
      summary: "Создать категории премирования сотрудников бэкофиса"
      description: "Создать категории премирования сотрудников бэкофиса. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/BackBonusPaymentCategoryToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить категории премирования сотрудников бэкофиса"
      description: "Изменить категории премирования сотрудников бэкофиса. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/BackBonusPaymentCategoryToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/pao-bonus-payment-categories":
    get:
      summary: "Получить справочник категорий премирований ПАО"
      tags: [salary, staff]
      parameters:
        - "$ref": "#/components/parameters/QueryFilters"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PAOBonusPaymentCategory"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/pao-bonus-payment-categories/{id}":
    get:
      summary: "Получить категорию премирования ПАО по id"
      tags: [salary, staff]
      parameters:
        - "$ref": "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/PAOBonusPaymentCategory"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/batch/pao-bonus-payment-categories":
    post:
      summary: "Создать категории премирования ПАО"
      description: "Создать категории премирования ПАО. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PAOBonusPaymentCategoryToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить категории премирования ПАО"
      description: "Изменить категории премирования ПАО. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PAOBonusPaymentCategoryToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/clusters":
    get:
      summary: "Получить кластера"
      tags: [cluster, unit]
      parameters:
        - "$ref": "#/components/parameters/QueryFilters"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Cluster"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

    post:
      summary: "Создать новый кластер"
      tags: [cluster]
      requestBody:
        required: true
        content:
          "applicatopn/json":
            schema:
              "$ref": "#/components/schemas/ClusterReqBody"
      responses:
        "200":
          description: "success"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"

  "/clusters/{id}":
    get:
      summary: "Получить кластер по id"
      tags: [cluster, unit]
      parameters:
        - "$ref": "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Cluster"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

    put:
      summary: "Обновить кластер"
      tags: [cluster]
      parameters:
        - "$ref": "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"
      requestBody:
        required: true
        content:
          "applicatopn/json":
            schema:
              "$ref": "#/components/schemas/ClusterReqBody"

  "/locations":
    get:
      summary: "Получить справочник локаций"
      tags: [location, assignment, unit, staff]
      parameters:
        - "$ref": "#/components/parameters/QueryFilters"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Location"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/locations/{id}":
    get:
      summary: "Получить локацию по id"
      tags: [location, assignment, unit, staff]
      parameters:
        - "$ref": "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Location"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  /batch/locations:
    post:
      summary: "Создать локации"
      description: "Создать локации. Служебный метод"
      tags: [batch, location]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/LocationToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить локации"
      description: "Изменить локации. Служебный метод"
      tags: [batch, location]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/LocationToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/positions":
    get:
      summary: "Получить список должностей"
      description: "Получение списка должностей штатных позиций"
      tags: [position, staff]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Position"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - name: "sTitle"
          description: "фильтр по вхождению строки в заголовок"
          in: query
          required: false
          schema:
            type: string
            example: "разработчик"
        - $ref: "#/components/parameters/QueryFilters"
    post:
      summary: "Добавить должность"
      tags: [position]
      requestBody:
        $ref: "#/components/requestBodies/PositionReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/positions/{id}":
    get:
      summary: "Получить должность по id"
      tags: [position, staff]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Position"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить должность"
      tags: [position]
      requestBody:
        $ref: "#/components/requestBodies/PositionReqBody"
      responses:
        "200":
          description: "Обновленная позиция"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Position"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/grades":
    get:
      summary: "Получить список грейдов"
      tags: [grade, staff]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Grade"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
    post:
      summary: "Добавить грейд"
      tags: [grade]
      description: "добавление грейда"
      requestBody:
        $ref: "#/components/requestBodies/GradeReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/grades/{id}":
    get:
      summary: "Получить грейд по gradeId"
      tags: [grade, staff]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Grade"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить грейд"
      tags: [grade]
      description: "Изменить грейд"
      requestBody:
        $ref: "#/components/requestBodies/GradeReqBody"
      responses:
        "200":
          description: "Обновленный грейд"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Grade"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/batch/grades":
    post:
      summary: "Создать грейды"
      description: "Создать грейды. Служебный метод"
      tags: [grade]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/GradeToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить грейды"
      description: "Изменить грейды. Служебный метод"
      tags: [grade]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/GradeToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/unittypes":
    get:
      summary: "Получить доступные типы подразделений"
      tags: [unit]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UnitType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
    post:
      summary: "Добавить тип подразделения"
      tags: [unit]
      requestBody:
        $ref: "#/components/requestBodies/UnitTypeReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/unittypes/{id}":
    get:
      summary: "Получить тип подразделения по id"
      tags: [unit]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/UnitType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить тип подразделения"
      tags: [unit]
      description: "измение типа подразделения"
      requestBody:
        $ref: "#/components/requestBodies/UnitTypeReqBody"
      responses:
        "200":
          description: "Обновленный тип подразделения"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UnitType"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/hierarchies":
    get:
      summary: "Получить доступные иерархии подразделений"
      tags: [hierarchy, unit]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Hierarchy"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - name: isPrimary
          in: query
          required: false
          schema:
            type: boolean
            description: "Параметр запроса для получения основной иерархии"
    post:
      summary: "Добавить иерархию подразделений"
      tags: [hierarchy]
      requestBody:
        $ref: "#/components/requestBodies/HierarchyReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
  "/hierarchies/{id}":
    get:
      summary: "Получить иерархию подразделений"
      tags: [hierarchy, unit]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Hierarchy"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить иерархию подразделений"
      tags: [hierarchy]
      requestBody:
        $ref: "#/components/requestBodies/HierarchyReqBody"
      responses:
        "200":
          description: "Обновленная иерархия подразделений"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Hierarchy"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/organizations":
    get:
      summary: "Получить список юр.лиц"
      description: "Помимо данных юр.лица каждая запись содержит соответствующий экземпляр орг.единицы (unit)"
      tags: [org, unit]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Organization"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - name: "unitID"
          description: |
            Фильтр по ID подразделения

            Для подразделения из фильтра будет найдено корневое подразделение в переданной в **hierarchyID** иерархии

            В ответе вернется организация соответствующая корневому подразделению
          in: query
          schema:
            $ref: "#/components/schemas/UUID"
        - $ref: "#/components/parameters/HierarchyParam"
    post:
      summary: "Добавить юр.лицо"
      tags: [org]
      description: "добавление юр. лица"
      requestBody:
        $ref: "#/components/requestBodies/OrganizationReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/organizations/{id}":
    get:
      summary: "Получить юр.лицо по id"
      tags: [org, unit]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Organization"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить юр.лицо"
      tags: [org]
      description: "измение юр. лица"
      requestBody:
        $ref: "#/components/requestBodies/OrganizationReqBody"
      responses:
        "200":
          description: "Обновленная организация"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Organization"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/calendars":
    get:
      summary: "Получить список рабочих календарей"
      tags: [calendar]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Calendar"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/UnitIDs"

  "/calendars/{id}":
    get:
      summary: "Получить рабочий календарь по id"
      tags: [calendar]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Calendar"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  /batch/calendar:
    post:
      summary: "Создать рабочие календари"
      description: "Создать рабочие календари. Служебный метод"
      tags: [batch, calendar]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/CalendarToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить рабочие календари"
      description: "Изменить рабочие календари. Служебный метод"
      tags: [batch, calendar]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/CalendarToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/calendar-days":
    get:
      summary: "Получить дни календаря"
      tags: [calendar]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CalendarDay"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - name: calendar
          in: query
          description: "фильтр по id календарей"
          schema:
            $ref: "#/components/schemas/IDsList"
        - name: dateFrom
          in: query
          required: false
          schema:
            type: string
            format: date
            description: "Параметр запроса для получения календарных дней, начиная с некоторой даты"
            example: "2021-05-17"
        - name: dateTo
          in: query
          required: false
          schema:
            type: string
            format: date
            description: "Параметр запроса для получения календарных дней до некоторой даты"
            example: "2021-05-30"

  /batch/calendar-days:
    post:
      summary: "Создать дни календаря"
      description: "Создать дни календаря. Служебный метод"
      tags: [batch, calendar]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/CalendarDayToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить дни календаря"
      description: "Изменить дни календаря. Служебный метод"
      tags: [batch, calendar]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/CalendarDayToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/costcenters":
    get:
      summary: "Получить список центров затрат"
      tags: [costCenter, assignment, unit]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CostCenter"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/CostCenterCodesParam"
    post:
      summary: "Добавить центр затрат"
      tags: [costCenter]
      requestBody:
        $ref: "#/components/requestBodies/CostCenterReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/costcenters/{id}":
    get:
      summary: "Получить центр затрат по id"
      tags: [costCenter, assignment, unit]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/CostCenter"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить центр затрат"
      tags: [costCenter]
      requestBody:
        $ref: "#/components/requestBodies/CostCenterReqBody"
      responses:
        "200":
          description: "Обновленный центр затрат"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/CostCenter"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/complex/units/{id}/subunits":
    get:
      summary: "Получить структуру орг.единиц по unitId корневого подразделения"
      tags: [unit, complex]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/FullUnit"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/HierarchyParam"
        - name: "depthLevel"
          in: query
          description: "Фильтр по глубине получаемых орг единиц"
          schema:
            type: integer
        - name: "depthFrom"
          in: query
          description: "Фильтр по глубине получаемых орг единиц от"
          schema:
            type: integer
        - name: "depthTo"
          in: query
          description: "Фильтр по глубине получаемых орг единиц до"
          schema:
            type: integer
        - name: "includeUnit"
          in: query
          description: "Включить в ответ корневое подразделение"
          schema:
            type: boolean
        - $ref: "#/components/parameters/OrderBy"
        - $ref: "#/components/parameters/UnitTypesIdsFilterParam"
        - $ref: "#/components/parameters/ActivityFilters"
        - name: withDeleted
          in: query
          description: "получить также записи удаленные из источника"
          schema:
            type: boolean

  "/complex/unitpath":
    get:
      summary: "Получение списка подразделений с путями в структуре организации (в рамках выбранной иерархии или основной)"
      tags: [unit, complex]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UnitPath"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/HierarchyParam"
        - name: "ids"
          description: "список идентификаторов подразделений"
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: withDeleted
          in: query
          description: "получить также записи удаленные из источника"
          schema:
            type: boolean

  "/complex/people/{id}":
    get:
      summary: "Получить комплексный набор данных о человеке"
      tags: [person, employee, assignment, complex]
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullPersonProfile"

  "/hierarchy-links":
    get:
      summary: "Получить иерархические связи между подразделениями"
      description: "Линки без родительского подразделения - корневые подразделения (организации)"
      tags: [hierarchy, unit]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/HierarchyLink"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/HierarchyLinksHierarchyFilterParam"
        - $ref: "#/components/parameters/HierarchyLinksParentFilterParam"
        - $ref: "#/components/parameters/HierarchyLinksChildFilterParam"
        - name: "isRootUnit"
          description: "позволяет найти корневое подразделение в рамках иерархии"
          in: query
          required: false
          schema:
            type: boolean

    post:
      summary: "Добавить иерархическую связь между подразделениями"
      tags: [hierarchy]
      requestBody:
        $ref: "#/components/requestBodies/HierarchyLinkReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
  "/hierarchy-links/{id}":
    get:
      summary: "Получить иерархическую связь подразделений по id"
      tags: [hierarchy, unit]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/HierarchyLink"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Изменить иерархическую связь подразделений"
      tags: [hierarchy]
      requestBody:
        $ref: "#/components/requestBodies/HierarchyLinkReqBody"
      responses:
        "200":
          description: "Обновленная иерархическая связь подразделений"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/HierarchyLink"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  /salaries:
    get:
      summary: "Получить зарплаты сотрудников"
      tags: [salary, assignment]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Salary"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/ActivityFilters"
        - name: assignmentsIds
          in: query
          description: "Фильтр по id назначений"
          schema:
            "$ref": "#/components/schemas/IDsList"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"

  /salaries/{id}:
    get:
      summary: "Получить зарплату сотрудника по id"
      tags: [salary]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Salary"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  /batch/salaries:
    post:
      summary: "Создать зарплаты сотрудников"
      description: "Создать зарплаты сотрудников. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/SalaryToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить зарплаты сотрудников"
      description: "Изменить зарплаты сотрудников. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/SalaryToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  /allowances:
    get:
      tags: [salary, assignment]
      summary: "Получить надбавки сотрудников"
      parameters:
        - $ref: "#/components/parameters/AssignmentIDs"
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/ActivityFilters"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Allowance"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  /allowances/{id}:
    get:
      summary: "Получить надбавку сотрудника по id"
      tags: [salary]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Allowance"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  /batch/allowances:
    post:
      summary: "Создать надбавки сотрудников"
      description: "Создать надбавки сотрудников. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/AllowanceToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить надбавки сотрудников"
      description: "Изменить надбавки сотрудников. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/AllowanceToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/staff-availability-statuses":
    post:
      summary: "Создать cтатусы доступности штатной единицы"
      description: "Создать cтатусы доступности штатной единицы. Служебный метод"
      tags: [batch, staff]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/StaffAvailabilityToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить cтатусы доступности штатной единицы"
      description: "Изменить cтатусы доступности штатной единицы. Служебный метод"
      tags: [batch, staff]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/StaffAvailabilityStatusToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/staff-types":
    post:
      summary: "Создать типы штатных единиц"
      description: "Создать типы штатных единиц. Служебный метод"
      tags: [batch, staff]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/StaffTypeToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить типы штатных единиц"
      description: "Изменить типы штатных единиц. Служебный метод"
      tags: [batch, staff]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/StaffTypeToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/people":
    post:
      summary: "Создать человека (физ. лицо)"
      description: "Создать человека (физ. лицо). Служебный метод"
      tags: [person, batch]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PersonToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить человека (физ. лицо)"
      description: "Изменить человека (физ. лицо). Служебный метод"
      tags: [person, batch]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PersonToUpdate"

      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/units":
    post:
      summary: "Создать орг.единицу"
      description: "Создать орг.единицу. Служебный метод"
      tags: [batch, unit]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/UnitToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить орг.единицу"
      description: "Изменить орг.единицу. Служебный метод"
      tags: [batch, unit]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/UnitToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/employees":
    post:
      summary: "Создать сотрудников"
      description: "Создать сотрудников. Служебный метод"
      tags: [batch, employee]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/EmployeeToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить сотрудников"
      description: "Изменить сотрудников. Служебный метод"
      tags: [batch, employee]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/EmployeeToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/employee-personal-data":
    put:
      summary: "Записать логин, почту, телефон сотрудников"
      tags: [batch, employee]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/EmployeePersonalData"
      responses:
        "200":
          description: "success"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/person-picture-id":
    put:
      summary: "Записать pictureID у person"
      tags: [ batch, person ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PersonPictureID"
      responses:
        "200":
          description: "success"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/person-military":
    put:
      summary: "Записать информацию о воинском учете у person"
      tags: [ batch, person ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PersonMilitary"
      responses:
        "200":
          description: "success"
        default:
          $ref: "#/components/responses/DefaultErrResponse"


  "/batch/staff":
    post:
      summary: "Создать штатные единицы"
      description: "Создать штатные единицы. Служебный метод"
      tags: [batch, staff]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/StaffUnitToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить штатные единицы"
      description: "Изменить штатные единицы. Служебный метод"
      tags: [batch, staff]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/StaffUnitToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
  "/batch/staff-with-history":
    post:
      summary: "Создать историю штатной единицы"
      description: "Создать историю штатной единицы. Служебный метод"
      tags: [ batch, staff ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/StaffUnitsWithHistoryToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить историю штатной единицы"
      description: "Изменить историю штатной единицы. Служебный метод"
      tags: [ batch, staff ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/StaffUnitsWithHistoryToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/assignments":
    post:
      summary: "Создать назначения сотрудников на должность"
      description: "Создать назначения сотрудников на должность. Служебный метод"
      tags: [batch, assignment]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/AssignmentToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить назначения сотрудников на должность"
      description: "Изменить назначения сотрудников на должность. Служебный метод"
      tags: [batch, assignment]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/AssignmentToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/assignments-with-history":
    post:
      summary: "Создать историю назначения сотрудника на должность"
      description: "Создать историю назначения сотрудника на должность. Служебный метод"
      tags: [batch, employee]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/AssignmentsWithHistoryToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить историю назначения сотрудника на должность"
      description: "Изменить историю назначения сотрудника на должность. Служебный метод"
      tags: [batch, employee]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/AssignmentsWithHistoryToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/hierarchy-links":
    post:
      summary: "Создать иерархические связи между подразделениями"
      description: "Создать иерархические связи между подразделениями. Служебный метод"
      tags: [batch, hierarchy]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/HierarchyLinkToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить иерархические связи между подразделениями"
      description: "Изменить иерархические связи между подразделениями. Служебный метод"
      tags: [batch, hierarchy]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/HierarchyLinkToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/contracts":
    post:
      summary: "Создать контракты"
      description: "Создать контракты. Служебный метод"
      tags: [contract, batch]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ContractToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить контракты"
      description: "Изменить контракты. Служебный метод"
      tags: [contract, batch]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ContractToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  /batch/timekeepers:
    post:
      summary: "Создать табельщиков"
      description: "Создать табельщиков. Служебный метод"
      tags: [batch, timekeeper]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/TimekeeperToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  /batch/timekeeper-groups:
    post:
      summary: "Создать группу табельщиков"
      description: "Создать группу табельщиков. Служебный метод"
      tags: [batch, timekeeper]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/TimekeeperGroupToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить группу табельщиков"
      description: "Изменить группу табельщиков. Служебный метод"
      tags: [batch, timekeeper]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/TimekeeperGroupToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/events":
    get:
      summary: "Получить записи об изменениях данных"
      description: "Записи о изменении сущностей с указанием типа изменения, типа сущности, id сущности"
      tags: [event]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Event"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/EventsObjectKindsFilterParam"
        - name: "eventKinds"
          description: "фильтр по типу произошедшего события"
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            example: [delete, create, patch]
        - name: objectIDs
          description: поиск по object_id должности
          in: query
          schema:
            "$ref": "#/components/schemas/IDsList"

  "/events/{id}":
    get:
      summary: "Получить изменения сущности по id"
      tags: [event]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Event"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/functional-blocks":
    get:
      summary: "Получить доступные функциональные блоки"
      tags: [functionalBlock, unit, staff]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/FunctionalBlock"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
    post:
      summary: "Добавить функциональный блок"
      tags: [functionalBlock]
      requestBody:
        required: true
        content:
          "applicatopn/json":
            schema:
              "$ref": "#/components/schemas/FunctionalBlockReqBody"
      responses:
        "200":
          $ref: "#/components/responses/CreatedItemResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/functional-blocks/{id}":
    get:
      summary: "Получить функциональный блок по id"
      tags: [functionalBlock, unit, staff]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/FunctionalBlock"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

    put:
      summary: "Изменить функциональный блок"
      tags: [functionalBlock]
      requestBody:
        required: true
        content:
          "applicatopn/json":
            schema:
              "$ref": "#/components/schemas/FunctionalBlockReqBody"
      responses:
        "200":
          description: "Обновленный функциональный блок"
          headers:
            event-id:
              $ref: "#/components/headers/EventID"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/FunctionalBlock"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/timekeepers":
    get:
      summary: "Получить табельщиков"
      description: "Для получения табельщиков подразделения использовать фильтр unitIDs, для получения табельщиков назначений - assIDs"
      tags: [timekeeper]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/AssignmentIDs"
        - $ref: "#/components/parameters/UnitIDs"
        - name: groupIDs
          description: "список ID групп табельщиков для фильтрации"
          in: query
          schema:
            "$ref": "#/components/schemas/IDsList"
        - name: timekeeperIDs
          description: "список ID сотрудников(Employee) для фильтрации"
          in: query
          schema:
            "$ref": "#/components/schemas/IDsList"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Timekeeper"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/timekeeper-groups":
    get:
      summary: "Получить группы табельщиков"
      tags: [timekeeper]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/TimekeeperGroup"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"

  "/timekeeper-groups/{id}":
    get:
      summary: "Получить группу табельщиков"
      tags: [timekeeper]
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/TimekeeperGroup"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/products":
    get:
      summary: "Получить справочник продуктов (продуктовых направлений)"
      tags: [product]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Product"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"

  "/products/{id}":
    get:
      summary: "Получить продукт (продуктовое направление)"
      tags: [product]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Product"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/batch/products":
    post:
      summary: "Создать продукты"
      description: "Создать продукты. Служебный метод"
      tags: [batch, product]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ProductToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить продукт"
      description: "Изменить продукт. Служебный метод"
      tags: [batch, product]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ProductToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/dgph-donors":
    get:
      summary: "Получить источники финансирования ДГПХ"
      tags: [dgphDonor]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/DGPHDonor"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/StaffUnitIDs"
        - $ref: "#/components/parameters/AssignmentIDs"
        - $ref: "#/components/parameters/PersonIDsParam"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"

  "/dgph-donors/{id}":
    get:
      summary: "Получить источники
       финансирования ДГПХ"
      tags: [dgphDonor]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/DGPHDonor"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/batch/dgph-donors":
    post:
      summary: "Создать источники финансирования ДГПХ"
      description: "Создать источники финансирования ДГПХ. Служебный метод"
      tags: [batch, dgphDonor]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/DGPHDonorToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить источники финансирования ДГПХ"
      description: "Изменить источники финансирования ДГПХ. Служебный метод"
      tags: [batch, dgphDonor]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/DGPHDonorToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/position-categories":
    get:
      summary: "Получить категории должностей"
      tags: [position]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PositionCategory"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
  "/position-categories/{id}":
    get:
      tags: [position]
      summary: "Получить категорию должности по id"
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/PositionCategory"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
  "/batch/position-categories":
    post:
      summary: "Создать категории должностей"
      description: "Создать категории должностей. Служебный метод"
      tags: [position, batch]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PositionCategoryToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить категории должностей"
      description: "Изменить категории должностей. Служебный метод"
      tags: [position, batch]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PositionCategoryToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/applicants":
    get:
      summary: "Получить претендентов"
      tags: [applicant]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Applicant"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/EmployeeIDs"
        - name: applicationCodes
          description: "Фильтр по кодам претендентов"
          in: query
          example: "3968770"
          schema:
            type: array
            items:
              type: string
        - $ref: "#/components/parameters/OrgsIdsFilterParam"

    post:
      summary: "Создать претендента"
      tags: [applicant]
      responses:
        "201":
          description: "Задача на создание претендента создана."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Task"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - firstName
                - lastName
                - gender
                - unitID
              properties:
                firstName:
                  type: string
                  description: "Имя"
                  example: "Акакий"
                lastName:
                  type: string
                  description: "Фамилия"
                  example: "Акакиев"
                middleNames:
                  type: string
                  description: "Отчество/дополнительные имена"
                  example: "Акакиевич"
                gender:
                  type: string
                  example: "F"
                  enum:
                    - F
                    - M
                snils:
                  type: string
                  description: "СНИЛС в формате 00000000000. Без разделителей, пробелов, только 11 чисел"
                  example: "32215121124"
                dateOfBirth:
                  type: string
                  format: date
                  description: "Дата рождения"
                phone:
                  type: string
                login:
                  type: string
                  description: "Логин созданный для этого кандидата"
                staffUnitID:
                  $ref: "#/components/schemas/UUID"
                unitID:
                  $ref: "#/components/schemas/UUID"
                officeID:
                  $ref: "#/components/schemas/UUID"
                placeInOffice:
                  type: string
                  description: "Информация о размещении в офисе."
                citizenship:
                  type: string
                  enum:
                    - RUSSIAN
                    - DOUBLE
                    - FOREIGNER
                    - STATELESS
                  description: "Гражданство. Обязательный параметр для создания претендента ПАО МТС"
                  example: "RU"
                email:
                  type: string
                  description: "Личная почта претендента"
                  example: "mail@mts.ru"


  "/applicants/{id}":
    get:
      tags: [applicant]
      summary: "Получить претендента по id"
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Applicant"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
  "/batch/applicants":
    post:
      summary: "Создать претендента"
      description: "Создать претендента. Служебный метод"
      tags: [applicant, batch]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ApplicantToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить претендента"
      description: "Изменить претендента. Служебный метод"
      tags: [applicant, batch]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ApplicantToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/banks":
    get:
      summary: "Получить справочник банков"
      tags: [bank]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Bank"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - name: sBank
          in: query
          required: false
          description: "фильтр по частичному вхождению в branchBIC / branchName / bankName"
          example: "ОТДЕЛЕНИЕ БРЯНСК"
          schema:
            type: string
  "/banks/{id}":
    get:
      tags: [bank]
      summary: "Получить информацию о банке по id"
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/Bank"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
  "/batch/banks":
    post:
      summary: "Создать банк"
      description: "Создать банк. Служебный метод"
      tags: [bank, batch]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/BankToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
    put:
      summary: "Изменить банк"
      description: "Изменить банк. Служебный метод"
      tags: [bank, batch]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/BankToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/vhi":
    get:
      summary: "Получить список полисов ДМС"
      tags: [document]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/AssignmentIDs"
        - $ref: "#/components/parameters/ActivityFilters"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/VHI"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/vhi/{id}":
    get:
      summary: "Получить ДМС"
      tags: [document]
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/VHI"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/vhi":
    post:
      summary: "Обновить полисы ДМС"
      tags: [batch, document]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/VHIToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить полисы ДМС"
      tags: [batch, document]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/VHIToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/delete":
    post:
      summary: "Пометить объекты как удаленные"
      tags: [batch]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [objects, objectKind]
              properties:
                hard:
                  type: boolean
                  nullable: false
                objects:
                  $ref: "#/components/schemas/IDsList"
                taskIDs:
                  type: array
                  description: 'Каждый id таски соответствует элементу из objects'
                  items:
                    $ref: "#/components/schemas/TaskID"
                objectKind:
                  $ref: "#/components/schemas/ObjectKind"
      responses:
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/earning-policies":
    get:
      summary: "Получить справочник режимов оплаты"
      tags: [salary, assignment]
      parameters:
        - "$ref": "#/components/parameters/QueryFilters"
        - "$ref": "#/components/parameters/UnitIDs"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/EarningPolicy"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/batch/earning-policies":
    post:
      summary: "Создать режимы оплаты"
      description: "Создать режимы оплаты. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/EarningPolicyToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить режимы оплаты"
      description: "Изменить режимы оплаты. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/EarningPolicyToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/pay-types":
    get:
      summary: "Получить справочник типов оплаты"
      tags: [salary, assignment]
      parameters:
        - "$ref": "#/components/parameters/QueryFilters"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PayType"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/batch/pay-types":
    post:
      summary: "Создать типы оплаты"
      description: "Создать типы оплаты. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PayTypeToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить типы оплаты"
      description: "Изменить типы оплаты. Служебный метод"
      tags: [batch, salary]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PayTypeToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/vacation-periods":
    get:
      summary: "Получить список периодов списаний дат отпусков"
      tags: [vacation]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/AssignmentIDs"
        - $ref: "#/components/parameters/EmployeeIDs"
        - name: absID
          description: поиск по id отсутствий
          in: query
          schema:
            "$ref": "#/components/schemas/IDsList"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/VacationPeriod"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/vacation-periods":
    post:
      summary: "Обновить список периодов списаний дат по отпускам"
      tags: [batch, vacation]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/VacationPeriodToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Обновить список периодов списаний дат по отпускам"
      tags: [batch, vacation]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/VacationPeriodToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/vacation-balances":
    get:
      summary: "Получить список остатков отпусков"
      tags: [vacation]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/AssignmentIDs"
        - $ref: "#/components/parameters/EmployeeIDs"
        - name: absTypeID
          description: "фильтр по id типов отсутствий"
          in: query
          schema:
            "$ref": "#/components/schemas/IDsList"
        - name: year
          description: "фильтр по годам"
          in: query
          example: 2021
          schema:
            type: array
            items:
              type: integer
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/VacationBalance"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/batch/vacation-balances":
    post:
      summary: "Обновить список остатков отпусков"
      tags: [batch, vacation]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/VacationBalanceToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Обновить список остатков отпусков"
      tags: [batch, vacation]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/VacationBalanceToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/disability-categories":
    get:
      summary: "Получить справочник категорий нетрудоспособности"
      tags: [person]
      parameters:
        - "$ref": "#/components/parameters/QueryFilters"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/DisabilityCategory"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/batch/disability-categories":
    post:
      summary: "Создать категории нетрудоспособности"
      description: "Создать категории нетрудоспособности. Служебный метод"
      tags: [batch, person]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/DisabilityCategoryToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить категории нетрудоспособности"
      description: "Изменить категории нетрудоспособности. Служебный метод"
      tags: [batch, person]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/DisabilityCategoryToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/person-education":
    get:
      summary: "Получить список записей с информацией об образовании сотрудников"
      tags: [document, person]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/PersonIDsParam"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PersonEducation"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/batch/person-education":
    post:
      summary: "Создать список с информацией об образовании сотрудников"
      tags: [batch, document]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PersonEducationToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Создать список с информацией об образовании сотрудников"
      tags: [batch, document]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/PersonEducationToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/hourly-rate":
    get:
      summary: "Получить часовую тарифную ставку для должности, территории, подразделения"
      tags: [hourlyRate]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/UnitIDs"
        - $ref: "#/components/parameters/ActivityFilters"
        - name: positionIDs
          description: поиск по id должности
          in: query
          schema:
            "$ref": "#/components/schemas/IDsList"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HourlyRate"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/batch/hourly-rate":
    post:
      summary: "Создать информацию по часовую тарифную ставку для должности, территории, подразделения"
      tags: [hourlyRate]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/HourlyRateToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Обновить информацию по часовую тарифную ставку для должности, территории, подразделения"
      tags: [hourlyRate]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/HourlyRateToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/dist-work":
    get:
      summary: "Получить список о дистанционной работе "
      tags: [distWork]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/AssignmentIDs"
        - $ref: "#/components/parameters/PersonIDsParam"
        - $ref: "#/components/parameters/ActivityFilters"
        - $ref: "#/components/parameters/OrgsIdsFilterParam"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DistWork"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/dist-work/{id}":
    get:
      summary: "Получить информации о дистанционной работе по id "
      tags: [distWork]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/DistWork"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  "/batch/dist-work":
    post:
      summary: "Создать список дистанционной работы"
      tags: [batch, distWork]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/DistWorkToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Обновить список дистанционной работы"
      tags: [batch, distWork]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/DistWorkToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
  "/task/{id}":
    get:
      summary: "Получить статус задачи по id"
      tags: [ task ]
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/TaskStatusRespBody"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"
    put:
      summary: "Обновить статус задачи"
      tags: [ task ]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - success
                    - error
                  description: "статус задачи"
                  example: "success"
                message:
                  type: string
                  description: "произвольное сообщение"
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/UUIDPathObjectID"

  /staff-roles:
    get:
      summary: "Получить список ролей штатных едениц"
      tags: [staff]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/StaffRoles"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"

  "/staff-roles/{id}":
    get:
      summary: "Тип штатной единицы"
      tags: [ staff ]
      parameters:
        - "$ref": "#/components/parameters/UUIDPathObjectID"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/StaffRoles"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  /batch/staff-roles:
    post:
      summary: "Создать роли штатной единицы"
      description: "Создать роли штатной единицы. Служебный метод"
      tags: [batch, staff]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/StaffRolesToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить роли штатной единицы"
      description: "Изменить роли штатной единицы. Служебный метод"
      tags: [batch, staff]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/StaffRolesToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  /offices:
    get:
      summary: "Получить список офисов"
      tags: [office]
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Offices"
        default:
          $ref: "#/components/responses/DefaultErrResponse"
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - name: "locationIDs"
          in: query
          description: "фильтр по идентификаторам локаций"
          schema:
            "$ref": "#/components/schemas/IDsList"
        - $ref: "#/components/parameters/OfficeNames"


  /batch/offices:
    post:
      summary: "Создать офисы"
      description: "Создать офисы. Служебный метод"
      tags: [batch, office]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/OfficeToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Изменить офисы"
      description: "Изменить офисы. Служебный метод"
      tags: [batch, office]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/OfficeToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchUpdatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/product-entities":
    get:
      summary: "Получить список записей с информацией о продуктовых структурах"
      tags: [productEntities]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/ProductEntitiesTypes"
        - $ref: "#/components/parameters/ProductEntitiesNames"
        - $ref: "#/components/parameters/ProductEntitiesCodes"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductEntity"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/batch/product-entities":
    post:
      summary: "Создать список с информацией о продуктовых структурах"
      tags: [ batch ]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ProductEntityToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Создать список с информацией о продуктовых структурах"
      tags: [ batch ]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ProductEntityToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/product-statuses":
    get:
      summary: "Получить список записей с информацией о статусах продукта"
      tags: [productEntities]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/ProductStatusNames"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductStatus"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/batch/product-statuses":
    post:
      summary: "Создать список с информацией о  о статусах продукта"
      tags: [ batch ]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ProductStatusToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Создать список с информацией о продуктовых структурах"
      tags: [ batch ]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ProductStatusToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/product-entity-links":
    get:
      summary: "Получить список записей с информацией о иерархии продуктовых структурах"
      tags: [productEntities]
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
        - $ref: "#/components/parameters/ProductEntitiesLinksChildIDs"
        - $ref: "#/components/parameters/ProductEntitiesLinksParentIDs"
      responses:
        "200":
          description: "success"
          headers:
            total:
              $ref: "#/components/headers/Total"
            limit:
              $ref: "#/components/headers/Limit"
            offset:
              $ref: "#/components/headers/Offset"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductEntityLink"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"

  "/batch/product-entity-links":
    post:
      summary: "Создать список с информацией о иерархии продуктовых структурах"
      tags: [ batch ]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ProductEntityLinkToCreate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

    put:
      summary: "Создать список с информацией о иерархии продуктовых структурах"
      tags: [ batch ]
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              required:
                - objects
              properties:
                objects:
                  type: array
                  items:
                    $ref: "#/components/schemas/ProductEntityLinkToUpdate"
      responses:
        "200":
          $ref: "#/components/responses/MultipleBatchCreatedItemResp"
        default:
          $ref: "#/components/responses/DefaultErrResponse"

  "/manual/trigger-managers":
    put:
      summary: "Триггернуть пересчет менеджеров на назначениях"
      description: "Триггернуть пересчет менеджеров на назначениях. Служебный метод"
      tags: [manual]
      responses:
        "200":
          description: "success"

  /complex/organization_structure:
    get:
      summary: "Получить организационную структуру от переданных родителей"
      parameters:
        - $ref: "#/components/parameters/OrganizationStructureHierarchyIDFilterParam"
        - $ref: "#/components/parameters/OrganizationStructureUnitIDsFilterParam"
        - $ref: "#/components/parameters/OrganizationStructureRequiredFieldsFilterParam"
      responses:
        "200":
          description: "success"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrganizationStructure"
        default:
          "$ref": "#/components/responses/DefaultErrResponse"


components:
  parameters:
    QueryFiltersWithoutIDsList:
      name: queryFilters
      in: query
      style: form
      description: |
        Сгруппированные параметры фильтрации

        **ВАЖНО!** передавать как обычные параметры *query?param1=val1&param2=val2*

        Фильтры *from* выдают ответ включающий заданную дату, фильтры *to* - не включая указанную дату
      schema:
        type: object
        properties:
          limit:
            description: "максимальное количество записей для получения"
            type: integer
            default: 100
          offset:
            description: "получение записей начиная с n-й"
            type: integer
            default: 0
          orderBy:
            description: "порядок сортировки получаемых записей"
            type: array
            items:
              type: string
            example: ["createdAt asc", "updatedAt desc", "depth desc"]
          createdAtFrom:
            description: "объекты с временем создания с createdAtFrom включительно"
            type: string
            format: date-time
          createdAtTo:
            description: "объекты с временем создания по createdAtTo не включительно"
            type: string
            format: date-time
          updatedAtFrom:
            description: "объекты с временем изменения с updatedAtFrom включительно"
            type: string
            format: date-time
          updatedAtTo:
            description: "объекты с временем изменения по updatedAtTo не включительно"
            type: string
            format: date-time
          withDeleted:
            description: "получить также записи удаленные из источника"
            type: boolean
    QueryFilters:
      name: queryFilters
      in: query
      style: form
      description: |
        Сгруппированные параметры фильтрации

        **ВАЖНО!** передавать как обычные параметры **query?param1=val1&param2=val2*

        Фильтры *from* выдают ответ **включающий** заданную дату, фильтры *to* - **не включая** указанную дату
      schema:
        type: object
        properties:
          limit:
            description: "максимальное количество записей для получения"
            type: integer
            default: 100
          offset:
            description: "получение записей начиная с n-й"
            type: integer
            default: 0
          orderBy:
            description: "порядок сортировки получаемых записей"
            type: array
            items:
              type: string
            example: ["createdAt asc", "updatedAt desc", "depth desc"]
          createdAtFrom:
            description: "объекты с временем создания с createdAtFrom включительно"
            type: string
            format: date-time
            example: "2021-12-10T10:53:49.631608Z"
          createdAtTo:
            description: "объекты с временем создания по createdAtTo не включительно"
            type: string
            format: date-time
            example: "2022-04-30T10:53:49.631608Z"
          updatedAtFrom:
            description: "объекты с временем изменения с updatedAtFrom включительно"
            type: string
            format: date-time
            example: "2021-11-30T10:53:49.631608Z"
          updatedAtTo:
            description: "объекты с временем изменения по updatedAtTo не включительно"
            type: string
            format: date-time
            example: "2022-03-30T10:53:49.631608Z"
          ids:
            description: "фильтр по списку идентификаторов"
            type: array
            items:
              type: string
              format: uuid
            example:
              [
                7b9a02a2-9637-4112-bddb-b128a2082c19,
                8c608cb3-5555-47b6-9bc9-6ea584ff7b96,
                96893315-401d-4a80-8689-6e7919782667,
              ]
          withDeleted:
            description: "получить также записи удаленные из источника"
            type: boolean
    ActivityFilters:
      name: activityFilters
      in: query
      style: form
      example: query?isActive=true&startFrom=2021-04-08&startTo=2021-04-08&endFrom=2021-04-08&endTo=2021-04-08
      description: |
        Сгруппированные параметры фильтрации

        **ВАЖНО!** передавать как обычные параметры **query?isActive=true&startFrom=2021-04-08**

        Фильтр isActive=true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные

        Фильтры *from* выдают ответ включающий указанную дату, фильтры *to* - не включая указанную дату
      schema:
        type: object
        properties:
          startFrom:
            type: string
            format: date
            description: "фильтровать по активности начинающейся с *startFrom* включительно"
            example: "2021-04-08"
          startTo:
            type: string
            format: date
            description: "фильтровать по активности начинающейся до *startTo*, не включая указанную дату"
            example: "2021-06-06"
          endFrom:
            type: string
            format: date
            description: "фильтровать по активности заканчивающейся с *endFrom* включительно"
            example: "2022-05-10"
          endTo:
            type: string
            format: date
            description: "фильтровать по активности заканчивающейся до *startTo*, не включая указанную дату"
            example: "2022-10-11"
          isActive:
            type: boolean
            description: |
              фильтровать по активности объекта на текущую дату

              isActive = true - только активные записи. false - неактивные записи. Без фильтра - активные и неактивные
            example: "true"

    UUIDPathObjectID:
      name: id
      in: path
      required: true
      description: "id запрашиваемого объекта"
      example: "5734ba7b-1b63-444b-b5b4-489309f642c5"
      schema:
        type: string
        format: uuid
    Limit:
      name: "limit"
      in: query
      description: "максимальное количество записей для получения"
      schema:
        type: integer
        default: 1000
    OrderBy:
      name: "orderBy"
      in: query
      description: "порядок сортировки запрашиваемых объектов"
      schema:
        type: array
        items:
          type: string
        example: ["createdAt asc", "updatedAt desc", "depth desc"]
    Offset:
      name: "offset"
      in: query
      description: "получение записей начиная с n-й"
      schema:
        type: integer
        default: 0
    IdsFilterParam:
      name: "ids"
      description: "фильтр по списку идентификаторов объекта"
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
          format: uuid
        example:
          [
            7b9a02a2-9637-4112-bddb-b128a2082c19,
            8c608cb3-5555-47b6-9bc9-6ea584ff7b96,
            96893315-401d-4a80-8689-6e7919782667,
          ]
    LoginFilterParam:
      name: "logins"
      in: query
      description: "Фильтр по логинам сотрудников"
      schema:
        type: array
        items:
          type: string
        example: "DSSARANO"
    OrgsIdsFilterParam:
      name: "orgsIds"
      description: "фильтр по списку идентификаторов организаций /organizations"
      in: query
      schema:
        "$ref": "#/components/schemas/IDsList"
    UnitTypesIdsFilterParam:
      name: "unitTypesIds"
      description: "фильтр по списку идентификаторов типов подразделений"
      in: query
      schema:
        type: array
        items:
          type: string
          format: uuid
        example:
          [
            7b9a02a2-9637-4112-bddb-b128a2082c19,
            8c608cb3-5555-47b6-9bc9-6ea584ff7b96,
            96893315-401d-4a80-8689-6e7919782667,
          ]
    GradesIdsFilterParam:
      name: "gradesIds"
      description: "фильтр по списку идентификаторов грейдов"
      in: query
      schema:
        type: array
        items:
          type: string
          format: uuid
        example:
          [
            7b9a02a2-9637-4112-bddb-b128a2082c19,
            8c608cb3-5555-47b6-9bc9-6ea584ff7b96,
            96893315-401d-4a80-8689-6e7919782667,
          ]
    AssignmentStatusIdsFilterParam:
      name: "statusIds"
      description: "фильтр по списку идентификаторов статусов назначений"
      in: query
      schema:
        type: array
        items:
          type: string
          format: uuid
        example:
          [
            7b9a02a2-9637-4112-bddb-b128a2082c19,
            8c608cb3-5555-47b6-9bc9-6ea584ff7b96,
            96893315-401d-4a80-8689-6e7919782667,
          ]
    AssignmentTypeIdsFilterParam:
      name: "typeIds"
      description: "фильтр по списку идентификаторов типов назначений"
      in: query
      schema:
        type: array
        items:
          type: string
          format: uuid
        example:
          [
            7b9a02a2-9637-4112-bddb-b128a2082c19,
            8c608cb3-5555-47b6-9bc9-6ea584ff7b96,
            96893315-401d-4a80-8689-6e7919782667,
          ]
    AssignmentIDs:
      name: "assIDs"
      description: "список id назначений для фильтрации"
      in: query
      schema:
        "$ref": "#/components/schemas/IDsList"
    ScheduleIDs:
      name: "scheduleIDs"
      description: "список id расписаний работ для фильтрации"
      in: query
      schema:
        "$ref": "#/components/schemas/IDsList"
    EmployeeIDs:
      name: "emplIDs"
      description: "список id работников для фильтрации"
      in: query
      schema:
        "$ref": "#/components/schemas/IDsList"
    PersonIDsParam:
      name: "personIDs"
      description: "список ID физ лиц"
      in: query
      schema:
        "$ref": "#/components/schemas/IDsList"
    CostCenterCodesParam:
      name: "costCenterCodes"
      description: "фильтр по кодам центра затрат"
      in: query
      schema:
        type: array
        items:
          type: string
          example: "ZZZ"
    TypeIDs:
      name: "typeIDs"
      description: "список id типов объекта"
      in: query
      schema:
        "$ref": "#/components/schemas/IDsList"
    UnitIDs:
      name: "unitIDs"
      description: "список id юнитов для фильтрации"
      in: query
      schema:
        "$ref": "#/components/schemas/IDsList"
    EmployeeTypeIdsFilterParam:
      name: "employeeTypeIDs"
      description: "фильтр по списку идентификаторов типов сотрудников"
      in: query
      schema:
        type: array
        items:
          type: string
          format: uuid
        example: [employeeTypeIDs=id1&employeeTypeIDs=id2...]
    HierarchyLinksHierarchyFilterParam:
      name: "hierarchyIDs"
      description: "фильтр по списку идентификаторов иерархий"
      in: query
      schema:
        type: array
        items:
          type: string
          format: uuid
        example:
          [
            7b9a02a2-9637-4112-bddb-b128a2082c19,
            8c608cb3-5555-47b6-9bc9-6ea584ff7b96,
            96893315-401d-4a80-8689-6e7919782667,
          ]
    HierarchyLinksParentFilterParam:
      name: "parentIDs"
      description: "фильтр по списку идентификаторов подразделений-родителей"
      in: query
      schema:
        type: array
        items:
          type: string
          format: uuid
        example:
          [
            7b9a02a2-9637-4112-bddb-b128a2082c19,
            8c608cb3-5555-47b6-9bc9-6ea584ff7b96,
            96893315-401d-4a80-8689-6e7919782667,
          ]
    HierarchyLinksChildFilterParam:
      name: "childIDs"
      description: "фильтр по списку идентификаторов подразделений-наследников"
      in: query
      schema:
        type: array
        items:
          type: string
          format: uuid
        example:
          [
            7b9a02a2-9637-4112-bddb-b128a2082c19,
            8c608cb3-5555-47b6-9bc9-6ea584ff7b96,
            96893315-401d-4a80-8689-6e7919782667,
          ]
    HierarchyParam:
      name: hierarchyID
      description: |
        Идентификатор иерархии, в рамках которой будет происходить выгрузка, если параметр не передан - используется основная иерархия

        Для того чтобы выгрузить подразделения вне иерархии следует передать прочерк "-"
      in: query
      required: false
      schema:
        type: string
        example: "7b9a02a2-9637-4112-bddb-b128a2082c19"
    EventsObjectKindsFilterParam:
      name: "objectKinds"
      description: "фильтр по типу объекта"
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/ObjectKind"
    StaffUnitIDs:
      name: "staffUnitIDs"
      description: "список id ШЕ для фильтрации"
      in: query
      schema:
        "$ref": "#/components/schemas/IDsList"
    StaffCodes:
      name: "staffCodes"
      in: query
      description: "фильтр по номерам ШЕ"
      schema:
        type: array
        items:
          type: string
          example: "старший специалист.000004986"
    StaffCodeSubstring:
      name: "staffCodeSubstring"
      in: query
      description: "фильтр по частичному вхождению номера ШЕ"
      schema:
        type: string
        example: "старший спец"
    OfficeNames:
      name: "officeNames"
      in: query
      description: "фильтр по названию офиса"
      schema:
        type: array
        items:
          type: string
    ProductEntitiesTypes:
      name: "productEntitiesTypes"
      in: query
      description: "фильтр по типам продуктовых сущностей"
      schema:
        type: array
        items:
          type: string
    ProductEntitiesNames:
      name: "names"
      in: query
      description: "фильтр по именам продуктовых сущностей"
      schema:
        type: array
        items:
          type: string
    ProductStatusNames:
      name: "names"
      in: query
      description: "фильтр по именам статусов"
      schema:
        type: array
        items:
          type: string
    ProductEntitiesCodes:
      name: "productCodes"
      in: query
      description: "фильтр по BI коду продукта"
      schema:
        type: array
        items:
          type: string
    ProductEntitiesLinksParentIDs:
      name: "parentIDs"
      in: query
      description: "фильтр по родителям в связях продуктовых сущностей"
      schema:
        type: array
        items:
          type: string
    ProductEntitiesLinksChildIDs:
      name: "childIDs"
      in: query
      description: "фильтр по родителям в связях продуктовых сущностей"
      schema:
        type: array
        items:
          type: string
    OrganizationStructureHierarchyIDFilterParam:
      name: "hierarchyID"
      required: true
      description: "фильтр по идентификатору иерархии"
      in: query
      schema:
        type: string
        format: uuid
        example: "7b9a02a2-9637-4112-bddb-b128a2082c19"
    OrganizationStructureUnitIDsFilterParam:
      name: "unitIDs"
      required: true
      in: query
      description: "фильтр по юнитам для которых нужно получить иерархическую структуру"
      schema:
        type: array
        items:
          type: string
          format: uuid
    OrganizationStructureRequiredFieldsFilterParam:
      name: "requiredFields"
      in: query
      required: true
      description: "перечисление полей, которые должны присутствовать в ответе в поле unit"
      schema:
        type: array
        items:
          $ref: '#/components/schemas/OrganizationStructureRequiredFiledEnum'

    RequiredEntitiesComplexAssignmentV2:
      name: "requiredEntities"
      in: query
      description: "Перечисление сущностей, которые необходимо добавить в ответ"
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ComplexAssignmentRequiredEntities'

  securitySchemes:
    oAuth2: # <---- arbitrary name
      type: oauth2
      flows:
        clientCredentials: # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          tokenUrl: https://isso-dev.mts.ru/auth/realms/mts/protocol/openid-connect/token
          scopes:
            hr-gate: Доступ к данным hr-gate.

  schemas:
    ObjectKind:
      description: "Тип объекта"
      type: string
      enum:
        - person
        - document
        - organization
        - unit
        - employee
        - assignment
        - staffUnit
        - staffUnitWithHistory
        - grade
        - calendar
        - calendarDay
        - schedule
        - scheduleDay
        - personalSchedule
        - contract
        - contractType
        - contractStatus
        - absence
        - absenceType
        - assignmentStatus
        - assignmentType
        - assignmentCategory
        - costCenter
        - employeeType
        - employeeRole
        - hierarchies
        - hierarchyLink
        - cluster
        - location
        - functionalBlock
        - balanceUnit
        - salary
        - staffAvailabilityStatus
        - staffType
        - timekeeper
        - timekeeperGroup
        - product
        - leavingReason
        - position
        - positionCategory
        - vhi
        - applicant
        - shiftType
        - workWeekHours
        - workingHours
        - allowance
        - backBonusPaymentCategory
        - paoBonusPaymentCategory
        - unitType
        - bank
        - earningPolicy
        - payType
        - vacationPeriod
        - vacationBalance
        - disabilityCategory
        - personEducation
        - dgphDonor
        - hourlyRate
        - assignmentWithHistory
        - distWork
        - staffRole
        - office
        - productEntity
        - productEntityLink
        - productStatus
    Person:
      type: object
      description: "Описывает уникального, реально существующего человека - физ. лицо"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeablePerson"
        - type: object
          properties:
            birthday:
              type: string
              format: date-mday
              description: "День и месяц рождения в формате mm-dd"
              example: "02-17"
    Documents:
      type: object
      description: "Информация о документах физ. лиза"
      allOf:
        - $ref: "#/components/schemas/ChangeableDocument"
        - type: object
          required: [personID]
          properties:
            personID:
              type: string
              format: uuid
              description: "ID человека, к которому относятся документы"
              example: "9a5f804a-cd99-4988-a36c-af1b3e00d9b5"
            createdAt:
              type: string
              format: date-time
              description: "Дата создания записи о документах"
              example: "2022-03-30T10:53:49.631608Z"
            updatedAt:
              type: string
              format: date-time
              description: "Дата изменения записи о документах"
              example: "2022-03-30T10:53:49.631608Z"
    Passport:
      type: object
      description: "Паспортные данные"
      properties:
        series:
          type: string
          description: "Серия паспорта"
          example: "45 15"
        number:
          type: string
          description: "Номер паспорта"
          example: "002116"
        place:
          type: string
          description: "Место выдачи"
          example: "ГУ МВД РОССИИ ПО САМАРСКОЙ ОБЛАСТИ"
        date:
          type: string
          description: "Дата выдачи"
          example: "2007-11-29"
        code:
          type: string
          description: "Код подразделения"
          example: "160-023"
        birthPlace:
          type: string
          description: "Место рождения"
          example: "Саранск Республика Мордовия Россия"
    Address:
      type: object
      description: "Информация об адресе проживания человека"
      properties:
        postal:
          type: string
          description: "Почтовый индекс"
          example: "143986"
        country:
          type: string
          description: "Страна"
          example: "Russian Federation"
        region:
          type: string
          description: "Регион, города регионального значения"
          example: "Москва г"
        distr:
          type: string
          description: "Район (???)"
          example: "Ленинский р-н"
        city:
          type: string
          description: "Город"
          example: "Рязань г"
        location:
          type: string
          description: "Округ (???)"
          example: "Новопавловка с"
        street:
          type: string
          description: "Улица"
          example: "Безымянный 1-й пер"
        house:
          type: string
          description: "Дом"
          example: "д. 2А"
        building:
          type: string
          description: "Корпус"
          example: "корп. 1"
        flat:
          type: string
          description: "Квартира"
          example: "кв. 77"
    MilitaryData:
      type: object
      description: "Информация о категории годности к службе и типе документа"
      properties:
        militaryDocType:
          type: string
          description: "Тип документа воинского учета"
          example: "Военный билет"
        militaryService:
          type: string
          description: "Категория годности к воен. сл. — описание"
          example: "Ограниченно годные к военной службе"
        rank:
          type: string
          description: "Воинское звание"
          example: "рядовой"
        specCode:
          type: string
          description: "Полное кодовое обозначение ВУС"
          example: "879249 С"
        owner:
          type: string
          description: "Наименование военкомата"
          example: "ВК Замоскворецкого р-на ЦАО г.Москвы"
        profile:
          type: string
          description: "Состав (профиль)"
          example: "Сержанты"
        serviceCode:
          type: string
          description: "Категория запаса"
          example: "2"
        regType:
          type: string
          description: "Состоит на воинском учете"
          example: "Общем"
        commandParty:
          type: string
          description: "Номер команды партии"
          example: "94371"
        isMobilized:
          type: boolean
          description: "Признак мобилизации"
          example: false
        dateMobilized:
          type: string
          format: date
          description: "Дата мобилизации"
          example: "2020-12-30"
    EmploymentRecord:
      type: object
      description: "Информация о трудовой книжке"
      properties:
        haveDigitalEmplHistory:
          type: boolean
          description: "Сведения о ЭТД\\ЭТК у др. работодателя"
        emplHistoryApplicationDate:
          type: string
          format: date
          description: "Дата заявления на ведение трудовой книжки"
          example: "2020-12-30"
        emplDataHandoverDate:
          type: string
          format: date
          description: "Дата заявления о передаче трудовых данных"
          example: "2021-10-01"
    Employee:
      type: object
      description: "Информация о сотруднике"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableEmployee"
        - type: object
          properties:
            primary:
              type: boolean
              description: "Информация о том, является ли данное трудоустройство работника основным"
    EmployeeType:
      description: "Информация о статусе сортудника"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableEmployeeType"
    ChangeableEmployeeType:
      properties:
        name:
          type: string
          description: "Наименование типа сотрудника"
          example: ["Бывший работник", "Претендент", "Контакт", "Работник"]
    EmployeeToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableEmployee"
        - $ref: "#/components/schemas/EmployeeForceUpdate"
    ChangeableEmployee:
      type: object
      required:
        - pdProcessingAllowed
      properties:
        tabNum:
          type: string
          description: "Табельный номер сотрудника"
          example: "543210"
        organizationId:
          description: "Идентификатор организации"
          type: string
          format: uuid
          example: "170d1bde-e77f-47c3-b238-b2c87b1aadf6"
        personId:
          description: "Идентификатор человека"
          type: string
          format: uuid
          example: "fff0f1f7-2dfb-46d0-a4e8-028ad619fd68"
        typeID:
          description: "ID типа сотрудника"
          type: string
          format: uuid
          example: "7c5129a7-a1b2-46b3-9765-3200488765f7"
        login:
          type: string
          description: "Логин"
          example: "TESTLOGIN"
        email:
          type: string
          description: "Адрес электронной почты"
          example: "testlogin@mts.ru"
        phone:
          type: string
          description: "Телефон"
          example: ["+79133400999", "+7(962) 956 68 10", "89161501072"]
        pdProcessingAllowed:
          type: boolean
          description: "наличие разрешения на обработку персональных данных, в т.ч. на отображение на портале"
        roleID:
          type: string
          format: uuid
          description: "Идентификатор роли, мало у кого имеется"
          example: "6c5d648b-70c7-489d-ba79-71c1745a10e6"
          deprecated: true
        corpTaxiAgreement:
          type: boolean
          description: "наличие корпоративного такси"
        activity:
          $ref: "#/components/schemas/Activity"

    EmployeeForceUpdate:
      description: "Технический объект для внутреннего использования"
      properties:
        forceUpdate:
          type: boolean
          description: "Принудительное обновление дедуплицированного сотрудника"
    EmployeeToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableEmployee"
        - $ref: "#/components/schemas/EmployeeForceUpdate"
    EmployeeRole:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableEmployeeRole"
    EmployeeRoleReqBody:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/ChangeableEmployeeRole"
        - $ref: "#/components/schemas/TaskID"
    ChangeableEmployeeRole:
      type: object
      properties:
        title:
          type: string
          description: "Описание роли"
          example: "ЦО / ТБ / ДИР / ЦПРИС / разработчик"
    EmployeePersonalData:
      type: object
      required: [employeeID, login, phoneSrcSystemName]
      description: "Объект для записи логина и почты сотрудника"
      properties:
        employeeID:
          $ref: "#/components/schemas/UUID"
        email:
          type: string
          description: "Почта сотрудника"
          example: "employee1@mts.ru"
        login:
          type: string
          description: "Логин сотрудника"
          example: "EMPLOYEE1"
        phone:
          type: string
          description: "Телефон сотрудника"
          example: "+78005553535"
        phoneSrcSystemName:
          type: string
          enum:
            - oim
            - oebs
            - zup1c
          description: "Система - источник данных о телефоне"
    PersonPictureID:
      type: object
      required: [ personID, pictureID ]
      description: "Объект для картинки у person"
      properties:
        personID:
          $ref: "#/components/schemas/UUID"
        pictureID:
          $ref: "#/components/schemas/UUID"
        pictureUpdateDate:
          type: string
          format: date
          description: "Дата обновления фото"
    PersonMilitary:
      type: object
      required: [ personID, military ]
      description: "Объект для воинского учета у person"
      properties:
        personID:
          $ref: "#/components/schemas/UUID"
        military:
          $ref: "#/components/schemas/MilitaryData"
    Assignment:
      description: "Назначение на должность"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableAssignment"
    AssignmentToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableAssignment"
        - $ref: "#/components/schemas/ForceCombinationStatus"
    ChangeableAssignment:
      type: object
      properties:
        eSignAllowed:
          type: boolean
          description: "Сотруднику доступна электронная подпись документ"
        eSignAllowedStart:
          type: string
          format: date
          description: "Начало действия электронной подписи документов"
          example: "2021-10-01"
        eSignAllowedEnd:
          type: string
          format: date
          description: "Окончание действия электронной подписи документов"
          example: "2022-12-10"
        employeeId:
          type: string
          format: uuid
          description: "ID сотрудника"
          example: "c2f0196f-1db8-44ce-9ade-8331a43c1ab8"
        statusId:
          type: string
          format: uuid
          description: "ID статуса назначения"
          example: "e140c97b-a867-4d20-9f64-e61117500eba"
        typeId:
          type: string
          format: uuid
          description: "ID типа назначения"
          example: "f2b144c0-3b51-4c58-9a39-9df6dd2e65a2"
        categoryID:
          $ref: "#/components/schemas/UUID"
        balanceUnitID:
          $ref: "#/components/schemas/UUID"
        virtualBalanceUnitID:
          $ref: "#/components/schemas/UUID"
        contractID:
          type: string
          format: uuid
          description: "ID договора"
          example: "cd2084f4-3527-474c-a4f2-1be1845c8b46"
        hireDate:
          type: string
          format: date
          description: "Дата найма"
          example: "2016-01-21"
        actualTerminationDate:
          type: string
          format: date
          description: "Дата увольнения"
          example: "2021-10-15"
        projectedTerminationDate:
          type: string
          format: date
          description: "Планируемая дата увольнения"
          example: "2021-10-15"
        staffUnitId:
          type: string
          format: uuid
          description: "ID штатной единицы"
          example: "1dd80857-2dbf-41a6-92e3-68f0a753fe1e"
        costCenterId:
          type: string
          format: uuid
          description: "ID центра затрат"
          example: "4162f142-472e-45bd-b468-8afbbfca4c22"
        managerId:
          type: string
          format: uuid
          description: "employeeId руководителя"
          example: "40e027b7-b259-4c47-9633-08ae20958d91"
        primary:
          type: boolean
          description: "Данное назначение является основным для сотрудника"
        probationEndDate:
          type: string
          format: date
          description: "Дата окончания испытательного срока"
          example: "2021-11-03"
        productID:
          type: string
          format: uuid
          description: "ID продукта"
          example: "060d0555-f73c-4a6c-bdd0-530a78722bda"
        locationId:
          type: string
          format: uuid
          description: "id локации"
          example: "dfb3c229-2ee0-424e-ad33-77f2186aac6d"
        FTE:
          type: number
          format: double
          description: "Рабочая нагрузка сотрудника на назначении"
          example: [1, 0.3, 0.025, 0.001]
        combinationStatus:
          $ref: "#/components/schemas/CombinationStatus"
        dgphSupervisorID:
          type: string
          format: uuid
          description: "ID сотрудника-руководителя, указывается только для сотрудников на договоре ГПХ"
          example: "060d0555-f73c-4a6c-bdd0-530a78722bda"
        activity:
          $ref: "#/components/schemas/Activity"
        leavingReasonID:
          $ref: "#/components/schemas/UUID"
        isTemporary:
          type: boolean
          description: "признак временного назначения"
        payTypeID:
          $ref: "#/components/schemas/UUID"
        assignmentObjectVersion:
          type: string
          description: "Версия объекта назначения"
          example: "16"
        budjetObjectVersion:
          type: string
          description: "Версия объекта бюджета"
          example: "3"
        unitID:
          $ref: "#/components/schemas/UUID"
        tabNum:
          type: string
          description: "Табельный номер "
          example: "1882700"
        districtCoefficient:
          type: string
          description: "Районный коэффициент"
          example: "1.15"
        staffCategory:
          type: string
          description: "Категория персонала"
          example: "Производственный"
    CombinationStatus:
      type: string
      enum:
        - Основное назначение
        - Внешнее совместительство
        - Внутреннее совместительство
        - Прочее
      description: |
        Тип совместительства назначения, вычисляется на основе атрибутов assignment category и primary.
    ForceCombinationStatus:
      description: "Объект для записи вычисленного типа совместительства"
      properties:
        forseCombinationStatus:
          $ref: "#/components/schemas/CombinationStatus"
    AssignmentToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableAssignment"
        - $ref: "#/components/schemas/ForceCombinationStatus"
    ChangeableAssignmentWithHistory:
      type: object
      description: "Изменяемые поля для историчности назначений"
      allOf:
        - $ref: "#/components/schemas/ChangeableAssignment"
        - type: object
          required: [assignmentID]
          properties:
            assignmentID:
              type: string
    AssignmentsWithHistoryToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableAssignmentWithHistory"
        - $ref: "#/components/schemas/ForceCombinationStatus"
    AssignmentsWithHistoryToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableAssignmentWithHistory"
        - $ref: "#/components/schemas/ForceCombinationStatus"
    AssignmentStatus:
      description: "Статус назначения сотрудника"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableAssignmentStatus"
        - $ref: "#/components/schemas/TaskID"
    ChangeableAssignmentStatus:
      properties:
        title:
          type: string
          description: "Описание статуса назначения"
          example: "Акт. назначение"
    AssignmentType:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableAssignmentType"
    ChangeableAssignmentType:
      properties:
        title:
          type: string
          description: "Описание типа назначения"
          example: ["STUFF", "APPLICANT"]
    AssignmentCategory:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableAssignmentCategory"
        - $ref: "#/components/schemas/TaskID"
    ChangeableAssignmentCategory:
      properties:
        title:
          type: string
          description: "Описание категории назначения"
          example:
            ["Полная занятость-постоянно", "Частичная занятость-временно"]
    Contract:
      description: "Договор о назначении на должность/переводе/повышении зп"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableContract"
    ChangeableContract:
      type: object
      properties:
        number:
          type: string
          description: "порядковый номер договора"
          example: "1060"
        employeeId:
          type: string
          format: uuid
          description: "ID сотрудника"
          example: "1dd80857-2dbf-41a6-92e3-68f0a753fe1e"
        startDate:
          type: string
          format: date
          description: "контракт действует с"
          example: "2003-08-19"
        endDate:
          type: string
          format: date
          description: "контракт действует по"
          example: "2018-12-31"
        statusId:
          type: string
          format: uuid
          description: "ID статуса контракта"
          example: "95a26e59-f3f5-4bfe-a1da-75b2a1c4a924"
        typeId:
          type: string
          format: uuid
          description: "ID типа контракта"
          example: "904c62da-d27e-42c5-8397-c84874be0b79"
        remoteDays:
          type: string
          description: "Количество дней удаленной работы"
          example: "2"
        locationID:
          $ref: "#/components/schemas/UUID"
    ContractToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableContract"
    ContractToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableContract"
    ContractStatus:
      description: "Статус контракта: действующий/временный и т.д."
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableContractStatus"
    ChangeableContractStatus:
      properties:
        name:
          type: string
          description: "Наименование статуса контракта"
          example: "Действующий"
    ContractType:
      description: "Тип контракта: трудовой договор, доп соглашение об орг. изменении, ..."
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableContractType"
    ChangeableContractType:
      properties:
        title:
          type: string
          description: "Описание типа контракта"
          example: "ДС об использовании электронной подписи"
    ChangeableAbsence:
      type: object
      required: [typeID, employeeID, listAdditionalAttributes, activity]
      properties:
        typeID:
          $ref: "#/components/schemas/UUID"
        parentAbsenceID:
          $ref: "#/components/schemas/UUID"
        employeeID:
          $ref: "#/components/schemas/UUID"
        days:
          type: integer
          description: "Кол-во дней отсутствия"
          example: 5
        listAdditionalAttributes:
          type: array
          items:
            $ref: "#/components/schemas/AbsenceAdditionalAttributes"
        activity:
          $ref: "#/components/schemas/Activity"
    AbsenceAdditionalAttributes:
      required: [assignmentID]
      properties:
        assignmentID:
          $ref: "#/components/schemas/UUID"
        orderNumber:
          type: string
          example: "000582-О-0801"
          description: "Номер приказа на отсутствие"
        orderDate:
          type: string
          format: date
          description: "Дата приказа на отсутствие"
          example: "2018-11-29"
    Absence:
      description: |
        Отсутствие сотрудника на рабочем месте. Может относиться к другому отсутствию - иметь родительское отсутствие.
        Может относиться к нескольким назначениям сотрудника - на каждое назначение будет отдельный приказ на отсутствие
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableAbsence"
    AbsenceToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableAbsence"
    AbsenceToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableAbsence"
    BalanceUnit:
      description: "Сущность для списывания затрат подразделения и ведения финансовой отчетности по нему"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableBalanceUnit"
    ChangeableBalanceUnit:
      properties:
        title:
          type: string
          description: "Название балансовой единицы"
          example: 'Филиал ПАО "МТС" в г. Саратов'
        code:
          type: string
          description: "Код балансовой единицы"
          example: "0010414"
    Unit:
      description: "организационная единица - подразделение/отдел/организация"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableUnit"
        - $ref: "#/components/schemas/ComputedUnit"
    Cluster:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableCluster"
    ClusterReqBody:
      allOf:
        - $ref: '#/components/schemas/ChangeableCluster'
        - $ref: '#/components/schemas/TaskID'
    ChangeableCluster:
      required: [title]
      properties:
        title:
          type: string
          description: "Название кластера"
          example: "Эффективный"
        description:
          type: string
          description: "Описание кластера"
          example: "Эффективный"
    Location:
      description: "Физическое местоположение объекта"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableLocation"
    ChangeableLocation:
      type: object
      properties:
        districtCoefficient:
          type: string
          description: "Районный коэффициент"
          example: "1.15"
        postalCode:
          type: string
          description: "Почтовый индекс"
          example: "426008"
        countryName:
          type: string
          description: "страна"
          example: "Российская Федерация"
        regionPrefix:
          type: string
          description: "префикс региона"
          example: "Респ"
        region:
          type: string
          description: "регион"
          example: "Удмуртская"
        districtPrefix:
          type: string
          description: "префикс района"
          example: "р-н"
        district:
          type: string
          description: "район"
          example: "Тейковский"
        cityPrefix:
          type: string
          description: "префикс города"
          example: "г"
        city:
          type: string
          description: "город"
          example: "Тейково"
        sattlementPrefix:
          type: string
          description: "префикс нас. пункта"
          example: "жилрайон"
        sattlement:
          type: string
          description: "населенный пункт"
          example: "Центральный"
        streetPrefix:
          type: string
          description: "префикс улицы"
          example: "пр-кт"
        street:
          type: string
          description: "улица"
          example: "Шереметевский"
        house:
          type: string
          description: "дом"
          example: '108, ТЦ "Veer Mall"'
        section:
          type: string
          description: "корпус"
          example: "2, литера В"
        office:
          type: string
          description: "офис"
          example: "пом.1202"
        regionCode:
          type: string
          description: "регион, код территории (КЛАДР)"
          example: "0200000000000"
        areaCode:
          type: string
          description: "код территории (КЛАДР)"
          example: "0100500000000"
        cityCode:
          type: string
          description: "город, код территории (КЛАДР)"
          example: "0200000100000"
        streetCode:
          type: string
          description: "улица, код территории (КЛАДР)"
          example: "02000001000001400"
        inactiveDate:
          type: string
          format: date
          description: "дата прекращения использования"
          example: "2013-09-05"
        settlementCode:
          type: string
          description: "Код КЛАДР населённого пункта"
          example: "0201100007300"
        whereabouts:
          type: string
          description: "Местонахождение"
          example: "Мордовия Респ., г. Саранск"
    LocationToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableLocation"
    LocationToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableLocation"
    ChangeableHierarchy:
      type: object
      properties:
        name:
          type: string
          description: "Наименование иерархии"
          example: "Проектная иерархия ЗАО СТС"
        isPrimary:
          type: boolean
          description: "Является ли данная иерархия основной"
    Hierarchy:
      description: "метаинформация о иерархии подразделений"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableHierarchy"
    UnitToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableUnit"
    UnitToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableUnit"
    ComputedUnit:
      type: object
      description: "вычисляемые параметры"
      properties:
        unitManagerId:
          $ref: "#/components/schemas/UUID"
    ChangeableUnit:
      type: object
      properties:
        title:
          type: string
          description: "Название подразделения/отдела"
          example: "Функциональная группа оптимизации продуктовых решений"
        description:
          type: string
          description: "Описание подразделения/отдела"
          example: "0000 КЦ Группы МТС|0074 БКОМ|0446 Деп. разв. и операц. сопр.|0901 Отд. упр. жизн. цикл. тариф. и усл.|9341 Функциональная группа оптимизации продуктовых решений"
        shortName:
          type: string
          description: "Сокращенное имя организации"
          example: "МТС Диджитал"
        parentId:
          type: string
          format: uuid
          description: "ID родительского подразделения/отдела"
          example: "8c9ce3d7-fdd2-49f1-a70c-8f74ee453cee"
        unitTypeId:
          type: string
          format: uuid
          description: "ID типа подразделения"
          example: "6bda764d-3446-43b7-bbfb-d9d5bc368b3e"
        calendarId:
          type: string
          format: uuid
          description: "ID календаря"
          example: "a845b687-c6b6-4c36-af84-eb26a6bf0be8"
        supervisorId:
          type: string
          format: uuid
          description: "ID **штатной единицы** руководителя"
          example: "1abd976f-24ff-4610-bf99-9be469b13c96"
        costCenterId:
          type: string
          format: uuid
          description: "ID центра затрат"
          example: "55908173-7b79-435a-9d2e-f4cf6aae3a1b"
        activity:
          $ref: "#/components/schemas/Activity"
        clusterId:
          type: string
          format: uuid
          description: "ID кластера"
          example: "5f6e4a8b-f9a4-4faa-b263-00d1d6f07fe2"
        calcClusterID:
          type: string
          format: uuid
          description: "ID кластера посчитанный по основной иерархии"
          example: "5f6e4a8b-f9a4-4faa-b263-00d1d6f07fe2"
        locationId:
          type: string
          format: uuid
          description: "id локации"
          example: "48c76328-fdfc-4aad-859b-826906a439b5"
        functionalBlockID:
          type: string
          format: uuid
          description: "ID функционального блока"
          example: "1c44d45b-7dde-48e4-89ae-f9c414bd439b"
        balanceUnitID:
          $ref: "#/components/schemas/UUID"
        virtualBalanceUnitID:
          $ref: "#/components/schemas/UUID"
        productID:
          type: string
          format: uuid
          description: "ID продукта"
          example: "07b802fd-435b-470e-9fca-6b327dcd1c48"
        orgCode:
          type: string
          format: string
          description: "Code организации"
          example: "0007"
        isVisible:
          type: boolean
          description: "Признак видимости подразделения на портале Пульс"
        organizationID:
          type: string
          format: uuid
          description: "ID организации, в структуре которой находится подразделение"
        altDescription:
          type: string
          description: "Наименование подразделения для BPM Eludia. Будет удалено в ближайшей перспективе"
        budmanID:
          type: string
          description: "ID для budman"
    HierarchyLink:
      description: "Связь между подразделениями в рамках конкретной иерархии. У корневых подразделений отсутствует родитель"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableHierarchyLink"
    ChangeableHierarchyLink:
      type: object
      required:
        - hierarchyID
        - childID
      properties:
        hierarchyID:
          type: string
          format: uuid
          description: "ID иерархии подразделений"
          example: "23ccb028-4388-4ca7-8fc5-93d3d180e5e5"
        parentID:
          type: string
          format: uuid
          description: "ID подразделения-родителя, выше стоящего в иерархии"
          example: "67398b28-3a3c-4fbe-8e78-a59462b48212"
        childID:
          type: string
          format: uuid
          description: "ID подразделения-наследника, находящегося в иерархическом подчинении у подразделения родителя"
          example: "e6f564a6-2147-4238-b451-ee323a88f96d"
    HierarchyLinkToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableHierarchyLink"
    HierarchyLinkToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableHierarchyLink"
    UnitType:
      description: "Тип подразделения"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableUnitType"
    ChangeableUnitType:
      properties:
        title:
          type: string
          description: "Описание типа подразделения"
          example: "Департамент"
    Schedule:
      description: "Метаинформация о рабочем графике"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableSchedule"
    ScheduleToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableSchedule"
    ScheduleToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableSchedule"
    ChangeableSchedule:
      required:
        [title, description, breakDescription]
      properties:
        title:
          type: string
          description: "Название расписания"
          example: "ГР-010-0600-1\\1"
        description:
          type: string
          description: "Описание расписания"
          example: "Смена 55 (0,8 ставки 8:30-15:54)"
        calendarID:
          $ref: "#/components/schemas/UUID"
        breakDescription:
          type: string
          description: "Описание формата и размера перерывов за смену"
          example: "Обед 1 час 20 минут"
        approvalStatus:
          type: boolean
          description: "Флаг, показывающий согласовано ли данное расписание"
        unitID:
          $ref: "#/components/schemas/UUID"
        shiftTypeID:
          $ref: "#/components/schemas/UUID"
    ScheduleDay:
      description: "День конкретного рабочего графика. Когда weekend=true рабочие часы отсутствуют"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableScheduleDay"
        - type: object
          properties:
            weekend:
              type: boolean
              description: "Флаг выходного дня на указанную дату рабочего графика"
    ScheduleDayToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableScheduleDay"
    ScheduleDayToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableScheduleDay"
    ChangeableScheduleDay:
      required: [scheduleID, date]
      properties:
        scheduleID:
          $ref: "#/components/schemas/UUID"
        date:
          type: string
          format: date
          description: "Описание формата и размера перерывов за смену"
          example: "2020-01-10"
        hoursID:
          type: string
          format: uuid
          description: "ссылка на рабочие часы указанной даты, в слу"
          example: "23ccb028-4388-4ca7-8fc5-93d3d180e5e5"
    WorkingHours:
      description: "Информация о рабочих часах"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableWorkingHours"
    WorkingHoursToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableWorkingHours"
    WorkingHoursToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableWorkingHours"
    ChangeableWorkingHours:
      required: [duration]
      properties:
        start:
          type: string
          pattern: '^\d{2}:\d{2}$'
          description: "Начало рабочего дня"
          example: "08:00"
        end:
          type: string
          pattern: '^\d{2}:\d{2}$'
          description: "Конец рабочего дня"
          example: "16:59"
        duration:
          type: number
          description: "Количество рабочих часов"
          example: 9
    PersonalSchedule:
      description: "Информация о рабочем расписании сотрудника"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeablePersonalSchedule"
        - type: object
          required: [shiftType, workWeekHours]
          properties:
            shiftType:
              $ref: "#/components/schemas/ChangeableShiftType"
            workWeekHours:
              $ref: "#/components/schemas/ChangeableWorkWeekHours"
    PersonalScheduleToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeablePersonalSchedule"
    PersonalScheduleToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeablePersonalSchedule"
    ChangeablePersonalSchedule:
      required: [assignmentID, scheduleID]
      properties:
        assignmentID:
          $ref: "#/components/schemas/UUID"
        scheduleID:
          $ref: "#/components/schemas/UUID"
        weekType:
          type: string
          enum: [notfullshort, short, normal, notfull]
        shiftTypeID:
          type: string
          format: uuid
          description: "ID типа рабочего графика, используется только для записи"
          example: "d32dcab6-7619-4a2e-9db9-895b5ce57670"
          writeOnly: true
        workWeekHoursID:
          type: string
          format: uuid
          description: "ID длительность рабочей недели, используется только для записи"
          example: "255625e2-6dc5-4997-9338-11c2000f8c3e"
          writeOnly: true
        earningPolicyID:
          $ref: "#/components/schemas/UUID"
        normDay:
          type: boolean
          description: "Суммированный учет"
        activity:
          $ref: "#/components/schemas/Activity"
    ShiftType:
      description: "Тип графика работ, например: Гибкий график с одной сменой"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableShiftType"
    ShiftTypeToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableShiftType"
    ShiftTypeToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableShiftType"
    ChangeableShiftType:
      description: "Тип графика работ, например: Гибкий график с одной сменой"
      required: [description]
      properties:
        description:
          type: string
          example: "Шестидневная рабочая неделя"
    WorkWeekHoursToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableWorkWeekHours"
    WorkWeekHoursToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableWorkWeekHours"
    ChangeableWorkWeekHours:
      description: "Количество часов в рабочей неделе"
      required: [description]
      properties:
        description:
          type: string
          example: "24-часовая рабочая неделя"
    StaffUnit:
      # Тут аналогично полям в Person. Есть например поле про инсайдерскую информацию. Нужно подумать правильно ли их в принципе вносить в сущность или следует как-то абстрагировать.
      description: "Штатная единица - позиция в организационной структуре, занимаемая работником"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableStaffUnit"
        - $ref: "#/components/schemas/HistoryID"
    ChangeableStaffUnit:
      required: [unitId]
      properties:
        unitId:
          type: string
          format: uuid
          description: "ID отдела к которому относится штатная единица"
          example: "073b5caf-5340-4de6-b019-3e688d45dce6"
        gradeId:
          type: string
          format: uuid
          description: "ID грейда"
          example: "ef23a508-299a-46d2-9d47-3c7bd3c149c0"
        activity:
          type: object
          properties:
            start:
              type: string
              format: date
              example: "2013-05-16"
            end:
              type: string
              format: date
              example: "4712-12-31"
        calendarId:
          type: string
          format: uuid
          description: "ID календаря"
          example: "2ffd3d07-2da2-42a1-aad6-e40cd48fefc2"
        positionId:
          type: string
          format: uuid
          description: "ID должности"
          example: "bc500c26-266d-4844-afc2-4ee5c1e07836"
        staffCode:
          type: string
          description: "Номер штатной единицы"
          example: "начальник отдела.000001055"
        isSupervisorCalc:
          type: boolean
          description: |
            Расчетный статус руководителя. True, если существуют другие экземпляры ШЕ, для которых данная ШЕ является руководящей
        isSupervisor:
          type: boolean
          description: |
            Признак руководителя штатной единицы. (Устанавливается вручную)
        locationId:
          type: string
          format: uuid
          description: "id локации на которой должен работать сотрудник в рамках данной штатной единицы"
          example: "ba86f975-4b9a-4409-ba5b-4079d10ca73d"
        supervisorStaffID:
          type: string
          format: uuid
          description: "ID руководящей штатной единицы"
          example: "00905610-5aad-4275-a641-37b9ebfbfdd4"
        functionalSupervisorID:
          type: string
          format: uuid
          description: "ID штатной единицы функционального руководителя"
          example: "db2ee3b2-a766-40bb-ab5b-a89b1f1d4678"
        administrativeSupervisorID:
          type: string
          format: uuid
          description: "ID штатной единицы административного руководителя"
          example: "e35c765e-cb25-4762-9b1e-b4ae3b1082ad"
        availabilityID:
          type: string
          format: uuid
          description: "ID статуса доступности штатной единицы"
          example: "99955954-e3f3-4098-bb1f-cfa935807746"
        functionalBlockID:
          type: string
          format: uuid
          description: "ID функционального блока на ШЕ"
          example: "40d3ba12-3465-40de-ae44-561b53991e50"
        budget:
          type: string
          description: "Бюджет штатной единицы"
          example: "213824.65"
        budgetCurrency:
          type: string
          description: "Буквенный код валюты бюджета ШЕ в соответствии с ISO 4217"
          example:
            - "RUB"
        displayName:
          type: string
          description: "Наименование должности (на портале)"
          example: "аджайл коуч"
        FTE:
          type: number
          format: double
          description: "Cтавка сотрудника на штатной единице"
          example: "1"
        openReason:
          type: string
          description: "Причина ввода штатной единицы"
          example: "01/00222 П 15.06.2020"
        closeReason:
          type: string
          description: "Причина вывода штатной единицы"
          example: "01/00222 П 15.06.2020"
        closeDate:
          type: string
          format: date
          description: "Дата вывода штатной единицы"
          example: "2021-12-31"
        projectedCloseDate:
          type: string
          format: date
          description: "Планируемая дата вывода штатной единицы"
          example: "2021-12-31"
        isTargetStructure:
          type: boolean
          description: "Входит ли штатная единица в целевую структуру компании"
        openProject:
          type: string
          description: "Проект, по которому введена ШЕ"
          example: "Интеграция Комстар-ОТС"
        insideInfoPermission:
          type: boolean
          description: "есть ли доступ к инсайдерской информации"
        harmfullClass:
          type: string
          description: "класс вредности"
          example: "3"
        harmWorkOutturnCode:
          type: string
          description: "код процентной выработки вредных условий труда"
          example: "100"
        harmWorkHolidayCode:
          type: string
          description: "код дополнительных выходных за вредные условия труда"
          example: "14"
        harmWorkPercentCode:
          type: string
          description: "код процента вредности труда"
          example: "12"
        isStructForming:
          type: boolean
          description: 'признак "образующая структуру"'
        isMassStaffUnit:
          type: boolean
          description: 'Признак "Массовая ШЕ (РТК)"'
        vacant:
          $ref: "#/components/schemas/Activity"
        typeID:
          $ref: "#/components/schemas/UUID"
        backBonusPaymentCategoryID:
          type: string
          format: uuid
          description: "ID категории премирования сотрудников бэкофиса"
          example: "f82520ed-caa5-43d8-aa23-5d4f36e7d838"
        paoBonusPaymentCategoryID:
          type: string
          format: uuid
          description: "ID категории премирования ПАО"
          example: "87175bf3-280c-4395-b646-30592a7cd948"
        objectVersionNumber:
          type: string
          description: "Версия ШЕ объекта"
          example: "39"
        staffStartDate:
          type: string
          format: date
          description: "Дата начала доступности ШЕ"
          example: "2015-10-01"
        equipmentCategory:
          type: string
          description: "Код оборудования"
          example: "1"
        staffRoleID:
          type: string
          format: uuid
          description: "Идентификатор роли"
          example: "b44d120f-336e-11ed-80fd-0050560b4612"
        staffRoleStart:
          type: string
          format: date
          description: "Дата начала действия роли"
        criticalityCategory:
          type: string
          description: "Категория критичности для бизнеса"
          example: "Низкая"
        teamVacancyCode:
          type: string
          description: "Идентификатор вакансии в TEAM"
          example: "256"
        staffPredecessorID:
          type: string
          format: uuid
          description: "ID ШЕ предшественника"
          example: "fdb9cc35-939f-497d-a85e-ec6db9d8c6d7"
        budmanID:
          type: string
          description: "ID для budman"
        productEntityID:
          type: string
          format: uuid
          description: "ID  продукта PPInfo ввода ШЕ"
          example: "fdb9cc35-939f-497d-a85e-ec6db9d8c6d7"
    HistoryID:
      properties:
        historyID:
          type: string
          description: "ID исторической записи (только с параметром history)"
    ChangeableStaffWithHistory:
      type: object
      description: "Изменяемые поля для историчности штатных едениц"
      allOf:
        - $ref: "#/components/schemas/ChangeableStaffUnit"
        - type: object
          required: [ staffID ]
          properties:
            staffID:
              type: string
    StaffUnitToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableStaffUnit"
    StaffUnitToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableStaffUnit"
    StaffUnitsWithHistoryToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableStaffWithHistory"
    StaffUnitsWithHistoryToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableStaffWithHistory"
    StaffAvailabilityStatus:
      description: "статус доступности штатной единицы"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableStaffAvailabilityStatus"
    ChangeableStaffAvailabilityStatus:
      type: object
      required: [title]
      properties:
        title:
          type: string
          example: "Предложено"
    StaffAvailabilityStatusToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableStaffAvailabilityStatus"
    StaffAvailabilityToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableStaffAvailabilityStatus"
    StaffType:
      description: "справочник типов штатных единиц"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableStaffType"
    ChangeableStaffType:
      type: object
      required: [name]
      properties:
        name:
          type: string
          description: "Наименование типа"
          example: "Отдельное лицо, занимающее должность"
    StaffTypeToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableStaffType"
    StaffTypeToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableStaffType"
    BackBonusPaymentCategory:
      description: "справочник категорий премирований сотрудников бэкофиса"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableBackBonusPaymentCategory"
    ChangeableBackBonusPaymentCategory:
      type: object
      required: [code, name]
      properties:
        code:
          type: string
          description: "категория премирования сотрудников бэкофиса"
          example: "22"
        name:
          type: string
          description: "Описание БД на ШЕ"
          example: "БУЗ комиссия"
    BackBonusPaymentCategoryToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableBackBonusPaymentCategory"
    BackBonusPaymentCategoryToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableBackBonusPaymentCategory"
    PAOBonusPaymentCategory:
      description: "справочник категорий премирований ПАО"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeablePAOBonusPaymentCategory"
    ChangeablePAOBonusPaymentCategory:
      type: object
      required: [code, name]
      properties:
        code:
          type: string
          description: "ID премирования ПАО"
          example: "15"
        name:
          type: string
          description: "название категории премирования"
          example: "участник ПАО VIP 25%"
    PAOBonusPaymentCategoryToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeablePAOBonusPaymentCategory"
    PAOBonusPaymentCategoryToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeablePAOBonusPaymentCategory"
    Organization:
      description: "Информация об организации"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableOrganization"
    ChangeableOrganization:
      type: object
      properties:
        unit:
          $ref: "#/components/schemas/Unit"
        inn:
          type: string
          description: "ИНН"
        kpp:
          type: string
          description: "КПП"
        ogrn:
          type: string
          description: "ОГРН"
        calendarId:
          type: string
          format: uuid
          description: "ID календаря"
    Grade:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableGrade"
    GradeToCreate:
      description: "Данные для создания грейда"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableGrade"
    GradeToUpdate:
      description: "Данные для создания грейда"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableGrade"
    ChangeableGrade:
      type: object
      required: [name, code]
      properties:
        name:
          type: string
          description: "Название грейда"
          example: "11.МГТС"
        min:
          type: string
          description: "Минимальная вилка грейда"
        max:
          type: string
          description: "Максимальная вилка грейда"
        mid:
          type: string
          description: "Средняя вилка грейда"
        unitID:
          $ref: "#/components/schemas/UUID"
        code:
          type: string
          description: "Код грейда"
    Position:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeablePosition"
    ChangeablePosition:
      properties:
        title:
          type: string
          description: "Название позиции"
          example: "главный специалист"
        categoryID:
          description: "Идентификатор категории должности"
          type: string
          format: uuid
          example: "08179e56-f493-4cf8-9eff-8491afd5761c"
    CalendarToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableCalendar"
    CalendarToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableCalendar"
    Calendar:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableCalendar"
    ChangeableCalendar:
      required: [unitID, holidayCalendar]
      properties:
        unitID:
          $ref: "#/components/schemas/UUID"
        holidayCalendar:
          type: string
          description: "Название календаря праздников"
          example: "СТВ Праздничные дни в Башкортостане"
        weekType:
          type: string
          description: "Тип рабочей недели"
          example: "Пятидневный"
        primary:
          type: boolean
          description: "Календарь является основным. Основной пятидневный"
    CalendarDayToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableCalendarDay"
    CalendarDayToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableCalendarDay"
    CalendarDay:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableCalendarDay"
    ChangeableCalendarDay:
      required: [date, calendarID]
      properties:
        date:
          type: string
          format: date
          description: "Дата"
          example: "2021-03-18"
        calendarID:
          type: string
          format: uuid
          description: "ID календаря"
          example: "17149cd3-bb24-4fc6-8e8f-934a5f81f6dd"
        transDate:
          type: string
          format: date
          description: "Дата на которую перенесен данный тип дня"
          example: "2021-05-03"
        dayType:
          $ref: "#/components/schemas/CalendarDayType"
        holidayName:
          type: string
          example: "Праздник Весны и Труда"



    CostCenter:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableCostCenter"
    ChangeableCostCenter:
      required:
        - code
      properties:
        code:
          type: string
          example: "RXW"
        description:
          type: string
          description: "Описание центра затрат"
          example: "Центр технического развития и технологий разработки"
        groupName:
          type: string
          description: "Категория персонала"
          example: "Производственный"
        parentIDs:
          $ref: "#/components/schemas/IDsList"
        managerID:
          type: string
          description: "Руководитель ЦФО"
          example: "76b47811-9f69-4e87-9292-0dd9de065750"
    FunctionalBlock:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableFunctionalBlock"
    FunctionalBlockReqBody:
      allOf:
        - $ref: "#/components/schemas/FunctionalBlock"
        - $ref: "#/components/schemas/TaskID"
    ChangeableFunctionalBlock:
      type: object
      required:
        - name
        - shortName
      properties:
        name:
          type: string
          description: "Название функционального блока"
          example: "Подразделения блока по международным вопросам"
        shortName:
          type: string
          description: "Сокращение названия функционального блока"
          example: "БМВ"
    ChangeableTimekeeper:
      type: object
      description: "Табельщик. Сущность представляет связь между сотрудником и подразделением/назначением, на который назначен данный сотрудник(timekeeperID)"
      required: [timekeeperID, groupID, unitID]
      properties:
        timekeeperID:
          description: "ID сотрудника (сущность Employee)"
          type: string
          format: uuid
          example: "e2883933-0815-42be-a7bb-88f13dc3c970"
        groupID:
          $ref: "#/components/schemas/UUID"
        assignmentID:
          $ref: "#/components/schemas/UUID"
        unitID:
          $ref: "#/components/schemas/UUID"
    Timekeeper:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableTimekeeper"
    TimekeeperToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableTimekeeper"
    ChangeableTimekeeperGroup:
      properties:
        name:
          type: string
          description: "Наименование группы табельщиков"
          example: "Группа_РТК_Розница_G276"
    TimekeeperGroup:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableTimekeeperGroup"
    TimekeeperGroupToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableTimekeeperGroup"
    TimekeeperGroupToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableTimekeeperGroup"
    Salary:
      description: "зарплата"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableSalary"

    ChangeableSalary:
      type: object
      required:
        - assignmentId
        - currency
        - value
      properties:
        assignmentId:
          type: string
          format: uuid
          description: "Идентификатор назначения"
          example: "be2ef230-5e0f-47d1-8584-63bcf70aa81a"
        currency:
          type: string
          description: "Буквенный код валюты в соответствии с ISO 4217"
          example: "RUB"
        value:
          type: string
          description: "Cумма зарплаты"
          example: "100.56"
        activity:
          $ref: "#/components/schemas/Activity"

    SalaryToUpdate:
      description: "Технический объект для внутреннего использования"
      type: object
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableSalary"
    SalaryToCreate:
      description: "Технический объект для внутреннего использования"
      type: object
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableSalary"

    StaffRoles:
      description: "Роль штатной еденицы"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableStaffRoles"

    ChangeableStaffRoles:
      type: object
      properties:
        name:
          type: string
          description: "Название роли"
          example: "Тестовая роль"
        code:
          type: string
          description: "Код роли"
          example: "ТестовыйКодРМС"

    StaffRolesToUpdate:
      description: "Технический объект для внутреннего использования"
      type: object
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableStaffRoles"

    StaffRolesToCreate:
      description: "Технический объект для внутреннего использования"
      type: object
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableStaffRoles"

    Allowance:
      description: "Надбавка"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableAllowance"

    ChangeableAllowance:
      description: "Технический объект для внутреннего использования"
      type: object
      required:
        - assignmentID
        - value
        - kind
      properties:
        assignmentID:
          type: string
          format: uuid
          description: "Идентификатор назначения"
          example: "5e4d1939-fb15-4ff3-a96f-cf572e7abbe2"
        activity:
          $ref: "#/components/schemas/Activity"
        donorStaffUnitID:
          $ref: "#/components/schemas/UUID"
        value:
          type: string
          description: "Размер надбавки"
          example: "12.98"
        kind:
          type: string
          enum:
            - percent
            - cash
        currency:
          type: string
          description: "Буквенный код валюты в соответствии с ISO 4217, заполнено только если kind = cash"
          example: "RUB"
        name:
          type: string
          description: "Описание надбавки"
          example: "Надбавка за вредные условия труда"
        code:
          type: string
          description: "Код надбавки"
          example: "1005"
        altCode:
          type: string
          description: "Альтернативный код надбавки"
          example: "СОВМ"

    AllowanceToUpdate:
      description: "Технический объект для внутреннего использования"
      type: object
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableAllowance"
    AllowanceToCreate:
      description: "Технический объект для внутреннего использования"
      type: object
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableAllowance"

    ChangeableProduct:
      type: object
      required:
        - name
        - code
      properties:
        name:
          type: string
          description: "название продукта"
          example: "ABW Dynamics"
        code:
          type: string
          description: "код продукта"
          example: "ABWD"

    ProductToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableProduct"

    Product:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableProduct"

    ProductToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableProduct"

    ChangeableVHI:
      type: object
      required: [assignmentID, activity, number, city, category]
      properties:
        assignmentID:
          $ref: "#/components/schemas/UUID"
        activity:
          $ref: "#/components/schemas/Activity"
        number:
          description: "номер полиса ДМС"
          type: string
          example: "Пр5290621"
        city:
          description: "город, где полис был оформлен"
          type: string
          example: "Москва"
        category:
          description: "категория ДМС - пакет услуг, входящих в полис"
          type: string
          example: "Базовый"

    VHIToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableVHI"

    VHI:
      description: "информация о полисе ДМС"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableVHI"

    VHIToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableVHI"

    ChangeableOffice:
      description: "Изменяемые параметры офиса"
      type: object
      required: [locationID, name ]
      properties:
        locationID:
          type: string
          format: uuid
          description: "ID локации, где находится офис"
          example: "073b5caf-5340-4de6-b019-3e688d45dce6"
        name:
          type: string
          description: "Наименование офиса"


    Offices:
      description: "информация о офисе работы"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableOffice"

    OfficeToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableOffice"

    OfficeToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableOffice"

    Event:
      description: "Cобытие. Регистрирует факт создания/изменения одной из сущностей сервиса"
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: "9471f10e-26a9-486f-81e6-9ab1a4d373cf"
        kind:
          description: "Тип произошедшего события"
          type: string
          enum:
            - delete
            - create
            - patch
        objectKind:
          $ref: "#/components/schemas/ObjectKind"
        objectId:
          type: string
          format: uuid
          example: "34ce5d82-f1b1-4163-91ac-4d8b17e49a6c"
        createdAt:
          type: string
          format: date-time
          example: "2022-03-30T10:53:49.631608Z"
        attributes:
          type: object
          description: "Дополнительные атрибуты (для каждого типа objectKind свои)"
    #  Чтобы не использовать слишком дефолтное имя и ни с чем не перепутать
    APIError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: "Сообщение об ошибке"
          example: ""
    CreatedItem:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          description: "ID созданного объекта"
          example: "34ce5d82-f1b1-4163-91ac-4d8b17e49a6c"

    BatchCreatedItem:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/CreatedItem"

    FullPersonProfile:
      allOf:
        - $ref: "#/components/schemas/Person"
        - type: object
          properties:
            employees:
              type: array
              items:
                $ref: "#/components/schemas/FullEmployee"

    FullEmployee:
      allOf:
        - $ref: "#/components/schemas/Employee"
        - type: object
          properties:
            assignments:
              type: array
              items:
                $ref: "#/components/schemas/FullAssignment"

    EmployeeWithPerson:
      allOf:
        - $ref: "#/components/schemas/Employee"
        - type: object
          properties:
            person:
              $ref: "#/components/schemas/Person"

    FullAssignment:
      allOf:
        - $ref: "#/components/schemas/Assignment"
        - type: object
          properties:
            staffUnit:
              $ref: "#/components/schemas/FullStaffUnit"
            unitPath:
              $ref: "#/components/schemas/UnitPath"

    ComplexAssignment:
      allOf:
        - $ref: "#/components/schemas/FullAssignment"
        - type: object
          properties:
            employee:
              $ref: "#/components/schemas/EmployeeWithPerson"
    ComplexAssignmentV2:
      allOf:
        - $ref: "#/components/schemas/Assignment"
        - type: object
          properties:
            staffUnit:
              $ref: "#/components/schemas/StaffUnitWithPosition"
            employee:
              $ref: "#/components/schemas/EmployeeWithPerson"
            remoteWork:
              $ref: "#/components/schemas/RemoteWork"
    RemoteWork:
      type: object
      required:
        - isRemote
      properties:
        isRemote:
          type: boolean
          description: "Признак удаленной работы"
        timeSchedule:
          type: string
          description: "график работы"
          example: "смешанный"
    StaffUnitWithPosition:
      allOf:
        - $ref: "#/components/schemas/StaffUnit"
        - type: object
          properties:
            position:
              $ref: "#/components/schemas/Position"
    AssignmentWithEmployee:
      allOf:
        - $ref: "#/components/schemas/Assignment"
        - type: object
          properties:
            staffUnit:
              $ref: "#/components/schemas/StaffUnit"
            employee:
              $ref: "#/components/schemas/EmployeeWithPerson"

    FullStaffUnit:
      allOf:
        - $ref: "#/components/schemas/StaffUnit"
        - type: object
          properties:
            units:
              type: array
              description: "Отсортированный массив подразделений от того в которое назначен сотрудник напрямуя до корневого"
              items:
                $ref: "#/components/schemas/Unit"
            position:
              $ref: "#/components/schemas/Position"
    FullUnit:
      allOf:
        - $ref: "#/components/schemas/Unit"
        - type: object
          properties:
            headAssignment:
              $ref: "#/components/schemas/AssignmentWithEmployee"
    UnitPath:
      type: object
      required:
        - unitId
      properties:
        unitId:
          type: string
          format: uuid
          description: "ID подразделения/отдела"
        units:
          type: array
          description: "Отсортированный массив подразделений от корневого до требуемого"
          items:
            $ref: "#/components/schemas/Unit"
    ChangeablePerson:
      type: object
      properties:
        firstName:
          type: string
          description: "Имя"
          example: "Акакий"
        lastName:
          type: string
          description: "Фамилия"
          example: "Акакиев"
        middleNames:
          type: string
          description: "Отчество/дополнительные имена"
          example: "Акакиевич"
        gender:
          type: string
          description: "Пол"
          example: "F"
        pictureID:
          "$ref": "#/components/schemas/UUID"
        pictureUpdateDate:
          type: string
          format: date
          description: "Дата обновления фото"
        deduplicatedID:
          type: string
          format: uuid
          description: "ID физлица, который считается оригинальным в случае дублирования"
        code1C:
          type: string
          description: "Код физлица 1С"
    ChangPersonWithDoc:
      type: object
      allOf:
        - $ref: "#/components/schemas/ChangeablePerson"
        - type: object
          properties:
            documents:
              $ref: "#/components/schemas/ChangeableDocument"
    PersonToCreate:
      type: object
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangPersonWithDoc"
        - type: object
          properties:
            activity:
              $ref: "#/components/schemas/Activity"
            deduplicate:
              type: boolean
    PersonToUpdate:
      type: object
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangPersonWithDoc"
        - type: object
          properties:
            activity:
              $ref: "#/components/schemas/Activity"
            deduplicate:
              type: boolean
    ChangeableDocument:
      type: object
      properties:
        dateOfBirth:
          type: string
          format: date
          description: "Дата рождения"
          example: "1990-12-20"
        snils:
          type: string
          description: "СНИЛС в формате 00000000000. Без разделителей, пробелов, только 11 чисел"
          example: "32215121124"
        citizenship:
          type: string
          description: "Гражданство"
          example: "Россия"
        inn:
          type: string
          description: "ИНН"
          example: "732772562359"
        passport:
          $ref: "#/components/schemas/Passport"
        address:
          $ref: "#/components/schemas/Address"
        employmentRecord:
          $ref: "#/components/schemas/EmploymentRecord"
        disabilityCategoryID:
          $ref: "#/components/schemas/UUID"
        militaryData:
          $ref: "#/components/schemas/MilitaryData"

    ChangeableAbsenceType:
      type: object
      description: "причина отсутствия работника на рабочем месте"
      required: [name, activity]
      properties:
        name:
          type: string
          description: "название типа отсутствия"
          example: "Доп отпуск за ненорм раб день"
        categoryCode:
          type: string
          description: "категория типа отсутствия (латиница)"
          example: "OD"
        legalCategory:
          type: string
          description: "категория отсутствия для отчета"
          example: "Периодический отпуск"
        reportFullName:
          type: string
          description: "Полное имя отсутствия для отчетности"
          example: "Денежная компенсация за ежегодный дополнительный отпуск при гибком рабачем времени"
        altName:
          type: string
          description: "альтернативное название типа отсутствия"
          example: "ОтпускНаСанаторноКурортноеЛечение"
        vacacionName:
          type: string
          description: "название вида отпуска (может быть uuid)"
          example: "5e2dbedf-7eb6-11ec-80f6-0050560b4612"
    AbsenceType:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableAbsenceType"
    AbsenceTypeToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableAbsenceType"
    AbsenceTypeToCreate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableAbsenceType"

    ChangeableLeavingReason:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: "Статья 77, пункт 6_1"
        description:
          type: string
          example: "Трудовой договор прекращен в связи с отказом работника от продолжения работы в связи со сменой собственника имущества организации, пункт 6 части первой статьи 77 Трудового Кодекса Российской Федерации"
    LeavingReason:
      description: "Причина увольнения"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableLeavingReason"
    LeavingReasonToUpdate:
      description: "Технический объект для внутреннего использования"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableLeavingReason"
    LeavingReasonToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableLeavingReason"
    Activity:
      description: "период активности объекта"
      type: object
      properties:
        from:
          type: string
          format: date
          description: "дата начала действия"
          example: "2018-11-29"
        to:
          type: string
          format: date
          description: "дата окончания действия"
          example: "4712-12-31"
    IDsList:
      type: array
      items:
        type: string
        format: uuid
        description: "ID объектов"
        example:
          [
            "8869e21a-34c3-4cd6-8768-90707cc36e67",
            "e1b90edd-4fa0-40b8-8b38-cfbd4f34a156",
            "7f46122a-732a-44be-b6d4-d5614556e7c6",
          ]
    UUID:
      type: string
      format: uuid
      description: "ID объекта"
      example: "8869e21a-34c3-4cd6-8768-90707cc36e67"
    TaskID:
      type: object
      description: "ID задача в рамках которой были выполнены действия над объектом"
      properties:
        taskID:
          $ref: '#/components/schemas/UUID'
    BasicObject:
      type: object
      description: "Стандартный набор полей, генерящихся в сервисе для каждой сущности"
      required: [id, createdAt, updatedAt]
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        createdAt:
          type: string
          format: date-time
          description: "Дата создания объекта"
          example: "2021-11-12T15:38:55.965248Z"
        updatedAt:
          type: string
          format: date-time
          description: "Дата изменения объекта"
          example: "2022-03-30T10:53:49.631608Z"
        deletedAt:
          type: string
          format: date-time
          description: "Дата удаления объекта"
          example: "2022-03-30T10:53:49.631608Z"
    Identifier:
      type: object
      description: "Объект для встраивания в сущности на update, чтобы не передавать поля createdAt, updatedAt, которые заполняются на уровне сервиса"
      required: [id]
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        taskID:
          $ref: "#/components/schemas/UUID"
    OperationIdentifier:
      type: object
      required: [operationID]
      properties:
        operationID:
          type: string
          format: uuid
          description: "временный ID сущности batch операции для однозначного определения ответа"
          example: "702837e1-e4b0-4d33-a8f6-b820a1cfdf0d"
        taskID:
          $ref: '#/components/schemas/UUID'
    PositionCategory:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeablePositionCategory"
    ChangeablePositionCategory:
      required:
        - description
      properties:
        description:
          type: string
          example: "Рабочие профессии"
    PositionCategoryToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeablePositionCategory"
    PositionCategoryToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeablePositionCategory"
    ChangeableApplicant:
      type: object
      description: "Претендент"
      required: [applicationCode]
      properties:
        applicationCode:
          type: string
          description: "Идентификатор претендента"
          example: "887769"
        employeeID:
          type: string
          format: uuid
          example: "454a69d8-b35a-4b0d-ab4e-8f9aaac878dd"
        considerationStart:
          type: string
          format: date
          description: "Дата приема претендента на рассмотрение"
          example: "2014-10-13"
        considerationEnd:
          type: string
          format: date
          description: "Дата окончания рассмотрения претендента"
          example: "2014-10-16"
        staffUnitID:
          type: string
          format: uuid
          example: "1a312211-1a95-4fd9-8b74-a06e4afb24b3"
    Applicant:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableApplicant"
    ApplicantToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableApplicant"
    ApplicantToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableApplicant"
    CalendarDayType:
      type: string
      enum: [workday, pre-holiday, holiday]

    ChangeableBank:
      type: object
      description: "Информация о банке"
      required: [branchBIC, bankBIC, bankName, branchName, country]
      properties:
        branchBIC:
          type: string
          description: "БИК филиала банка"
          example: "047195000"
        branchName:
          type: string
          description: "Наименование филиала банка"
          example: "РКЦ НОВЫЙ УРЕНГОЙ"
        bankBIC:
          type: string
          description: "БИК головного банка"
          example: "000000001"
        bankName:
          type: string
          description: "Наименование головного банка"
          example: "БАНК РОССИИ"
        country:
          type: string
          description: "Страна банка"
          example: "RU"
        correspondentAccount:
          type: string
          description:  "корреспондентский счет банка"
          example:      "30101810400000000225"
    Bank:
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableBank"
    BankToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableBank"
    BankToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableBank"

    EarningPolicy:
      description: "Объект для режима оплаты"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableEarningPolicy"
    ChangeableEarningPolicy:
      description: "Изменяемые параметры объекта режима оплаты"
      type: object
      required: [title, unitID]
      properties:
        title:
          type: string
          description: "Наименование режима оплаты"
          example: "СТВ Пятидневная рабочая неделя - Забайкальский край"
        unitID:
          type: string
          description: "Идентификатор организации"
          example: "6ddb0ba0-7195-4328-8a6c-becec49d2658"
    EarningPolicyToCreate:
      description: "Данные для создания режима оплаты"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableEarningPolicy"
    EarningPolicyToUpdate:
      description: "Данные для обновления режима оплаты"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableEarningPolicy"

    PayType:
      description: "Объект для типа оплаты"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeablePayType"
    ChangeablePayType:
      description: "Изменяемые параметры объекта типа оплаты"
      type: object
      required: [title, lastUpdateDate]
      properties:
        title:
          type: string
          description: "Наименование типа оплаты"
          example: "Ученический договор"
        lastUpdateDate:
          type: string
          format: date-time
          description: "Дата последнего обновления типа оплаты"
          example: "2022-03-30T10:53:49.631608Z"
    PayTypeToCreate:
      description: "Данные для создания типа оплаты"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeablePayType"
    PayTypeToUpdate:
      description: "Данные для обновления типа оплаты"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeablePayType"

    ChangeableVacationPeriod:
      type: object
      required: [periods, assignmentID, absenceID]
      properties:
        assignmentID:
          $ref: "#/components/schemas/UUID"
        absenceID:
          $ref: "#/components/schemas/UUID"
        periods:
          type: array
          items:
            $ref: "#/components/schemas/LegalVacationPeriod"

    LegalVacationPeriod:
      required: [startDate, endDate, daysSpent]
      properties:
        startDate:
          type: string
          format: date
          description: "дата начала отчетного периода"
          example: "2018-11-29"
        endDate:
          type: string
          format: date
          description: "дата окончания отчетного периода"
          example: "2018-12-10"
        daysSpent:
          description: "дней списано на данный период"
          type: integer
          example: 30

    VacationPeriodToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableVacationPeriod"

    VacationPeriod:
      description: "информация о периоде списания отпускных дней"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableVacationPeriod"
        - type: object
          properties:
            employeeID:
              $ref: "#/components/schemas/UUID"

    VacationPeriodToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableVacationPeriod"

    ChangeableVacationBalance:
      type: object
      required: [assignmentID, absenceTypeID, remainingDays, year]
      properties:
        assignmentID:
          $ref: "#/components/schemas/UUID"
        absenceTypeID:
          description: "идентификатор типа отсутствия"
          type: string
          example: "f1cdccc5-01bb-4c20-8473-b9a9df71bb8c"
        remainingDays:
          description: "количество оставшихся дней отпуска данного типа в году"
          type: number
          example: 1.47
        year:
          description: "год расчета отпускных дней"
          type: integer
          example: 2021

    VacationBalanceToUpdate:
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableVacationBalance"

    VacationBalance:
      description: "информация об остатке отпусков на период"
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableVacationBalance"
        - type: object
          properties:
            employeeID:
              $ref: "#/components/schemas/UUID"

    VacationBalanceToCreate:
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableVacationBalance"

    DisabilityCategory:
      description: "Категория нетрудоспособности"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableDisabilityCategory"
    ChangeableDisabilityCategory:
      description: "Параметры категории нетрудоспособности"
      type: object
      required: [code, title]
      properties:
        code:
          type: string
          description: "Код категории нетрудоспособности"
          example: "GROUP_II"
        title:
          type: string
          description: "Наименование категории нетрудоспособности"
          example: "Инвалид II группы"
    DisabilityCategoryToCreate:
      description: "Данные для создания категории нетрудоспособности"
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableDisabilityCategory"
    DisabilityCategoryToUpdate:
      description: "Данные для обновления категории нетрудоспособности"
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableDisabilityCategory"

    PersonEducation:
      description: "Данные об образовании физ. лица"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeablePersonEducation"
    PersonEducationToCreate:
      description: "Данные для создания образования сотрудника"
      type: object
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeablePersonEducation"
    PersonEducationToUpdate:
      description: "Данные для обновления образования сотрудника"
      type: object
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeablePersonEducation"
    ChangeablePersonEducation:
      description: "Изменяемые параметры данных об образовании сотрудника"
      type: object
      required: [personID]
      properties:
        personID:
          type: string
          format: uuid
          description: "id физ лица"
          example: "e29a11e5-836f-4c4b-8ed4-568e183bf1af"
        startDate:
          type: string
          format: date
          description: "дата начала обучения"
          example: "1998-09-01"
        endDate:
          type: string
          format: date
          description: "дата окончания обучения"
          example: "2003-06-23"
        university:
          type: string
          description: "учебное заведение"
          example: "Московский Технологический Институт Легкой промышленности"
        speciality:
          type: string
          description: "описание специальности"
          example: "инженер химик-технолог"
        type:
          type: string
          description: "Тип образования"
          example: "Высшее профессиональное"
        form:
          type: string
          description: "Форма получения образования"
          example: "Очное"
        docType:
          type: string
          description: "Тип документа"
          example: "Диплом"
        docSeries:
          type: string
          description: "Серия документа"
          example: "107718"
        docNum:
          type: string
          description: "Номер документа"
          example:  "0725890"
        docDate:
          type: string
          format: date
          description: "Дата выдачи диплома/сертификата"
          example: "2003-06-23"
        qualification:
          type: string
          description: "Квалификация"
          example: "бакалавр"
        okso:
          type: string
          description: "ОКСО"
          example: "Радиовещание и телевидение"
    DGPHDonor:
      description: "Источник финансирования ДГПХ"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableDGPHDonor"
    DGPHDonorToCreate:
      description: "Создание источника финансирования ДГПХ"
      type: object
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableDGPHDonor"
    DGPHDonorToUpdate:
      description: "Обновление источника финансирования ДГПХ"
      type: object
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableDGPHDonor"
    ChangeableDGPHDonor:
      description: "Изменяемые параметры данных об источнике финансирования ДГПХ"
      type: object
      required: [personID, assignmentID, staffUnitID, donors]
      properties:
        personID:
          type: string
          format: uuid
        assignmentID:
          type: string
          format: uuid
        staffUnitID:
          type: string
          format: uuid
        activity:
          $ref: "#/components/schemas/Activity"
        maxSum:
          type: string
          description: "максимальная сумма ДГПХ"
        paymentPeriod:
          type: string
          description: "период выплат"
        role:
          type: string
          description: "роль ДГПХ сотрудника"
        type:
          type: string
          description: "тип ДГПХ"
        donors:
          description: "доноры бюджета ДГПХ"
          type: array
          items:
            $ref: "#/components/schemas/DGPHBudgetDonor"
    DGPHBudgetDonor:
      description: "донор ДГПХ"
      type: object
      required: [staffUnitID]
      properties:
        staffUnitID:
          type: string
          format: uuid
          description: "идентификатор ШЕ донора"
        budget:
          type: string
          description: "объем передаваемого бюджета с ШЕ донора"

    Task:
      description: "Асинхронная задача"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - type: object
          required: ["state"]
          properties:
            state:
              description: "Состояние выполнения задачи"
              type: string
              enum:
                - Created
                - InProgress
                - Complete
            status:
              description: "Результат выполнения задачи. Доступно только в Complete состоянии"
              type: string
              enum:
                - Success
                - Error
            message:
              type: string
              description: |
                Дополнительная информация в произвольном виде.
                Стоит использовать для дебага, передается напрямую от ERP.
    HourlyRate:
      description: "Данные о часовой тарифной ставке"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableHourlyRate"
    HourlyRateToCreate:
      description: "Данные для создания часовой тарифной ставки должности"
      type: object
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableHourlyRate"
    HourlyRateToUpdate:
      description: "Данные для обновления часовой тарифной ставки должности"
      type: object
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableHourlyRate"
    ChangeableHourlyRate:
      description: "Изменяемые параметры данных о часовой тарифной ставки должности"
      type: object
      required: [unitID, positionID, payRate]
      properties:
        positionID:
          type: string
          format: uuid
          description: "идентификатор должности"
          example: "e29a11e5-836f-4c4b-8ed4-568e183bf1af"
        unitID:
          $ref: "#/components/schemas/UUID"
        payRate:
          type: number
          description: "размер оплаты"
          example: 16.65
        activity:
          $ref: "#/components/schemas/Activity"
        countryCode:
          type: string
          description: "Код страны"
          example: "RU"
        countryName:
          type: string
          description: "Название страны"
          example: "Российская Федерация"
        regionCode:
          type: string
          description: "Код региона"
          example: "3800000000000"
        regionName:
          type: string
          description: "Название региона"
          example: "Иркутская обл"
        areaCode:
          type: string
          description: "Код области"
          example: "5003000000000"
        areaName:
          type: string
          description: "Название области"
          example: "Московская обл"
        cityCode:
          type: string
          description: "Код города"
          example: "1100000700000"
        cityName:
          type: string
          description: "Название города"
          example: "Усинск"
        settlementCode:
          type: string
          description: "Код населенного пункта"
          example: "6300000104300"
        settlementName:
          type: string
          description: "Название населенного пункта"
          example: "Красный Пахарь пгт"
    DistWork:
      description: "Данные о дистанционной работе"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableDistWork"
    DistWorkToCreate:
      description: "Данные для создания информации о дистанционной работе"
      type: object
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableDistWork"
    DistWorkToUpdate:
      description: "Данные для обновления информации о дистанционной работе"
      type: object
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableDistWork"
    ChangeableDistWork:
      description: "Изменяемые параметры данных о дистанционной работе"
      type: object
      required: [assignmentID, personID]
      properties:
        personID:
          $ref: "#/components/schemas/UUID"
        assignmentID:
          $ref: "#/components/schemas/UUID"
        number:
          type: string
          description: "номер "
          example: "ДР-2"
        date:
          type: string
          format: date
          description: "дата "
          example: "2021-09-24"
        timeSchedule:
          type: string
          description: "график работы"
          example: "смешанный"
        typeDistWork:
          type: string
          description: "тип труда"
          example: "дистанционный"
        dayDist:
          type: string
          description: "количество дней в неделю дист. труда"
          example: "1"
        location:
          type: string
          description: "расположение"
          example: "1129048"
        activity:
          $ref: "#/components/schemas/Activity"
    TaskStatusRespBody:
      description: "Статус задачи"
      type: object
      required: [id, state, created_at]
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        status:
          type: string
          enum:
            - success
            - error
          description: "статус задачи"
          example: "success"
        state:
          type: string
          enum:
            - created
            - inProgress
            - complete
          description: "состояние задачи"
          example: "inProgress"
        created_at:
          type: string
          format: date-time
          description: "дата и время создания статуса задачи"
          example: "2020-09-24T15:00:00+03:00"
        message:
          type: string
          description: "произвольное сообщение"
        events:
          type: array
          description: "события произошедшие в процессе выполнения задачи"
          items:
            $ref: "#/components/schemas/Event"
    ProductEntity:
      description: "Данные о продуктовых структурах"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableProductEntity"
    ProductEntityToCreate:
      description: "Данные о продуктовых структурах"
      type: object
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableProductEntity"
    ProductEntityToUpdate:
      description: "Данные о продуктовых структурах"
      type: object
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableProductEntity"
    ChangeableProductEntity:
      description: "Изменяемые параметры данных о продуктовых структурах"
      type: object
      required: [name, type]
      properties:
        name:
          type: string
          format: uuid
          description: "Наименование стрима"
          example: "Бизнес платформа IoT"
        type:
          type: string
          enum:
            - Stream
            - Team
            - Product
          description: "Тип продуктовой структуры"
          example: "Stream"
        attributes:
          type: object
          description: "Дополнительные атрибуты (для каждого типа продуктовой структуры свои)"



    ProductStatus:
      description: "Данные о статусах продукта"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableProductStatuses"
    ProductStatusToCreate:
      description: "Данные о статусах продукта"
      type: object
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableProductStatuses"
    ProductStatusToUpdate:
      description: "Данные о статусах продукта"
      type: object
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableProductStatuses"
    ChangeableProductStatuses:
      description: "Изменяемые параметры данных о статусах продукта"
      type: object
      required: [name]
      properties:
        name:
          type: string
          format: uuid
          description: "Наименование стрима"
          example: "Бизнес платформа IoT"

    ProductEntityLink:
      description: "Данные о иерархии продуктовых структур"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicObject"
        - $ref: "#/components/schemas/ChangeableProductEntityLink"
    ProductEntityLinkToCreate:
      description: "Данные о иерархии продуктовых структур"
      type: object
      allOf:
        - $ref: "#/components/schemas/OperationIdentifier"
        - $ref: "#/components/schemas/ChangeableProductEntityLink"
    ProductEntityLinkToUpdate:
      description: "Данные о иерархии продуктовых структур"
      type: object
      allOf:
        - $ref: "#/components/schemas/Identifier"
        - $ref: "#/components/schemas/ChangeableProductEntityLink"
    ChangeableProductEntityLink:
      description: "Изменяемые параметры о иерархии продуктовых структур"
      type: object
      required: [parentID, childID]
      properties:
        parentID:
          description: "Идентификатор продуктовой структуры родителя"
          type: string
          format: uuid
          example: "170d1bde-e77f-47c3-b238-b2c87b1aadf6"
        childID:
          description: "Идентификатор продуктовой структуры ребенка"
          type: string
          format: uuid
          example: "475d1bde-e77f-47c3-b238-b2c87b1aadf6"

    OrganizationStructure:
      description: "Данные всех детей переданных подразделение в выбранной иерархии"
      type: object
      required: [unitData]
      properties:
        children:
          type: array
          items:
            $ref: "#/components/schemas/OrganizationStructure"
        unitData:
          $ref: "#/components/schemas/UnitWithoutRequiredBasicObject"
    UnitWithoutRequiredBasicObject:
      description: "организационная единица - подразделение/отдел/организация"
      allOf:
        - $ref: "#/components/schemas/BasicObjectWithoutRequiredCreatedAtUpdatedAt"
        - $ref: "#/components/schemas/ChangeableUnit"
    BasicObjectWithoutRequiredCreatedAtUpdatedAt:
      type: object
      description: "Стандартный набор полей, генерящихся в сервисе для каждой сущности без обязательных createdAt, updatedAt"
      required: [ id ]
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        createdAt:
          type: string
          format: date-time
          description: "Дата создания объекта"
          example: "2021-11-12T15:38:55.965248Z"
        updatedAt:
          type: string
          format: date-time
          description: "Дата изменения объекта"
          example: "2022-03-30T10:53:49.631608Z"
        deletedAt:
          type: string
          format: date-time
          description: "Дата удаления объекта"
          example: "2022-03-30T10:53:49.631608Z"

    OrganizationStructureRequiredFiledEnum:
      description: "Данные всех детей переданных подразделение в выбранной иерархии"
      type: string
      enum:
        - createdAt
        - deletedAt
        - updatedAt
        - title
        - activeTo
        - productID
        - costCenterID
        - balanceUnitID
        - isVisible
        - clusterID
        - unitTypeID
        - altDescription
        - functionalBlockID
        - locationID
        - organizationID
        - description
        - shortName
        - calendarID
        - virtualBalanceUnitID
        - budmanID
        - orgCode
        - supervisorID
        - activeFrom
    ComplexAssignmentRequiredEntities:
      description: "Перечисление возможных сущностей, которые могут вернуться в ответе.
       При указании person вернется и employee"
      type: string
      enum:
        - staffUnit
        - employee
        - person
        - distWork


  responses:
    SuccessResponse:
      description: "Успешный ответ"
      content:
        application/json:
          schema:
            required:
              - message
            properties:
              message:
                type: string
                description: "Сообщение"
                example: "Успешное выполнение запроса"
    DefaultErrResponse:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
    CreatedItemResponse:
      description: "Созданный id"
      headers:
        event-id:
          $ref: "#/components/headers/EventID"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/CreatedItem"
    MultipleCreatedItemResp:
      description: "Сущности созданы"
      content:
        "application/json":
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CreatedItem"
    MultipleBatchCreatedItemResp:
      description: "Сущности созданы"
      content:
        "application/json":
          schema:
            type: array
            items:
              $ref: "#/components/schemas/BatchCreatedItem"
    MultipleBatchUpdatedItemResp:
      description: "ID обновленных сущностей"
      content:
        "application/json":
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CreatedItem"

  headers:
    EventID:
      schema:
        type: string
        format: uuid
        description: "id события об изменении данных"
        example: "7f46122a-732a-44be-b6d4-d5614556e7c6"
    Total:
      schema:
        type: integer
        description: "общее количество доступных записей с указанными параметрами запроса"
        example: "1042167"
    Limit:
      schema:
        type: integer
        description: "Ограничение по количеству записей данного запроса"
        example: "1000"
    Offset:
      schema:
        type: integer
        description: "Отступ по количеству записей для данного запроса"
        example: "0"

  requestBodies:
    EmployeeTypeReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/EmployeeType"
              - $ref: "#/components/schemas/TaskID"
    ContractStatusReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ContractStatus"
              - $ref: "#/components/schemas/TaskID"
    ContractTypeReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ContractType"
              - $ref: "#/components/schemas/TaskID"
    AssignmentStatusReqBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AssignmentStatus"
    AssignmentTypeReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/AssignmentType"
              - $ref: "#/components/schemas/TaskID"
    AssignmentCategoryReqBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AssignmentCategory"
    BalanceUnitReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BalanceUnit"
              - $ref: "#/components/schemas/TaskID"

    HierarchyReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ChangeableHierarchy"
              - $ref: "#/components/schemas/TaskID"
    HierarchyLinkReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ChangeableHierarchyLink"
              - $ref: "#/components/schemas/TaskID"
    PositionReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Position"
              - $ref: "#/components/schemas/TaskID"
    GradeReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Grade"
              - $ref: "#/components/schemas/TaskID"
    UnitTypeReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/UnitType"
              - $ref: "#/components/schemas/TaskID"
    OrganizationReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Organization"
              - $ref: "#/components/schemas/TaskID"
    CostCenterReqBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/CostCenter"
              - $ref: "#/components/schemas/TaskID"