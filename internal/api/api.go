// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// Defines values for EriusFuncBlockType.
const (
	EriusFuncBlockTypeGo EriusFuncBlockType = "go"

	EriusFuncBlockTypeInternal EriusFuncBlockType = "internal"

	EriusFuncBlockTypePython3 EriusFuncBlockType = "python3"

	EriusFuncBlockTypeScenario EriusFuncBlockType = "scenario"

	EriusFuncBlockTypeTerm EriusFuncBlockType = "term"
)

// Defines values for FunctionParamsType.
const (
	FunctionParamsTypeApprover FunctionParamsType = "approver"

	FunctionParamsTypeConditions FunctionParamsType = "conditions"

	FunctionParamsTypeServicedeskApplication FunctionParamsType = "servicedesk_application"
)

// Defines values for TaskUpdateAction.
const (
	TaskUpdateActionApprovement TaskUpdateAction = "approvement"
)

// AllUsageResponse defines model for AllUsageResponse.
type AllUsageResponse struct {
	Pipelines *AllUsageResponse_Pipelines `json:"pipelines,omitempty"`
}

// AllUsageResponse_Pipelines defines model for AllUsageResponse.Pipelines.
type AllUsageResponse_Pipelines struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// CountTasks defines model for CountTasks.
type CountTasks struct {
	Active  *int `json:"active,omitempty"`
	Approve *int `json:"approve,omitempty"`
	Execute *int `json:"execute,omitempty"`
}

// CreateTaskRequest defines model for CreateTaskRequest.
type CreateTaskRequest struct {
	Parameters map[string]interface{} `json:"parameters"`
	VersionId  string                 `json:"version_id"`
}

// Created defines model for Created.
type Created struct {
	End   *int `json:"end,omitempty"`
	Start *int `json:"start,omitempty"`
}

// DebugResult defines model for DebugResult.
type DebugResult struct {
	BlockName   *string   `json:"block_name,omitempty"`
	BreakPoints *[]string `json:"break_points,omitempty"`

	// todo define values
	Status *string    `json:"status,omitempty"`
	Task   *EriusTask `json:"task,omitempty"`
}

// DebugRunRequest defines model for DebugRunRequest.
type DebugRunRequest struct {
	Action      string   `json:"action"`
	BreakPoints []string `json:"break_points"`
	WorkNumber  string   `json:"work_number"`
}

// EriusFunc defines model for EriusFunc.
type EriusFunc struct {
	BlockType  *EriusFuncBlockType     `json:"block_type,omitempty"`
	Input      *[]EriusFunctionValue   `json:"input,omitempty"`
	Next       *EriusFunc_Next         `json:"next,omitempty"`
	Output     *[]EriusFunctionValue   `json:"output,omitempty"`
	ParamType  *string                 `json:"param_type,omitempty"`
	Params     *map[string]interface{} `json:"params,omitempty"`
	ShortTitle *string                 `json:"short_title,omitempty"`
	Title      *string                 `json:"title,omitempty"`
	True       *int                    `json:"true,omitempty"`
	TypeId     *string                 `json:"type_id,omitempty"`
	X          *int                    `json:"x,omitempty"`
}

// EriusFuncBlockType defines model for EriusFunc.BlockType.
type EriusFuncBlockType string

// EriusFunc_Next defines model for EriusFunc.Next.
type EriusFunc_Next struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// EriusFunctionList defines model for EriusFunctionList.
type EriusFunctionList struct {
	Funcs  *[]FunctionModel `json:"funcs,omitempty"`
	Shapes *[]ShapeEntity   `json:"shapes,omitempty"`
}

// EriusFunctionValue defines model for EriusFunctionValue.
type EriusFunctionValue struct {
	Global *string `json:"global,omitempty"`
	Name   *string `json:"name,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// EriusScenario defines model for EriusScenario.
type EriusScenario struct {
	ApprovedAt      *string               `json:"approved_at,omitempty"`
	Author          *string               `json:"author,omitempty"`
	Comment         *string               `json:"comment,omitempty"`
	CommentRejected *string               `json:"comment_rejected,omitempty"`
	CreatedAt       *string               `json:"created_at,omitempty"`
	HasDraft        *bool                 `json:"hasDraft,omitempty"`
	Id              *string               `json:"id,omitempty"`
	Input           *[]EriusFunctionValue `json:"input,omitempty"`
	Name            *string               `json:"name,omitempty"`
	Output          *[]EriusFunctionValue `json:"output,omitempty"`
	Pipeline        *struct {
		Blocks     *EriusScenario_Pipeline_Blocks `json:"blocks,omitempty"`
		Entrypoint *string                        `json:"entrypoint,omitempty"`
	} `json:"pipeline,omitempty"`

	// 1 - Draft, 2 - Approved, 3 - Deleted, 4 - Rejected, 5 - On Approve
	Status    *int            `json:"status,omitempty"`
	Tags      *[]EriusTagInfo `json:"tags,omitempty"`
	VersionId *string         `json:"version_id,omitempty"`
}

// EriusScenario_Pipeline_Blocks defines model for EriusScenario.Pipeline.Blocks.
type EriusScenario_Pipeline_Blocks struct {
	AdditionalProperties map[string]EriusFunc `json:"-"`
}

// EriusScenarioInfo defines model for EriusScenarioInfo.
type EriusScenarioInfo struct {
	ApprovedAt      *string `json:"approved_at,omitempty"`
	Approver        *string `json:"approver,omitempty"`
	Author          *string `json:"author,omitempty"`
	Comment         *string `json:"comment,omitempty"`
	CommentRejected *string `json:"comment_rejected,omitempty"`
	CreatedAt       *string `json:"created_at,omitempty"`
	Id              *string `json:"id,omitempty"`
	LastRun         *string `json:"last_run,omitempty"`
	LastRunStatus   *string `json:"last_run_status,omitempty"`
	Name            *string `json:"name,omitempty"`

	// 1 - Draft, 2 - Approved, 3 - Deleted, 4 - Rejected, 5 - On Approve
	Status         *int                `json:"status,omitempty"`
	Tags           *[]EriusTagInfo     `json:"tags,omitempty"`
	VersionHistory *[]EriusVersionInfo `json:"version_history,omitempty"`
	VersionId      *string             `json:"version_id,omitempty"`
}

// EriusScenarioList defines model for EriusScenarioList.
type EriusScenarioList struct {
	// Черновики
	Drafts *[]EriusScenarioInfo `json:"drafts,omitempty"`

	// Сценарии на одобрении
	OnApprove *[]EriusScenarioInfo `json:"on_approve,omitempty"`

	// Согласованные сценарии
	Pipelines *[]EriusScenarioInfo `json:"pipelines,omitempty"`

	// Теги
	Tags *[]EriusTagInfo `json:"tags,omitempty"`
}

// EriusTagInfo defines model for EriusTagInfo.
type EriusTagInfo struct {
	Color    *string `json:"color,omitempty"`
	Id       *string `json:"id,omitempty"`
	IsMarker *bool   `json:"isMarker,omitempty"`
	Name     *string `json:"name,omitempty"`

	// 1 - Created, 3 - Deleted
	Status *int `json:"status,omitempty"`
}

// EriusTask defines model for EriusTask.
type EriusTask struct {
	Author        *string                 `json:"author,omitempty"`
	BlueprintId   *string                 `json:"blueprint_id,omitempty"`
	Debug         *bool                   `json:"debug,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	HumanStatus   *string                 `json:"human_status,omitempty"`
	Id            *string                 `json:"id,omitempty"`
	LastChangedAt *string                 `json:"last_changed_at,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Parameters    *map[string]interface{} `json:"parameters,omitempty"`
	StartedAt     *string                 `json:"started_at,omitempty"`
	Status        *string                 `json:"status,omitempty"`
	Steps         *[]Step                 `json:"steps,omitempty"`
	VersionId     *string                 `json:"version_id,omitempty"`
	WorkNumber    *string                 `json:"work_number,omitempty"`
}

// EriusTasks defines model for EriusTasks.
type EriusTasks struct {
	Tasks *[]EriusTask `json:"tasks,omitempty"`
}

// EriusTasksPage defines model for EriusTasksPage.
type EriusTasksPage struct {
	Tasks *[]EriusTask `json:"tasks,omitempty"`
	Total *int         `json:"total,omitempty"`
}

// EriusVersionInfo defines model for EriusVersionInfo.
type EriusVersionInfo struct {
	ApprovedAt *string `json:"approved_at,omitempty"`
	Approver   *string `json:"approver,omitempty"`
	Author     *string `json:"author,omitempty"`
	CreatedAt  *string `json:"created_at,omitempty"`
	VersionId  *string `json:"version_id,omitempty"`
}

// FunctionModel defines model for FunctionModel.
type FunctionModel struct {
	BlockType *string               `json:"block_type,omitempty"`
	Id        *string               `json:"id,omitempty"`
	Inputs    *[]FunctionValueModel `json:"inputs,omitempty"`
	Outputs   *[]FunctionValueModel `json:"outputs,omitempty"`
	Params    *FunctionParams       `json:"params,omitempty"`
	ShapeType *int                  `json:"shape_type,omitempty"`
	Sockets   *[]string             `json:"sockets,omitempty"`
	Title     *string               `json:"title,omitempty"`
}

// FunctionParams defines model for FunctionParams.
type FunctionParams struct {
	Params *map[string]interface{} `json:"params,omitempty"`
	Type   *FunctionParamsType     `json:"type,omitempty"`
}

// FunctionParamsType defines model for FunctionParams.Type.
type FunctionParamsType string

// FunctionValueModel defines model for FunctionValueModel.
type FunctionValueModel struct {
	Comment *string `json:"comment,omitempty"`
	Name    *string `json:"name,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// RunNewVersionByPrevVersionRequest defines model for RunNewVersionByPrevVersionRequest.
type RunNewVersionByPrevVersionRequest struct {
	ApplicationBody map[string]interface{} `json:"application_body"`
	BlueprintId     string                 `json:"blueprint_id"`
	Description     string                 `json:"description"`
	WorkNumber      string                 `json:"work_number"`
}

// RunPipelineBody defines model for RunPipelineBody.
type RunPipelineBody map[string]interface{}

// RunResponse defines model for RunResponse.
type RunResponse struct {
	Errors     *[]string               `json:"errors,omitempty"`
	Output     *map[string]interface{} `json:"output,omitempty"`
	PipelineId *string                 `json:"pipeline_id,omitempty"`
	Status     *string                 `json:"status,omitempty"`
	WorkNumber *string                 `json:"work_number,omitempty"`
}

// RunVersionBody defines model for RunVersionBody.
type RunVersionBody map[string]interface{}

// RunVersionsByBlueprintIdRequest defines model for RunVersionsByBlueprintIdRequest.
type RunVersionsByBlueprintIdRequest struct {
	ApplicationBody map[string]interface{} `json:"application_body"`
	BlueprintId     string                 `json:"blueprint_id"`
	Description     string                 `json:"description"`
}

// SchedulerTasksResponse defines model for SchedulerTasksResponse.
type SchedulerTasksResponse struct {
	Result *bool `json:"result,omitempty"`
}

// ShapeEntity defines model for ShapeEntity.
type ShapeEntity struct {
	Icon  *string `json:"icon,omitempty"`
	Id    *int    `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
}

// Step defines model for Step.
type Step struct {
	Errors   *[]string               `json:"errors,omitempty"`
	HasError *bool                   `json:"has_error,omitempty"`
	Name     *string                 `json:"name,omitempty"`
	State    *map[string]interface{} `json:"state,omitempty"`
	Status   *string                 `json:"status,omitempty"`
	Steps    *[]string               `json:"steps,omitempty"`
	Storage  *map[string]interface{} `json:"storage,omitempty"`
	Time     *string                 `json:"time,omitempty"`
	Type     *string                 `json:"type,omitempty"`
}

// TaskUpdate defines model for TaskUpdate.
type TaskUpdate struct {
	Action     *TaskUpdateAction       `json:"action,omitempty"`
	Parameters *map[string]interface{} `json:"parameters,omitempty"`
}

// TaskUpdateAction defines model for TaskUpdate.Action.
type TaskUpdateAction string

// UsageResponse defines model for UsageResponse.
type UsageResponse struct {
	// Имя блока
	Name      *string   `json:"name,omitempty"`
	Pipelines *[]UsedBy `json:"pipelines,omitempty"`
	Used      *bool     `json:"used,omitempty"`
}

// UsedBy defines model for UsedBy.
type UsedBy struct {
	// ID сценария
	Id *string `json:"id,omitempty"`

	// Имя сценария
	Name *string `json:"name,omitempty"`
}

// EriusTaskResponse defines model for eriusTaskResponse.
type EriusTaskResponse struct {
	Author        *string                 `json:"author,omitempty"`
	BlueprintId   *string                 `json:"blueprint_id,omitempty"`
	Debug         *bool                   `json:"debug,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	HumanStatus   *string                 `json:"human_status,omitempty"`
	Id            *string                 `json:"id,omitempty"`
	LastChangedAt *string                 `json:"last_changed_at,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Parameters    *map[string]interface{} `json:"parameters,omitempty"`
	StartedAt     *string                 `json:"started_at,omitempty"`
	Status        *string                 `json:"status,omitempty"`
	Steps         *[]Step                 `json:"steps,omitempty"`
	VersionId     *string                 `json:"version_id,omitempty"`
	WorkNumber    *string                 `json:"work_number,omitempty"`
}

// HttpError defines model for httpError.
type HttpError struct {
	Description *string `json:"description,omitempty"`
	Error       *string `json:"error,omitempty"`
	StatusCode  *int    `json:"status_code,omitempty"`
}

// HttpResponse defines model for httpResponse.
type HttpResponse struct {
	Data       *map[string]interface{} `json:"data,omitempty"`
	StatusCode *int                    `json:"status_code,omitempty"`
}

// CreateDebugTaskJSONBody defines parameters for CreateDebugTask.
type CreateDebugTaskJSONBody CreateTaskRequest

// StartDebugTaskJSONBody defines parameters for StartDebugTask.
type StartDebugTaskJSONBody DebugRunRequest

// CreatePipelineJSONBody defines parameters for CreatePipeline.
type CreatePipelineJSONBody EriusScenario

// EditVersionJSONBody defines parameters for EditVersion.
type EditVersionJSONBody EriusScenario

// CreatePipelineVersionJSONBody defines parameters for CreatePipelineVersion.
type CreatePipelineVersionJSONBody EriusScenario

// RunNewVersionByPrevVersionJSONBody defines parameters for RunNewVersionByPrevVersion.
type RunNewVersionByPrevVersionJSONBody RunNewVersionByPrevVersionRequest

// RunVersionJSONBody defines parameters for RunVersion.
type RunVersionJSONBody RunVersionBody

// RunVersionsByBlueprintIdJSONBody defines parameters for RunVersionsByBlueprintId.
type RunVersionsByBlueprintIdJSONBody RunVersionsByBlueprintIdRequest

// RunPipelineJSONBody defines parameters for RunPipeline.
type RunPipelineJSONBody RunPipelineBody

// CreateTagJSONBody defines parameters for CreateTag.
type CreateTagJSONBody EriusTagInfo

// EditTagJSONBody defines parameters for EditTag.
type EditTagJSONBody EriusTagInfo

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	// Pipeline name
	Name *string `json:"name,omitempty"`

	// Task IDs
	TaskIDs *[]string `json:"taskIDs,omitempty"`

	// Order
	Order *string `json:"order,omitempty"`

	// Limit
	Limit *int `json:"limit,omitempty"`

	// Offset
	Offset   *int     `json:"offset,omitempty"`
	Created  *Created `json:"created,omitempty"`
	Archived *bool    `json:"archived,omitempty"`
	SelectAs *string  `json:"selectAs,omitempty"`
}

// UpdateTaskJSONBody defines parameters for UpdateTask.
type UpdateTaskJSONBody TaskUpdate

// CreateDebugTaskJSONRequestBody defines body for CreateDebugTask for application/json ContentType.
type CreateDebugTaskJSONRequestBody CreateDebugTaskJSONBody

// StartDebugTaskJSONRequestBody defines body for StartDebugTask for application/json ContentType.
type StartDebugTaskJSONRequestBody StartDebugTaskJSONBody

// CreatePipelineJSONRequestBody defines body for CreatePipeline for application/json ContentType.
type CreatePipelineJSONRequestBody CreatePipelineJSONBody

// EditVersionJSONRequestBody defines body for EditVersion for application/json ContentType.
type EditVersionJSONRequestBody EditVersionJSONBody

// CreatePipelineVersionJSONRequestBody defines body for CreatePipelineVersion for application/json ContentType.
type CreatePipelineVersionJSONRequestBody CreatePipelineVersionJSONBody

// RunNewVersionByPrevVersionJSONRequestBody defines body for RunNewVersionByPrevVersion for application/json ContentType.
type RunNewVersionByPrevVersionJSONRequestBody RunNewVersionByPrevVersionJSONBody

// RunVersionJSONRequestBody defines body for RunVersion for application/json ContentType.
type RunVersionJSONRequestBody RunVersionJSONBody

// RunVersionsByBlueprintIdJSONRequestBody defines body for RunVersionsByBlueprintId for application/json ContentType.
type RunVersionsByBlueprintIdJSONRequestBody RunVersionsByBlueprintIdJSONBody

// RunPipelineJSONRequestBody defines body for RunPipeline for application/json ContentType.
type RunPipelineJSONRequestBody RunPipelineJSONBody

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody CreateTagJSONBody

// EditTagJSONRequestBody defines body for EditTag for application/json ContentType.
type EditTagJSONRequestBody EditTagJSONBody

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody UpdateTaskJSONBody

// Getter for additional properties for AllUsageResponse_Pipelines. Returns the specified
// element and whether it was found
func (a AllUsageResponse_Pipelines) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AllUsageResponse_Pipelines
func (a *AllUsageResponse_Pipelines) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AllUsageResponse_Pipelines to handle AdditionalProperties
func (a *AllUsageResponse_Pipelines) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AllUsageResponse_Pipelines to handle AdditionalProperties
func (a AllUsageResponse_Pipelines) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EriusFunc_Next. Returns the specified
// element and whether it was found
func (a EriusFunc_Next) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EriusFunc_Next
func (a *EriusFunc_Next) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EriusFunc_Next to handle AdditionalProperties
func (a *EriusFunc_Next) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EriusFunc_Next to handle AdditionalProperties
func (a EriusFunc_Next) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EriusScenario_Pipeline_Blocks. Returns the specified
// element and whether it was found
func (a EriusScenario_Pipeline_Blocks) Get(fieldName string) (value EriusFunc, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EriusScenario_Pipeline_Blocks
func (a *EriusScenario_Pipeline_Blocks) Set(fieldName string, value EriusFunc) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]EriusFunc)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EriusScenario_Pipeline_Blocks to handle AdditionalProperties
func (a *EriusScenario_Pipeline_Blocks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]EriusFunc)
		for fieldName, fieldBuf := range object {
			var fieldVal EriusFunc
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EriusScenario_Pipeline_Blocks to handle AdditionalProperties
func (a EriusScenario_Pipeline_Blocks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create debug task
	// (POST /debug/)
	CreateDebugTask(w http.ResponseWriter, r *http.Request)
	// Start debug task
	// (POST /debug/run)
	StartDebugTask(w http.ResponseWriter, r *http.Request)
	// Debug task
	// (GET /debug/{workNumber})
	DebugTask(w http.ResponseWriter, r *http.Request, workNumber string)
	// Get list of modules
	// (GET /modules)
	GetModules(w http.ResponseWriter, r *http.Request)
	// Get list of modules usage
	// (GET /modules/usage)
	AllModulesUsage(w http.ResponseWriter, r *http.Request)
	// Run Module By Name
	// (POST /modules/{moduleName})
	ModuleRun(w http.ResponseWriter, r *http.Request, moduleName string)
	// Usage of module in pipelines
	// (GET /modules/{moduleName}/usage)
	ModuleUsage(w http.ResponseWriter, r *http.Request, moduleName string)
	// Get list of pipelines
	// (GET /pipelines)
	ListPipelines(w http.ResponseWriter, r *http.Request)
	// Create pipeline
	// (POST /pipelines)
	CreatePipeline(w http.ResponseWriter, r *http.Request)
	// Edit Draft
	// (PUT /pipelines/version)
	EditVersion(w http.ResponseWriter, r *http.Request)
	// Delete Version
	// (DELETE /pipelines/version/{ID})
	DeleteVersion(w http.ResponseWriter, r *http.Request, iD string)
	// Get pipeline version
	// (GET /pipelines/version/{ID})
	GetPipelineVersion(w http.ResponseWriter, r *http.Request, iD string)
	// Create pipeline version
	// (POST /pipelines/version/{ID})
	CreatePipelineVersion(w http.ResponseWriter, r *http.Request, iD string)
	// Delete Pipeline
	// (DELETE /pipelines/{pipelineID})
	DeletePipeline(w http.ResponseWriter, r *http.Request, pipelineID string)
	// Get pipeline
	// (GET /pipelines/{pipelineID})
	GetPipeline(w http.ResponseWriter, r *http.Request, pipelineID string)
	// Active scheduler tasks
	// (POST /pipelines/{pipelineID}/scheduler-tasks)
	ListSchedulerTasks(w http.ResponseWriter, r *http.Request, pipelineID string)
	// Get Pipeline Tags
	// (GET /pipelines/{pipelineID}/tags)
	GetPipelineTags(w http.ResponseWriter, r *http.Request, pipelineID string)
	// Detach Tag
	// (DELETE /pipelines/{pipelineID}/tags/{ID})
	DetachTag(w http.ResponseWriter, r *http.Request, pipelineID string, iD string)
	// Attach Tag
	// (PUT /pipelines/{pipelineID}/tags/{ID})
	AttachTag(w http.ResponseWriter, r *http.Request, pipelineID string, iD string)
	// Run Version
	// (POST /run/version/new_version)
	RunNewVersionByPrevVersion(w http.ResponseWriter, r *http.Request)
	// Run Version
	// (POST /run/version/{versionID})
	RunVersion(w http.ResponseWriter, r *http.Request, versionID string)
	// Run Version By blueprintID
	// (POST /run/versions/blueprint_id)
	RunVersionsByBlueprintId(w http.ResponseWriter, r *http.Request)
	// Run Pipeline
	// (POST /run/{pipelineID})
	RunPipeline(w http.ResponseWriter, r *http.Request, pipelineID string)
	// Get Tags
	// (GET /tags)
	GetTags(w http.ResponseWriter, r *http.Request)
	// Create Tag
	// (POST /tags)
	CreateTag(w http.ResponseWriter, r *http.Request)
	// Edit Tag
	// (PUT /tags)
	EditTag(w http.ResponseWriter, r *http.Request)
	// Remove Tag
	// (DELETE /tags/{ID})
	RemoveTag(w http.ResponseWriter, r *http.Request, iD string)
	// Get Tasks
	// (GET /tasks)
	GetTasks(w http.ResponseWriter, r *http.Request, params GetTasksParams)
	// Get amount of tasks
	// (GET /tasks/count)
	GetTasksCount(w http.ResponseWriter, r *http.Request)
	// Get last debug task for version
	// (GET /tasks/last-by-version/{versionID})
	LastVersionDebugTask(w http.ResponseWriter, r *http.Request, versionID string)
	// Get Pipeline Tasks
	// (GET /tasks/pipeline/{pipelineID})
	GetPipelineTasks(w http.ResponseWriter, r *http.Request, pipelineID string)
	// Get Version Tasks
	// (GET /tasks/version/{versionID})
	GetVersionTasks(w http.ResponseWriter, r *http.Request, versionID string)
	// Get Task
	// (GET /tasks/{workNumber})
	GetTask(w http.ResponseWriter, r *http.Request, workNumber string)
	// Update Task
	// (POST /tasks/{workNumber})
	UpdateTask(w http.ResponseWriter, r *http.Request, workNumber string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateDebugTask operation middleware
func (siw *ServerInterfaceWrapper) CreateDebugTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDebugTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// StartDebugTask operation middleware
func (siw *ServerInterfaceWrapper) StartDebugTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StartDebugTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DebugTask operation middleware
func (siw *ServerInterfaceWrapper) DebugTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workNumber" -------------
	var workNumber string

	err = runtime.BindStyledParameter("simple", false, "workNumber", chi.URLParam(r, "workNumber"), &workNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workNumber", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DebugTask(w, r, workNumber)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetModules operation middleware
func (siw *ServerInterfaceWrapper) GetModules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModules(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AllModulesUsage operation middleware
func (siw *ServerInterfaceWrapper) AllModulesUsage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AllModulesUsage(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ModuleRun operation middleware
func (siw *ServerInterfaceWrapper) ModuleRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "moduleName" -------------
	var moduleName string

	err = runtime.BindStyledParameter("simple", false, "moduleName", chi.URLParam(r, "moduleName"), &moduleName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "moduleName", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModuleRun(w, r, moduleName)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ModuleUsage operation middleware
func (siw *ServerInterfaceWrapper) ModuleUsage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "moduleName" -------------
	var moduleName string

	err = runtime.BindStyledParameter("simple", false, "moduleName", chi.URLParam(r, "moduleName"), &moduleName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "moduleName", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModuleUsage(w, r, moduleName)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListPipelines operation middleware
func (siw *ServerInterfaceWrapper) ListPipelines(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPipelines(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePipeline operation middleware
func (siw *ServerInterfaceWrapper) CreatePipeline(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePipeline(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// EditVersion operation middleware
func (siw *ServerInterfaceWrapper) EditVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EditVersion(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ID" -------------
	var iD string

	err = runtime.BindStyledParameter("simple", false, "ID", chi.URLParam(r, "ID"), &iD)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteVersion(w, r, iD)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPipelineVersion operation middleware
func (siw *ServerInterfaceWrapper) GetPipelineVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ID" -------------
	var iD string

	err = runtime.BindStyledParameter("simple", false, "ID", chi.URLParam(r, "ID"), &iD)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPipelineVersion(w, r, iD)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePipelineVersion operation middleware
func (siw *ServerInterfaceWrapper) CreatePipelineVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ID" -------------
	var iD string

	err = runtime.BindStyledParameter("simple", false, "ID", chi.URLParam(r, "ID"), &iD)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePipelineVersion(w, r, iD)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeletePipeline operation middleware
func (siw *ServerInterfaceWrapper) DeletePipeline(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "pipelineID" -------------
	var pipelineID string

	err = runtime.BindStyledParameter("simple", false, "pipelineID", chi.URLParam(r, "pipelineID"), &pipelineID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pipelineID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePipeline(w, r, pipelineID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPipeline operation middleware
func (siw *ServerInterfaceWrapper) GetPipeline(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "pipelineID" -------------
	var pipelineID string

	err = runtime.BindStyledParameter("simple", false, "pipelineID", chi.URLParam(r, "pipelineID"), &pipelineID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pipelineID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPipeline(w, r, pipelineID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListSchedulerTasks operation middleware
func (siw *ServerInterfaceWrapper) ListSchedulerTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "pipelineID" -------------
	var pipelineID string

	err = runtime.BindStyledParameter("simple", false, "pipelineID", chi.URLParam(r, "pipelineID"), &pipelineID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pipelineID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSchedulerTasks(w, r, pipelineID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPipelineTags operation middleware
func (siw *ServerInterfaceWrapper) GetPipelineTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "pipelineID" -------------
	var pipelineID string

	err = runtime.BindStyledParameter("simple", false, "pipelineID", chi.URLParam(r, "pipelineID"), &pipelineID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pipelineID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPipelineTags(w, r, pipelineID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DetachTag operation middleware
func (siw *ServerInterfaceWrapper) DetachTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "pipelineID" -------------
	var pipelineID string

	err = runtime.BindStyledParameter("simple", false, "pipelineID", chi.URLParam(r, "pipelineID"), &pipelineID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pipelineID", Err: err})
		return
	}

	// ------------- Path parameter "ID" -------------
	var iD string

	err = runtime.BindStyledParameter("simple", false, "ID", chi.URLParam(r, "ID"), &iD)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DetachTag(w, r, pipelineID, iD)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AttachTag operation middleware
func (siw *ServerInterfaceWrapper) AttachTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "pipelineID" -------------
	var pipelineID string

	err = runtime.BindStyledParameter("simple", false, "pipelineID", chi.URLParam(r, "pipelineID"), &pipelineID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pipelineID", Err: err})
		return
	}

	// ------------- Path parameter "ID" -------------
	var iD string

	err = runtime.BindStyledParameter("simple", false, "ID", chi.URLParam(r, "ID"), &iD)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachTag(w, r, pipelineID, iD)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RunNewVersionByPrevVersion operation middleware
func (siw *ServerInterfaceWrapper) RunNewVersionByPrevVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RunNewVersionByPrevVersion(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RunVersion operation middleware
func (siw *ServerInterfaceWrapper) RunVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "versionID" -------------
	var versionID string

	err = runtime.BindStyledParameter("simple", false, "versionID", chi.URLParam(r, "versionID"), &versionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "versionID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RunVersion(w, r, versionID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RunVersionsByBlueprintId operation middleware
func (siw *ServerInterfaceWrapper) RunVersionsByBlueprintId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RunVersionsByBlueprintId(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RunPipeline operation middleware
func (siw *ServerInterfaceWrapper) RunPipeline(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "pipelineID" -------------
	var pipelineID string

	err = runtime.BindStyledParameter("simple", false, "pipelineID", chi.URLParam(r, "pipelineID"), &pipelineID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pipelineID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RunPipeline(w, r, pipelineID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTags(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTag operation middleware
func (siw *ServerInterfaceWrapper) CreateTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTag(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// EditTag operation middleware
func (siw *ServerInterfaceWrapper) EditTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EditTag(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemoveTag operation middleware
func (siw *ServerInterfaceWrapper) RemoveTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ID" -------------
	var iD string

	err = runtime.BindStyledParameter("simple", false, "ID", chi.URLParam(r, "ID"), &iD)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveTag(w, r, iD)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTasksParams

	// ------------- Optional query parameter "name" -------------
	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "taskIDs" -------------
	if paramValue := r.URL.Query().Get("taskIDs"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "taskIDs", r.URL.Query(), &params.TaskIDs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskIDs", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "created" -------------
	if paramValue := r.URL.Query().Get("created"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "created", r.URL.Query(), &params.Created)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "created", Err: err})
		return
	}

	// ------------- Optional query parameter "archived" -------------
	if paramValue := r.URL.Query().Get("archived"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "archived", r.URL.Query(), &params.Archived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "archived", Err: err})
		return
	}

	// ------------- Optional query parameter "selectAs" -------------
	if paramValue := r.URL.Query().Get("selectAs"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "selectAs", r.URL.Query(), &params.SelectAs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selectAs", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTasks(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTasksCount operation middleware
func (siw *ServerInterfaceWrapper) GetTasksCount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTasksCount(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// LastVersionDebugTask operation middleware
func (siw *ServerInterfaceWrapper) LastVersionDebugTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "versionID" -------------
	var versionID string

	err = runtime.BindStyledParameter("simple", false, "versionID", chi.URLParam(r, "versionID"), &versionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "versionID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LastVersionDebugTask(w, r, versionID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPipelineTasks operation middleware
func (siw *ServerInterfaceWrapper) GetPipelineTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "pipelineID" -------------
	var pipelineID string

	err = runtime.BindStyledParameter("simple", false, "pipelineID", chi.URLParam(r, "pipelineID"), &pipelineID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pipelineID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPipelineTasks(w, r, pipelineID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetVersionTasks operation middleware
func (siw *ServerInterfaceWrapper) GetVersionTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "versionID" -------------
	var versionID string

	err = runtime.BindStyledParameter("simple", false, "versionID", chi.URLParam(r, "versionID"), &versionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "versionID", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersionTasks(w, r, versionID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workNumber" -------------
	var workNumber string

	err = runtime.BindStyledParameter("simple", false, "workNumber", chi.URLParam(r, "workNumber"), &workNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workNumber", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTask(w, r, workNumber)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workNumber" -------------
	var workNumber string

	err = runtime.BindStyledParameter("simple", false, "workNumber", chi.URLParam(r, "workNumber"), &workNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workNumber", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTask(w, r, workNumber)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/debug/", wrapper.CreateDebugTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/debug/run", wrapper.StartDebugTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/debug/{workNumber}", wrapper.DebugTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules", wrapper.GetModules)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/usage", wrapper.AllModulesUsage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/modules/{moduleName}", wrapper.ModuleRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/{moduleName}/usage", wrapper.ModuleUsage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pipelines", wrapper.ListPipelines)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pipelines", wrapper.CreatePipeline)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/pipelines/version", wrapper.EditVersion)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pipelines/version/{ID}", wrapper.DeleteVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pipelines/version/{ID}", wrapper.GetPipelineVersion)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pipelines/version/{ID}", wrapper.CreatePipelineVersion)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pipelines/{pipelineID}", wrapper.DeletePipeline)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pipelines/{pipelineID}", wrapper.GetPipeline)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pipelines/{pipelineID}/scheduler-tasks", wrapper.ListSchedulerTasks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pipelines/{pipelineID}/tags", wrapper.GetPipelineTags)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pipelines/{pipelineID}/tags/{ID}", wrapper.DetachTag)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/pipelines/{pipelineID}/tags/{ID}", wrapper.AttachTag)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/run/version/new_version", wrapper.RunNewVersionByPrevVersion)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/run/version/{versionID}", wrapper.RunVersion)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/run/versions/blueprint_id", wrapper.RunVersionsByBlueprintId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/run/{pipelineID}", wrapper.RunPipeline)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.GetTags)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tags", wrapper.CreateTag)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/tags", wrapper.EditTag)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/tags/{ID}", wrapper.RemoveTag)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks", wrapper.GetTasks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/count", wrapper.GetTasksCount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/last-by-version/{versionID}", wrapper.LastVersionDebugTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/pipeline/{pipelineID}", wrapper.GetPipelineTasks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/version/{versionID}", wrapper.GetVersionTasks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/{workNumber}", wrapper.GetTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tasks/{workNumber}", wrapper.UpdateTask)
	})

	return r
}
