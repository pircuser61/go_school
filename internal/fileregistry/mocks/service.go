// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	email "gitlab.services.mts.ru/abp/mail/pkg/email"
	entity "gitlab.services.mts.ru/jocasta/pipeliner/internal/entity"

	fileregistry "gitlab.services.mts.ru/jocasta/pipeliner/internal/fileregistry"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetAttachmentLink provides a mock function with given fields: ctx, attachments
func (_m *Service) GetAttachmentLink(ctx context.Context, attachments []fileregistry.AttachInfo) ([]fileregistry.AttachInfo, error) {
	ret := _m.Called(ctx, attachments)

	if len(ret) == 0 {
		panic("no return value specified for GetAttachmentLink")
	}

	var r0 []fileregistry.AttachInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []fileregistry.AttachInfo) ([]fileregistry.AttachInfo, error)); ok {
		return rf(ctx, attachments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []fileregistry.AttachInfo) []fileregistry.AttachInfo); ok {
		r0 = rf(ctx, attachments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fileregistry.AttachInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []fileregistry.AttachInfo) error); ok {
		r1 = rf(ctx, attachments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttachments provides a mock function with given fields: ctx, attach, wNumber, clientID
func (_m *Service) GetAttachments(ctx context.Context, attach []entity.Attachment, wNumber string, clientID string) ([]email.Attachment, error) {
	ret := _m.Called(ctx, attach, wNumber, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetAttachments")
	}

	var r0 []email.Attachment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.Attachment, string, string) ([]email.Attachment, error)); ok {
		return rf(ctx, attach, wNumber, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.Attachment, string, string) []email.Attachment); ok {
		r0 = rf(ctx, attach, wNumber, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]email.Attachment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.Attachment, string, string) error); ok {
		r1 = rf(ctx, attach, wNumber, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttachmentsInfo provides a mock function with given fields: ctx, attachments
func (_m *Service) GetAttachmentsInfo(ctx context.Context, attachments map[string][]entity.Attachment) (map[string][]fileregistry.FileInfo, error) {
	ret := _m.Called(ctx, attachments)

	if len(ret) == 0 {
		panic("no return value specified for GetAttachmentsInfo")
	}

	var r0 map[string][]fileregistry.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]entity.Attachment) (map[string][]fileregistry.FileInfo, error)); ok {
		return rf(ctx, attachments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]entity.Attachment) map[string][]fileregistry.FileInfo); ok {
		r0 = rf(ctx, attachments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]fileregistry.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string][]entity.Attachment) error); ok {
		r1 = rf(ctx, attachments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *Service) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveFile provides a mock function with given fields: ctx, token, clientID, name, file, workNumber
func (_m *Service) SaveFile(ctx context.Context, token string, clientID string, name string, file []byte, workNumber string) (string, error) {
	ret := _m.Called(ctx, token, clientID, name, file, workNumber)

	if len(ret) == 0 {
		panic("no return value specified for SaveFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []byte, string) (string, error)); ok {
		return rf(ctx, token, clientID, name, file, workNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []byte, string) string); ok {
		r0 = rf(ctx, token, clientID, name, file, workNumber)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []byte, string) error); ok {
		r1 = rf(ctx, token, clientID, name, file, workNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
