// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	grpc "google.golang.org/grpc"

	delegationht "gitlab.services.mts.ru/jocasta/human-tasks/pkg/proto/gen/proto/go/delegation"
)

// DelegationServiceClient is an autogenerated mock type for the DelegationServiceClient type
type DelegationServiceClient struct {
	mock.Mock
}

// CreateDelegation provides a mock function with given fields: ctx, in, opts
func (_m *DelegationServiceClient) CreateDelegation(ctx context.Context, in *delegationht.CreateDelegationRequest, opts ...grpc.CallOption) (*delegationht.CreateDelegationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *delegationht.CreateDelegationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *delegationht.CreateDelegationRequest, ...grpc.CallOption) *delegationht.CreateDelegationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*delegationht.CreateDelegationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *delegationht.CreateDelegationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDelegation provides a mock function with given fields: ctx, in, opts
func (_m *DelegationServiceClient) DeleteDelegation(ctx context.Context, in *delegationht.DeleteDelegationRequest, opts ...grpc.CallOption) (*delegationht.DeleteDelegationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *delegationht.DeleteDelegationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *delegationht.DeleteDelegationRequest, ...grpc.CallOption) *delegationht.DeleteDelegationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*delegationht.DeleteDelegationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *delegationht.DeleteDelegationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDelegations provides a mock function with given fields: ctx, in, opts
func (_m *DelegationServiceClient) GetDelegations(ctx context.Context, in *delegationht.GetDelegationsRequest, opts ...grpc.CallOption) (*delegationht.GetDelegationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *delegationht.GetDelegationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *delegationht.GetDelegationsRequest, ...grpc.CallOption) *delegationht.GetDelegationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*delegationht.GetDelegationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *delegationht.GetDelegationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MergeDelegations provides a mock function with given fields: ctx, in, opts
func (_m *DelegationServiceClient) MergeDelegations(ctx context.Context, in *delegationht.MergeDelegationsRequest, opts ...grpc.CallOption) (*delegationht.MergeDelegationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *delegationht.MergeDelegationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *delegationht.MergeDelegationsRequest, ...grpc.CallOption) *delegationht.MergeDelegationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*delegationht.MergeDelegationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *delegationht.MergeDelegationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDelegationServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewDelegationServiceClient creates a new instance of DelegationServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDelegationServiceClient(t mockConstructorTestingTNewDelegationServiceClient) *DelegationServiceClient {
	mock := &DelegationServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
