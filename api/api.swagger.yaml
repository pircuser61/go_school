openapi: 3.0.1
info:
  title: Pipeliner API
  contact: {}
  version: "0.1"
servers:
- url: //localhost:8181/api/pipeliner/v1
paths:
  /debug/:
    post:
      tags:
      - debug
      summary: Create debug task
      description: Создать сессию отладки
      operationId: create-debug-task
      requestBody:
        description: New debug task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTask'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: debug
  /debug/{workNumber}:
    get:
      tags:
      - tasks
      summary: Debug task
      description: Получить debug-задачу
      operationId: debug-task
      parameters:
      - name: workNumber
        in: path
        description: work number
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DebugResult'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /debug/run:
    post:
      tags:
      - debug
      summary: Start debug task
      description: Начать отладку
      operationId: start-debug-task
      requestBody:
        description: debug request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DebugRunRequest'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTask'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /modules:
    get:
      tags:
      - modules
      summary: Get list of modules
      description: Список блоков
      operationId: get-modules
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusFunctionList'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /modules/{moduleName}:
    post:
      tags:
      - modules
      summary: Run Module By Name
      description: Запустить блок
      operationId: module-run
      parameters:
      - name: moduleName
        in: path
        description: module name
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UsageResponse'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /modules/{moduleName}/usage:
    get:
      tags:
      - modules
      summary: Usage of module in pipelines
      description: Сценарии, в которых используется блок
      operationId: module-usage
      parameters:
      - name: moduleName
        in: path
        description: module name
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UsageResponse'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /modules/usage:
    get:
      tags:
      - modules
      summary: Get list of modules usage
      description: Блоки и сценарии, в которых они используются
      operationId: all-modules-usage
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AllUsageResponse'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines:
    get:
      tags:
      - pipeline
      summary: Get list of pipelines
      description: Список сценариев
      operationId: list-pipelines
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenarioList'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    post:
      tags:
      - pipeline
      summary: Create pipeline
      description: Создать новый сценарий
      operationId: create-pipeline
      requestBody:
        description: New scenario
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusScenario'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: pipeline
  /pipelines/{pipelineID}:
    get:
      tags:
      - pipeline
      summary: Get pipeline
      description: Получить сценарий по ID
      operationId: get-pipeline
      parameters:
      - name: pipelineID
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    delete:
      tags:
      - pipeline
      summary: Delete Pipeline
      description: Удалить сценарий
      operationId: delete-pipeline
      parameters:
      - name: pipelineID
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/{pipelineID}/scheduler-tasks:
    post:
      tags:
      - pipeline
      summary: Active scheduler tasks
      description: Наличие у сценария активных заданий в шедулере
      operationId: list-scheduler-tasks
      parameters:
      - name: pipelineID
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SchedulerTasksResponse'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/{pipelineID}/tags:
    get:
      tags:
      - pipeline
      - tags
      summary: Get Pipeline Tags
      description: Список тегов сценария
      operationId: get-pipeline-tags
      parameters:
      - name: pipelineID
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EriusTagInfo'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/{pipelineID}/tags/{ID}:
    put:
      tags:
      - pipeline
      - tags
      summary: Attach Tag
      description: Прикрепить тег к сценарию
      operationId: attach-tag
      parameters:
      - name: pipelineID
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
      - name: ID
        in: path
        description: Tag ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTagInfo'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    delete:
      tags:
      - pipeline
      - tags
      summary: Detach Tag
      description: Открепить тег от сценария
      operationId: detach-tag
      parameters:
      - name: pipelineID
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
      - name: ID
        in: path
        description: Tag ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/version:
    put:
      tags:
      - pipeline
      summary: Edit Draft
      description: Изменить черновик
      operationId: edit-version
      requestBody:
        description: New draft
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusScenario'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: draft
  /pipelines/version/{ID}:
    get:
      tags:
      - version
      summary: Get pipeline version
      description: Получить версию сценария по ID
      operationId: get-pipeline-version
      parameters:
      - name: ID
        in: path
        description: Version ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    post:
      tags:
      - version
      summary: Create pipeline version
      description: Создать новую версию сценария
      operationId: create-pipeline-version
      parameters:
      - name: ID
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
      requestBody:
        description: New version
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusScenario'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: pipeline
    delete:
      tags:
      - version
      summary: Delete Version
      description: Удалить версию
      operationId: delete-version
      parameters:
      - name: ID
        in: path
        description: Version ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /run/{pipelineID}:
    post:
      tags:
      - pipeline
      - run
      summary: Run Pipeline
      description: Запустить сценарий
      operationId: run-pipeline
      parameters:
      - name: pipelineID
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
      requestBody:
        description: pipeline input
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunPipelineBody'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RunResponse'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /run/version/{versionID}:
    post:
      tags:
      - version
      - run
      summary: Run Version
      description: Запустить версию
      operationId: run-version
      parameters:
      - name: versionID
        in: path
        description: Version ID
        required: true
        schema:
          type: string
      requestBody:
        description: pipeline input
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunVersionBody'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RunResponse'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /run/versions/blueprint_id:
    post:
      tags:
      - version
      - run
      summary: Run Version By blueprintID
      description: Запустить все версии c blueprintID и первым блоком sd_application
      operationId: run-versions-by-blueprint-id
      requestBody:
        description: pipeline input
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunVersionsByBlueprintIdRequest'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RunResponse'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /run/version/new_version:
    post:
      tags:
      - version
      - run
      summary: Run Version
      description: Запустить версию
      operationId: run-new-version-by-prev-version
      requestBody:
        description: pipeline input
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunNewVersionByPrevVersionRequest'
        required: false
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /tags:
    get:
      tags:
      - tags
      summary: Get Tags
      description: Cписок тегов
      operationId: get-tags
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EriusTagInfo'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    put:
      tags:
      - tags
      summary: Edit Tag
      description: Изменить тег
      operationId: edit-tag
      requestBody:
        description: Modified tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusTagInfo'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTagInfo'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: tag
    post:
      tags:
      - tags
      summary: Create Tag
      description: Создать новый тег
      operationId: create-tag
      requestBody:
        description: New tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusTagInfo'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTagInfo'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: tag
  /tags/{ID}:
    delete:
      tags:
      - tags
      summary: Remove Tag
      description: Удалить тег
      operationId: remove-tag
      parameters:
      - name: ID
        in: path
        description: Tag ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks:
    get:
      tags:
      - pipeline
      - tasks
      summary: Get Tasks
      description: Получить задачи
      operationId: get-tasks
      parameters:
      - name: name
        in: query
        description: Pipeline name
        schema:
          type: string
      - name: taskIDs
        in: query
        description: Task IDs
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: order
        in: query
        description: Order
        schema:
          type: string
      - name: limit
        in: query
        description: Limit
        schema:
          type: integer
          default: 10
      - name: offset
        in: query
        description: Offset
        schema:
          type: integer
          default: 0
      - name: created
        in: query
        schema: 
          $ref: '#/components/schemas/Created'
      - name: archived
        in: query
        schema: 
          type: boolean
      - name: selectAs
        in: query
        schema: 
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTasksPage'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/{workNumber}:
    get:
      tags:
      - tasks
      summary: Get Task
      description: Получить экземпляр задачи
      operationId: get-task
      parameters:
      - name: workNumber
        in: path
        description: work number
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/eriusTaskResponse'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    post:
      tags:
      - tasks
      summary: Update Task
      description: Update task
      operationId: update-task
      parameters:
      - name: workNumber
        in: path
        description: work number
        required: true
        schema:
          type: string
      requestBody:
        description: Task update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: data
  /tasks/count:
    get:
      tags:
      - pipeline
      - tasks
      summary: Get amount of tasks
      description: Получить количество задач по каждой категории
      operationId: get-tasks-count
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CountTasks'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/last-by-version/{versionID}:
    get:
      tags:
      - tasks
      summary: Get last debug task for version
      description: Получить последнюю debug-задачу версии сценария
      operationId: last-version-debug-task
      parameters:
      - name: versionID
        in: path
        description: Version ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTask'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/pipeline/{pipelineID}:
    get:
      tags:
      - pipeline
      - tasks
      summary: Get Pipeline Tasks
      description: Получить задачи по сценарию
      operationId: get-pipeline-tasks
      parameters:
      - name: pipelineID
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTasks'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/version/{versionID}:
    get:
      tags:
      - version
      - tasks
      summary: Get Version Tasks
      description: Получить задачи по версии сценарию
      operationId: get-version-tasks
      parameters:
      - name: versionID
        in: path
        description: Version ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTasks'
                  httpResponse:
                    $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
components:
  schemas:
    AllUsageResponse:
      type: object
      properties:
        pipelines:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    CountTasks:
      type: object
      properties:
        active:
          type: integer
        approve:
          type: integer
        execute:
          type: integer
    DebugResult:
      type: object
      properties:
        block_name:
          type: string
        break_points:
          type: array
          items:
            type: string
        status:
          type: string
          description: todo define values
          example: run,error,finished,created
        task:
          $ref: '#/components/schemas/EriusTask'
    EriusFunc:
      type: object
      properties:
        block_type:
          type: string
          example: python3
          enum:
          - python3
          - go
          - internal
          - term
          - scenario
        input:
          type: array
          items:
            $ref: '#/components/schemas/EriusFunctionValue'
        next:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        output:
          type: array
          items:
            $ref: '#/components/schemas/EriusFunctionValue'
        param_type:
          type: string
        params:
          type: object
          properties: {}
        short_title:
          type: string
          example: lock-bts
        title:
          type: string
          example: lock-bts
        type_id:
          type: string
          example: approver
        x:
          type: integer
        y:
          type: integer
    EriusFunctionList:
      type: object
      properties:
        funcs:
          type: array
          items:
            $ref: '#/components/schemas/FunctionModel'
        shapes:
          type: array
          items:
            $ref: '#/components/schemas/ShapeEntity'
    EriusFunctionValue:
      type: object
      properties:
        global:
          type: string
          example: block.some_data
        name:
          type: string
          example: some_data
        type:
          type: string
          example: string
    EriusScenario:
      type: object
      properties:
        approved_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        author:
          type: string
          example: testAuthor
        comment:
          type: string
        comment_rejected:
          type: string
        created_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        hasDraft:
          type: boolean
        id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        input:
          type: array
          items:
            $ref: '#/components/schemas/EriusFunctionValue'
        name:
          type: string
          example: ScenarioName
        output:
          type: array
          items:
            $ref: '#/components/schemas/EriusFunctionValue'
        pipeline:
          type: object
          properties:
            blocks:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/EriusFunc'
            entrypoint:
              type: string
        status:
          type: integer
          description: 1 - Draft, 2 - Approved, 3 - Deleted, 4 - Rejected, 5 - On
            Approve
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EriusTagInfo'
        version_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
    EriusScenarioInfo:
      type: object
      properties:
        approved_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        approver:
          type: string
          example: testApprover
        author:
          type: string
          example: testAuthor
        comment:
          type: string
        comment_rejected:
          type: string
        created_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        last_run:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        last_run_status:
          type: string
        name:
          type: string
          example: ScenarioName
        status:
          type: integer
          description: 1 - Draft, 2 - Approved, 3 - Deleted, 4 - Rejected, 5 - On
            Approve
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EriusTagInfo'
        version_history:
          type: array
          items:
            $ref: '#/components/schemas/EriusVersionInfo'
        version_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
    EriusScenarioList:
      type: object
      properties:
        drafts:
          type: array
          description: Черновики
          items:
            $ref: '#/components/schemas/EriusScenarioInfo'
        on_approve:
          type: array
          description: Сценарии на одобрении
          items:
            $ref: '#/components/schemas/EriusScenarioInfo'
        pipelines:
          type: array
          description: Согласованные сценарии
          items:
            $ref: '#/components/schemas/EriusScenarioInfo'
        tags:
          type: array
          description: Теги
          items:
            $ref: '#/components/schemas/EriusTagInfo'
    EriusTagInfo:
      type: object
      properties:
        color:
          type: string
        id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        isMarker:
          type: boolean
        name:
          type: string
        status:
          type: integer
          description: 1 - Created, 3 - Deleted
    EriusTask:
      type: object
      properties:
        author:
          type: string
        blueprint_id:
          type: string
        debug:
          type: boolean
        description:
          type: string
        human_status:
          type: string
        id:
          type: string
        last_changed_at:
          type: string
        name:
          type: string
        parameters:
          type: object
          properties: {}
        started_at:
          type: string
        status:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Step'
        version_id:
          type: string
        work_number:
          type: string
    EriusTasks:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/EriusTask'
    EriusTasksPage:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/EriusTask'
        total:
          type: integer
    EriusVersionInfo:
      type: object
      properties:
        approved_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        approver:
          type: string
          example: testApprover
        author:
          type: string
          example: testAuthor
        created_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        version_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
    sendEditAppUpdateParams:
      type: object
      description: Send application to edit from approver
      properties:
        comment:
          type: string
          description: Comment from approver
        attachments:
          type: array
          items:
            type: string
      required:
        - comment
        - attachments
    createNewWorkUpdateParams:
      type: object
      description: Send edited application to new process
    RunResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        output:
          type: object
          properties: {}
        pipeline_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        status:
          type: string
          example: runned
        work_number:
          type: string
    SchedulerTasksResponse:
      type: object
      properties:
        result:
          type: boolean
    Step:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        has_error:
          type: boolean
        name:
          type: string
        state:
          type: object
          properties: {}
        status:
          type: string
        steps:
          type: array
          items:
            type: string
        storage:
          type: object
          properties: {}
        time:
          type: string
        type:
          type: string
    TaskUpdate:
      type: object
      properties:
        action:
          type: string
          example: approvement
          enum:
          - approvement
        parameters:
          type: object
          properties: {}
    UsageResponse:
      type: object
      properties:
        name:
          type: string
          description: Имя блока
        pipelines:
          type: array
          items:
            $ref: '#/components/schemas/UsedBy'
        used:
          type: boolean
    UsedBy:
      type: object
      properties:
        id:
          type: string
          description: ID сценария
        name:
          type: string
          description: Имя сценария
    CreateTaskRequest:
      type: object
      required: [parameters,version_id]
      properties:
        parameters:
          type: object
          properties: {}
        version_id:
          type: string
          format: uuid
    DebugRunRequest:
      type: object
      required: [action,break_points,work_number]
      properties:
        action:
          type: string
          example: step_over,resume
        break_points:
          type: array
          items:
            type: string
        work_number:
          type: string
    RunPipelineBody:
      type: object
    RunVersionBody:
      type: object
    RunVersionsByBlueprintIdRequest:
      required: [application_body,blueprint_id,description]
      type: object
      properties:
        application_body:
          type: object
          properties: {}
        blueprint_id:
          type: string
        description:
          type: string
    RunNewVersionByPrevVersionRequest:
      required: [work_number,blueprint_id,description,application_body]
      type: object
      properties:
        work_number:
          type: string
        blueprint_id:
          type: string
        description:
          type: string
        application_body:
          type: object
          properties: {}
    eriusTaskResponse:
      type: object
      properties:
        author:
          type: string
        blueprint_id:
          type: string
        debug:
          type: boolean
        description:
          type: string
        human_status:
          type: string
        id:
          type: string
        last_changed_at:
          type: string
        name:
          type: string
        parameters:
          type: object
          properties: {}
        started_at:
          type: string
        status:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/step'
        version_id:
          type: string
        work_number:
          type: string
    httpError:
      type: object
      properties:
        description:
          type: string
        error:
          type: string
        status_code:
          type: integer
    httpResponse:
      type: object
      properties:
        data:
          type: object
          properties: {}
        status_code:
          type: integer
    step:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        has_error:
          type: boolean
        name:
          type: string
        state:
          type: object
          properties: {}
        status:
          type: string
        steps:
          type: array
          items:
            type: string
        storage:
          type: object
          properties: {}
        time:
          type: string
        type:
          type: string
    FunctionModel:
      type: object
      properties:
        block_type:
          type: string
        id:
          type: string
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/FunctionValueModel'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/FunctionValueModel'
        params:
          $ref: '#/components/schemas/FunctionParams'
        shape_type:
          type: integer
        sockets:
          type: array
          items:
            type: string
        title:
          type: string
    FunctionParams:
      type: object
      properties:
        params:
          type: object
          properties: {}
        type:
          type: string
          example: approver
          enum:
          - approver
          - servicedesk_application
          - conditions
    FunctionValueModel:
      type: object
      properties:
        comment:
          type: string
        name:
          type: string
        type:
          type: string
    ShapeEntity:
      type: object
      properties:
        icon:
          type: string
        id:
          type: integer
        title:
          type: string
    Created:  
      type: object
      properties:
        start: 
          type: integer
        end: 
          type: integer
