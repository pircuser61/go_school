openapi: 3.0.1
info:
  title: Pipeliner API
  contact: { }
  version: "0.1"
servers:
  - url: //localhost:8181/api/pipeliner/v1
paths:
  /cron/sla:
    get:
      summary: Check if any steps breached SLA
      operationId: checkBreachSLA
      responses:
        200:
          description: OK
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /cron/events_to_send:
    get:
      summary: Send failed tasks events to kafka
      operationId: sendEventsToKafka
      responses:
        200:
          description: OK
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /application/rate/{workNumber}:
    post:
      summary: rate application
      parameters:
        - name: workNumber
          in: path
          description: work number
          required: true
          schema:
            type: string
      operationId: rateApplication
      requestBody:
        description: rate application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateApplicationRequest'
        required: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /modules:
    get:
      tags:
        - modules
      summary: Get list of modules
      description: Список блоков
      operationId: get-modules
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusFunctionList'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines:
    get:
      tags:
        - pipeline
      summary: Get list of pipelines
      description: Список сценариев
      operationId: list-pipelines
      parameters:
        - name: my
          in: query
          description: Show my pipelines only
          required: false
          schema:
            type: boolean
        - name: is_published
          in: query
          description: Show published pipelines only
          required: false
          schema:
            type: boolean
        - name: per_page
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
        - name: page
          in: query
          schema:
            type: integer
            default: 0
            minimum: 1
        - name: filter
          in: query
          description: Фильтр по имени pipeline
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenarioList'
                  status_code:
                    type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    post:
      tags:
        - pipeline
      summary: Create pipeline
      description: Создать новый сценарий
      operationId: create-pipeline
      requestBody:
        description: New scenario
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusScenario'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: pipeline
  /pipelines/name-exists:
    get:
      tags:
        - pipeline
      summary: Check if name of pipeline exists
      description: Проверка на существование имении сценария
      operationId: pipeline-name-exists
      parameters:
        - name: name
          in: query
          description: Pipeline Name
          required: true
          schema:
            type: string
        - name: checkNotDeleted
          in: query
          description: Check for not deleted pipelines
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NameExists'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/{pipelineID}:
    get:
      tags:
        - pipeline
      summary: Get pipeline
      description: Получить сценарий по ID
      operationId: get-pipeline
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    delete:
      tags:
        - pipeline
      summary: Delete Pipeline
      description: Удалить сценарий
      operationId: delete-pipeline
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/by-mails:
    get:
      tags:
        - tasks
      summary: Update tasks by mails
      description: Update tasks by mails
      operationId: update-tasks-by-mails
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/{pipelineID}/versions:
    get:
      tags:
        - pipeline
      summary: Get pipeline versions
      description: Получить все версии сценария по ID
      operationId: get-pipeline-versions
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ScenarioVersionInfoList'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/copy:
    post:
      tags:
        - pipeline
      summary: Creates copy of pipeline
      description: Создать собственную копию процесса
      operationId: copy-pipeline
      requestBody:
        description: Version body to copy
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusScenario'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/version:
    put:
      tags:
        - pipeline
      summary: Edit Draft
      description: Изменить черновик
      operationId: edit-version
      requestBody:
        description: New draft
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusScenario'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: draft
  /pipelines/version/{ID}:
    get:
      tags:
        - version
      summary: Get pipeline version
      description: Получить версию сценария по ID
      operationId: get-pipeline-version
      parameters:
        - name: ID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    post:
      tags:
        - version
      summary: Create pipeline version
      description: Создать новую версию сценария
      operationId: create-pipeline-version
      parameters:
        - name: ID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      requestBody:
        description: New version
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusScenario'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: pipeline
    delete:
      tags:
        - version
      summary: Delete Version
      description: Удалить версию
      operationId: delete-version
      parameters:
        - name: ID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/version/{versionID}/settings:
    get:
      tags:
        - pipeline
        - process_settings
      summary: Get process settings with a list of external systems
      description: Получить настройки процесса со списком внешних систем
      operationId: get-version-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProcessSettingsWithExternalSystems'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    post:
      tags:
        - pipeline
        - process_settings
      summary: Save process settings(start and end schemas)
      description: Сохранить настройки процесса(JSON-схемы)
      operationId: save-version-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
        - name: schema_flag
          in: query
          description: Флаг JSON-схемы, которую нужно сохранить
          required: false
          schema:
            type: string
            enum:
              - start_schema
              - end_schema
      requestBody:
        description: Modified JSON-schemas
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessSettings'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProcessSettings'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/version/{versionID}/settings/task-subscriptions:
    post:
      tags:
        - pipeline
        - process_settings
      summary: Save process task subscription settings
      description: Сохранить основные настройки процесса
      operationId: save-version-task-subscription-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      requestBody:
        description: Modified Task Subscription Settings
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ExternalSystemSubscriptionParams'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipeline/version/{versionID}/settings/main:
    post:
      tags:
        - pipeline
        - process_settings
      summary: Save process main settings
      description: Сохранить основные настройки процесса
      operationId: save-version-main-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      requestBody:
        description: Modified Main Process Settings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessSettings'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/version/{versionID}/system:
    post:
      tags:
        - pipeline
        - process_settings
      summary: Add external system to version
      description: Добавить внешнюю систему для версии процесса
      operationId: add-external-system-to-version
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      requestBody:
        description: Modified JSON-schemas
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalSystemId'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/version/{versionID}/system/{systemID}:
    get:
      tags:
        - pipeline
        - process_settings
      summary: Get external system settings
      description: Получить настройки внешней системы
      operationId: get-external-system-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
        - name: systemID
          in: path
          description: System ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExternalSystem'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    put:
      tags:
        - pipeline
        - process_settings
      summary: Save external system settings
      description: Сохранить настройки внешней системы
      operationId: save-external-system-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
        - name: systemID
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: schema_flag
          in: query
          description: Флаг JSON-схемы, которую нужно сохранить
          required: false
          schema:
            type: string
            enum:
              - input_schema
              - output_schema
              - input_mapping
              - output_mapping
      requestBody:
        description: Modified settings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalSystem'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    delete:
      tags:
        - pipeline
        - process_settings
      summary: Remove external system from list
      description: Удалить из списка внешних систем
      operationId: remove-external-system
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
        - name: systemID
          in: path
          description: System ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/version/{versionID}/settings/approval-list:
    post:
      tags:
        - process_settings
        - approval_list
      summary: Add approval list to version
      description: Добавить лист согласования для версии процесса
      operationId: save-approval-list-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      requestBody:
        description: Modified JSON-schemas
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveApprovalListSettings'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    get:
      tags:
        - process_settings
        - approval_list
      summary: get version approval lists
      description: получение списков согласований
      operationId: get-approval-lists-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
            format: uuid
            example: 916ad995-8d13-49fb-82ee-edd4f97649e2
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VersionApprovalList'
                  status_code:
                    type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /task/{workNumber}/approval-list/{listID}:
    get:
      tags:
        - process_settings
        - approval_list
      summary: get task approval list
      description: получение списка согласования заявки
      operationId: get-approval-list-setting
      parameters:
        - name: workNumber
          in: path
          description: Номер заявки
          required: true
          schema:
            type: string
            example: J00000000666
        - name: listID
          in: path
          description: list ID
          required: true
          schema:
            type: string
            format: uuid
            example: 916ad995-8d13-49fb-82ee-edd4f97649e2
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ResponseVersionApprovalList'
                  status_code:
                    type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/version/{versionID}/settings/approval-list/{listID}:
    put:
      tags:
        - process_settings
        - approval_list
      summary: Update approval list
      description: Обновить лист согласования
      operationId: update-approval-list-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
        - name: listID
          in: path
          description: list ID
          required: true
          schema:
            type: string
      requestBody:
        description: Modified JSON-schemas
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApprovalListSettings'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    delete:
      tags:
        - process_settings
        - approval_list
      summary: Delete approval list
      description: Удалить лист согласования
      operationId: remove-approval-list-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
        - name: listID
          in: path
          description: list ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    get:
      tags:
        - process_settings
        - approval_list
      summary: get task approval list by id
      description: получение списка согласования заявки
      operationId: get-approval-list-setting-by-id
      parameters:
        - name: versionID
          in: path
          description: id версии
          required: true
          schema:
            type: string
            format: uuid
        - name: listID
          in: path
          description: id списка согласования
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/VersionApprovalList'
                  status_code:
                    type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/version/{versionID}/system/{systemID}/runAsOthers:
    post:
      tags:
        - pipeline
        - process_settings
      summary: Allow the system to launch requests from a 3rd party
      description: Разрешить системе запуск заявок от третьего лица
      operationId: allow-run-as-others
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
            format: uuid
            example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        - name: systemID
          in: path
          description: system ID
          required: true
          schema:
            type: string
            format: uuid
            example: 916ad995-8d13-49fb-82ee-edd4f97649e2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllowRunAsOthers'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/version/{versionID}/system/{systemID}/endRoutes:
    put:
      tags:
        - pipeline
        - process_settings
      summary: Save external systems settings for end of process
      description: Сохранить настройки внешней системы по завершению пайплайна
      operationId: save-external-system-end-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
            format: uuid
            example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        - name: systemID
          in: path
          description: system ID
          required: true
          schema:
            type: string
            format: uuid
            example: 916ad995-8d13-49fb-82ee-edd4f97649e2
      requestBody:
        description: Modified ending settings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndSystemSettings'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    delete:
      tags:
        - pipeline
        - process_settings
      summary: delete external systems settings for end of process
      description: Удалить настройки внешней системы по завершению пайплайна
      operationId: delete-external-system-end-settings
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
            format: uuid
            example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        - name: systemID
          in: path
          description: system ID
          required: true
          schema:
            type: string
            format: uuid
            example: 916ad995-8d13-49fb-82ee-edd4f97649e2
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/notify/new_function_version:
    post:
      operationId: notify-new-function-version
      tags:
        - pipeline
      summary: Notify pipeline authors about new function version
      description: Оповестить владельцев сценариев о наличии новой функции
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                functionId:
                  type: string
                versionId:
                  type: string
              required:
                - functionId
                - versionId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/search:
    get:
      tags:
        - pipeline
      summary: search list of pipelines
      description: поиск списка сценариев по айди или названию
      operationId: search-pipelines
      parameters:
        - name: pipelineName
          in: query
          description: имя пайплайна
          required: false
          schema:
            type: string
        - name: pipelineId
          in: query
          description: id пайплайна
          required: false
          schema:
            type: string
            format: uuid
            example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        - name: page
          in: query
          description: страница для отображения
          required: false
          schema:
            type: integer
        - name: perPage
          in: query
          description: сколько отображать на одной странице
          required: false
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ResponsePipelineSearch'
                  status_code:
                    type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /run/versions/pipeline_id:
    post:
      tags:
        - version
        - run
      summary: Run Version By pipeline_id
      description: Запустить все версии c pipelineID и первым блоком sd_application
      operationId: run-versions-by-pipeline-id
      requestBody:
        description: pipeline input
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunVersionsByPipelineIdRequest'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RunResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /run/version/new_version:
    post:
      tags:
        - version
        - run
      summary: Run Version
      description: Запустить версию
      operationId: run-new-version-by-prev-version
      requestBody:
        description: pipeline input
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunNewVersionByPrevVersionRequest'
        required: false
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /tasks:
    get:
      tags:
        - pipeline
        - tasks
      summary: Get Tasks
      description: Получить задачи
      operationId: get-tasks
      parameters:
        - name: name
          in: query
          description: Pipeline name
          schema:
            type: string
        - name: taskIDs
          in: query
          description: Task IDs
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: order
          description: order for started_at
          in: query
          deprecated: true
          schema:
            type: string
        - name: expired
          description: params for get expired applications
          in: query
          schema:
            type: boolean
        - name: orderBy
          in: query
          description: params for tasks ordering
          schema:
            type: array
            items:
              example: "started_at:desc"
              description: param consist of field and order parts, divided with a colon - field:order
              type: string
        - name: limit
          in: query
          description: Limit
          schema:
            type: integer
            default: 10
            maximum: 1000
        - name: offset
          in: query
          description: Offset
          schema:
            type: integer
            default: 0
        - name: created
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Created'
        - name: archived
          in: query
          schema:
            type: boolean
        - name: selectAs
          in: query
          schema:
            type: string
            enum:
              - approver
              - finished_approver
              - executor
              - finished_executor
              - form_executor
              - finished_form_executor
              - signer_phys
              - finished_signer_phys
              - signer_jur
              - finished_signer_jur
              - initiators
              - group_executor
              - finished_group_executor
              - queue_executor
              - in_work_executor
              - finished_executor_v2
        - name: forCarousel
          in: query
          schema:
            type: boolean
          description: get tasks with status wait or done
        - name: status
          in: query
          schema:
            type: array
            items:
              type: string
          description: get tasks with different statuses
        - name: receiver
          in: query
          schema:
            type: string
          description: receiver login
        - name: hasAttachments
          in: query
          schema:
            type: boolean
          description: filter for attachments
        - name: initiator
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter for initiators
        - name: initiatorLogins
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter for initiators
        - name: processingLogins
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter in process by logins
        - name: processingGroupIds
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter in process by group ids
        - name: executorLogins
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter in process by logins
        - name: executorGroupIds
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter in process by group ids
        - name: executorTypeAssigned
          in: query
          schema:
            type: string
            enum:
              - assigned_to_me
              - assigned_by_me
          description: filter type assigned
        - name: signatureCarrier
          in: query
          schema:
            type: string
            enum:
              - cloud
              - token
              - all
          description: signature carrier (used for selectAs = signer_jur)
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTasksPage'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/users:
    get:
      tags:
        - pipeline
        - tasks
      summary: Get
      description: Получить уникальных исполнителей/инициаторов/названия групп для фильтра
      operationId: get-tasks-users
      parameters:
        - name: name
          in: query
          description: Pipeline name
          schema:
            type: string
        - name: taskIDs
          in: query
          description: Task IDs
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: order
          description: order for started_at
          in: query
          deprecated: true
          schema:
            type: string
        - name: orderBy
          in: query
          description: params for tasks ordering
          schema:
            type: array
            items:
              example: "started_at:desc"
              description: param consist of field and order parts, divided with a colon - field:order
              type: string
        - name: limit
          in: query
          description: Limit
          schema:
            type: integer
            default: 10
            maximum: 1000
        - name: offset
          in: query
          description: Offset
          schema:
            type: integer
            default: 0
        - name: created
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Created'
        - name: archived
          in: query
          schema:
            type: boolean
        - name: selectAs
          in: query
          schema:
            type: string
            enum:
              - approver
              - finished_approver
              - executor
              - finished_executor
              - form_executor
              - finished_form_executor
              - signer_phys
              - finished_signer_phys
              - signer_jur
              - finished_signer_jur
              - initiators
              - group_executor
              - finished_group_executor
              - queue_executor
              - in_work_executor
        - name: forCarousel
          in: query
          schema:
            type: boolean
          description: get tasks with status wait or done
        - name: status
          in: query
          schema:
            type: array
            items:
              type: string
          description: get tasks with different statuses
        - name: receiver
          in: query
          schema:
            type: string
          description: receiver login
        - name: hasAttachments
          in: query
          schema:
            type: boolean
          description: filter for attachments
        - name: initiator
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter for initiators
        - name: initiatorLogins
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter for initiators
        - name: processingLogins
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter in process by logins
        - name: processingGroupIds
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter in process by group ids
        - name: executorLogins
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter in process by logins
        - name: executorGroupIds
          in: query
          schema:
            type: array
            items:
              type: string
          description: filter in process by group ids
        - name: executorTypeAssigned
          in: query
          schema:
            type: string
            enum:
              - assigned_to_me
              - assigned_by_me
          description: filter type assigned
        - name: signatureCarrier
          in: query
          schema:
            type: string
            enum:
              - cloud
              - token
              - all
          description: signature carrier (used for selectAs = signer_jur)
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UniquePersons'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/{workNumber}/{formID}/schema:
    get:
      tags:
        - tasks
      summary: Get Task form schema
      description: Получить id схемы формы задачи
      operationId: get-task-form-schema
      parameters:
        - name: workNumber
          in: path
          description: work number
          required: true
          schema:
            type: string
        - name: formID
          in: path
          description: form id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/{workNumber}:
    get:
      tags:
        - tasks
      summary: Get Task
      description: Получить экземпляр задачи
      operationId: get-task
      parameters:
        - name: workNumber
          in: path
          description: work number
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/eriusTaskResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    post:
      tags:
        - tasks
      summary: Update Task
      description: Update task
      operationId: update-task
      parameters:
        - name: workNumber
          in: path
          description: work number
          required: true
          schema:
            type: string
      requestBody:
        description: Task update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: data
  /tasks/count:
    get:
      tags:
        - pipeline
        - tasks
      summary: Get amount of tasks
      description: Получить количество задач по каждой категории
      operationId: get-tasks-count
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CountTasks'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/mean/{pipelineId}:
    get:
      tags:
        - tasks
      summary: Get Task Mean Solve time
      description: Получить среднее время выполнения заявки
      operationId: get-task-mean-solve-time
      parameters:
        - name: pipelineId
          in: path
          description: pipeline id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskMeanSolveTime'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/stop:
    post:
      tags:
        - tasks
      summary: Stop tasks by work number
      description: Остановка переданных заявок
      operationId: stop-tasks
      requestBody:
        description: Task stop data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TasksStop'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TasksStopped'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /forms/changelog:
    get:
      tags:
        - forms
      summary: Get forms changelog
      description: Получить список изменений формы
      operationId: get-forms-changelog
      parameters:
        - name: work_number
          in: query
          description: Work number
          required: true
          schema:
            type: string
        - name: block_id
          in: query
          description: Id of form block (name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FormsChangelogResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /dictionaries/schema/task-event:
    get:
      tags:
        - dictionaries
      summary: Get task event json schema
      description: Получить типовую json schem'у для ивентов нод
      operationId: get-task-event-schema
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/JSONSchema'
                  status_code:
                    type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /dictionaries/approve-action-names:
    get:
      tags:
        - dictionaries
      summary: Get approve action names dictionary
      description: Получить словарь действий для ноды согласования
      operationId: get-approve-action-names
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApproveActionNamesResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /dictionaries/approve-statuses:
    get:
      tags:
        - dictionaries
      summary: Get approve statuses dictionary
      description: Получить словарь статусов согласования
      operationId: get-approve-statuses
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApproveStatusesResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /dictionaries/get-node-decisions:
    get:
      tags:
        - dictionaries
      summary: Get list of node decisions
      description: Получить список всех решений нод
      operationId: get-node-decisions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NodeDecision'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /monitoring/tasks/{workNumber}/action:
    put:
      operationId: MonitoringTaskAction
      tags:
        - monitoring
      summary: Действия с заявкой в мониторинге
      description: Действия с заявкой в мониторинге
      parameters:
        - name: workNumber
          in: path
          description: work number
          required: true
          schema:
            type: string
      requestBody:
        description: Monitoring task action
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitoringTaskActionRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MonitoringTask'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'

  /monitoring/tasks/{workNumber}/events:
    get:
      operationId: GetMonitoringTaskEvents
      tags:
        - monitoring
      summary: Ивенты заяви в мониторинге
      description: Ивенты заяви в мониторинге
      parameters:
        - name: workNumber
          in: path
          description: work number
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MonitoringTaskEvents'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'

  /monitoring/tasks/block/{blockId}:
    put:
      operationId: MonitoringUpdateTaskBlockData
      tags:
        - monitoring
      summary: Редактирование данных блока в мониторинге
      description: Редактирование данных блока в мониторинге
      parameters:
        - name: blockId
          in: path
          description: block ID
          required: true
          schema:
            type: string
      requestBody:
        description: updated data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitoringTaskUpdateBlockRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BlockEditResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables

  /monitoring/tasks/block/inputs:
    put:
      operationId: MonitoringUpdateBlockInputs
      tags:
        - monitoring
      summary: Редактирование инпутов блока в мониторинге
      description: Редактирование инпутов блока в мониторинге
      requestBody:
        description: updated data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitoringUpdateBlockInputsRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BlockEditResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables

  /monitoring/tasks/block/{blockId}/context:
    get:
      operationId: MonitoringGetBlockContext
      tags:
        - monitoring
      summary: Получение контекста блоков
      description: Получение контекста блоков до переданного блока
      parameters:
        - name: blockId
          in: path
          description: block ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BlockContextResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /monitoring/tasks/block/{blockId}/state:
    get:
      operationId: MonitoringGetBlockState
      tags:
        - monitoring
      summary: Получение стейта блока
      description: Получение стейта блока
      parameters:
        - name: blockId
          in: path
          description: block ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BlockStateResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /monitoring/tasks/block/{blockId}/inputs:
    get:
      operationId: MonitoringGetBlockInputs
      tags:
        - monitoring
      summary: Get inputs of block
      description: Получить инпуты блока
      parameters:
        - name: blockId
          in: path
          description: block ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MonitoringInputsResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /monitoring/tasks/block/{blockId}/outputs:
    get:
      operationId: MonitoringGetBlockOutputs
      tags:
        - monitoring
      summary: Get outputs of block
      description: Получить аутпуты блока
      parameters:
        - name: blockId
          in: path
          description: block ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MonitoringOutputsResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /monitoring/tasks/block/{workNumber}/{stepName}/params:
    get:
      operationId: MonitoringGetNotCreatedBlockInputs
      tags:
        - monitoring
      summary: Get inputs of block that is not created yet
      description: Получить инпуты блока которого ещё нет
      parameters:
        - name: workNumber
          in: path
          description: workNumber таски
          required: true
          schema:
            type: string
        - name: stepName
          in: path
          description: имя блока
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MonitoringInputsResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /monitoring/tasks/block/{blockId}/error:
    get:
      operationId: GetBlockError
      tags:
        - monitoring
      summary: Получение ошибок блока
      description: Получение ошибок блока
      parameters:
        - name: blockId
          in: path
          description: block ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BlockErrorResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /monitoring/tasks:
    get:
      tags:
        - monitoring
      summary: Get tasks for monitoring
      description: Получить заявки для таблицы мониторинга
      operationId: GetTasksForMonitoring
      parameters:
        - name: per_page
          in: query
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: sort.column
          in: query
          schema:
            type: string
            enum:
              - id
              - status
              - process_name
              - initiator
              - work_number
              - started_at
              - finished_at
        - name: sort.order
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
        - name: filter
          in: query
          description: Фильтр по work_number, наименованию процесса, логину инициатора
          schema:
            type: string
        - name: from_date
          in: query
          description: Фильтровать по дате, начало периода
          schema:
            type: string
          example: 2020-07-16T17:10:25.112704+03:00
        - name: to_date
          in: query
          description: Фильтровать по дате, конец периода
          schema:
            type: string
          example: 2020-07-16T17:10:25.112704+03:00
        - name: status
          in: query
          description: Фильтровать по статусу заявки
          required: false
          explode: false
          style: form
          schema:
            type: array
            default: [ ]
            items:
              type: string
              enum:
                - "В работе"
                - "Завершен"
                - "Остановлен"
                - "Отменен"
              description: Статус заявки
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MonitoringTasksPage'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /monitoring/tasks/{workNumber}:
    get:
      tags:
        - monitoring
      summary: Get task for monitoring
      operationId: get-monitoring-task
      parameters:
        - name: workNumber
          in: path
          required: true
          schema:
            type: string
        - name: from_event_id
          in: query
          description: "id ивента с которого нужно взять блоки"
          required: false
          schema:
            type: string
            format: uuid
        - name: to_event_id
          in: query
          description: "id ивента по который нужно взять блоки"
          required: false
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MonitoringTask'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
components:
  schemas:
    ApproveStatusesResponse:
      type: object
      properties:
        id:
          type: string
          description: approve status id
        title:
          type: string
          description: approve status title
      required:
        - id
        - title
    ApproveActionNamesResponse:
      type: object
      properties:
        id:
          type: string
          description: approve action id
        title:
          type: string
          description: approve action title
      required:
        - id
        - title
    AllUsageResponse:
      type: object
      properties:
        pipelines:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - pipelines
    CountTasks:
      type: object
      properties:
        active:
          type: integer
        approve:
          type: integer
        execute:
          type: integer
        form_execute:
          type: integer
        sign:
          type: integer
      required:
        - active
        - approve
        - execute
        - form_execute
        - sign
    DebugResult:
      type: object
      properties:
        block_name:
          type: string
        break_points:
          type: array
          items:
            type: string
        status:
          type: string
          description: todo define values
          example: run,error,finished,created
        task:
          $ref: '#/components/schemas/EriusTask'
      required:
        - block_name
        - status
        - break_points
        - task
    EriusFunc:
      type: object
      properties:
        block_type:
          $ref: '#/components/schemas/blockType'
        input:
          type: array
          items:
            $ref: '#/components/schemas/EriusFunctionValue'
        next:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        sockets:
          type: array
          items:
            $ref: '#/components/schemas/Socket'
        output:
          $ref: '#/components/schemas/JSONSchema'
        param_type:
          type: string
        params:
          type: object
          properties: { }
        short_title:
          type: string
          example: lock-bts
        title:
          type: string
          example: lock-bts
        type_id:
          type: string
          example: approver
        x:
          type: integer
        y:
          type: integer
      required:
        - type_id
        - block_type
        - title
        - next
    EriusFunctionList:
      type: object
      properties:
        funcs:
          type: array
          description: Block modules
          items:
            $ref: '#/components/schemas/FunctionModel'
        shapes:
          type: array
          description: Block shapes
          items:
            $ref: '#/components/schemas/ShapeEntity'
      required:
        - funcs
        - shapes
    EriusFunctionValue:
      type: object
      properties:
        global:
          type: string
          example: block.some_data
        name:
          type: string
          example: some_data
        type:
          type: string
          example: string
        format:
          type: string
          example: string
      required:
        - name
        - type
        - global
        - format
    pipeline:
      type: object
      properties:
        blocks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EriusFunc'
        entrypoint:
          type: string
      required:
        - entrypoint
        - blocks
    pipelineRename:
      type: object
      properties:
        name:
          type: string
          description: Новое имя сценария
        id:
          type: string
          description: ID сценария для переименования
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
      required:
        - name
        - id
    EriusScenario:
      type: object
      description: A single scenario with all content
      properties:
        approved_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        author:
          type: string
          example: testAuthor
        comment:
          type: string
        comment_rejected:
          type: string
        created_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        hasDraft:
          type: boolean
        id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        input:
          type: array
          items:
            $ref: '#/components/schemas/EriusFunctionValue'
        name:
          type: string
          example: ScenarioName
        output:
          type: array
          items:
            $ref: '#/components/schemas/EriusFunctionValue'
        pipeline:
          $ref: '#/components/schemas/pipeline'
        status:
          type: integer
          description: 1 - Draft, 2 - Approved, 3 - Deleted, 4 - Rejected, 5 - On Approve
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EriusTagInfo'
        version_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
      required:
        - id
        - version_id
        - status
        - name
        - pipeline
        - process_settings
        - author
        - tags
        - comment
        - comment_rejected
    ScenarioVersionInfoList:
      type: array
      items:
        $ref: '#/components/schemas/EriusVersionInfo'
    NodeEvent:
      type: string
      description: Возможный ивент ноды
      enum: [ "start", "end" ]
    NodeSubscriptionEvents:
      type: object
      properties:
        node_id:
          type: string
          description: ID ноды в процессе
        notify:
          type: boolean
          description: Нужно ли уведомлять о событиях по ноде
        events:
          type: array
          items:
            $ref: '#/components/schemas/NodeEvent'
      required:
        - node_id
        - notify
    ExternalSystemSubscriptionParams:
      type: object
      description: Настройки подписки системы на изменения в заявках
      properties:
        system_id:
          type: string
          format: uuid
          description: ID системы
        microservice_id:
          type: string
          format: uuid
          description: ID микросервиса
        path:
          type: string
          description: Путь, по которому надо присылать ивенты
        method:
          type: string
          description: Какой http метод использовать
          enum: [ "POST" ]
        notification_schema:
          $ref: '#/components/schemas/JSONSchema'
        mapping:
          $ref: '#/components/schemas/JSONSchemaProperties'
        nodes:
          type: array
          description: Ноды и ивенты, на которые нужна подписка
          items:
            $ref: '#/components/schemas/NodeSubscriptionEvents'
      required:
        - system_id
        - microservice_id
        - path
        - method
        - notification_schema
        - mapping
        - nodes
    ProcessSettingsWithExternalSystems:
      type: object
      description: Настройки старта версии пайплайна(процесса)
      properties:
        process_settings:
          $ref: '#/components/schemas/ProcessSettings'
        external_systems:
          type: array
          items:
            $ref: '#/components/schemas/ExternalSystem'
          description: Внешние системы, которые используют данный пайплайн
        tasks_subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/ExternalSystemSubscriptionParams'
          description: Подписки систем на изменения в заявках, заведенных по процессу
      required:
        - process_settings
        - external_systems
        - tasks_subscriptions
    ProcessSettings:
      type: object
      description: Настройки старта версии пайплайна(процесса)
      properties:
        version_id:
          type: string
          format: uuid
          description: Id версии процесса
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        start_schema:
          $ref: '#/components/schemas/JSONSchema'
        end_schema:
          $ref: '#/components/schemas/JSONSchema'
        name:
          type: string
          description: Новое имя сценария
        resubmission_period:
          type: integer
          description: Срок, в течении которого придет уведомление о том, что пользователь повторно создал заявку. Указывается в часах.
        sla:
          type: integer
          description: SLA в рабочих часах
          minimum: 1
        work_type:
          $ref: "#/components/schemas/WorkType"
      required:
        - version_id
        - name
        - resubmission_period
        - sla
        - work_type
    ExternalSystem:
      type: object
      properties:
        system_id:
          type: string
          format: uuid
          description: Id внешней системы
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        name:
          type: string
          description: Название системы
        input_schema:
          $ref: '#/components/schemas/JSONSchema'
        output_schema:
          $ref: '#/components/schemas/JSONSchema'
        input_mapping:
          $ref: '#/components/schemas/JSONSchema'
        output_mapping:
          $ref: '#/components/schemas/JSONSchema'
        output_settings:
          $ref: '#/components/schemas/EndSystemSettings'
        allow_run_as_others:
          $ref: '#/components/schemas/AllowRunAsOthers'
      required:
        - system_id
        - name
    ExternalSystemId:
      type: string
      format: uuid
      description: Id внешней системы
      example: bde144c9-8d4e-4b42-8ff3-2eda48e1f32d
    EriusScenarioInfo:
      type: object
      properties:
        approved_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        approver:
          type: string
          example: testApprover
        author:
          type: string
          example: testAuthor
        comment:
          type: string
        comment_rejected:
          type: string
        created_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        last_run:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        last_run_status:
          type: string
        name:
          type: string
          example: ScenarioName
        status:
          $ref: '#/components/schemas/scenarioStatus'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EriusTagInfo'
        version_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
      required:
        - id
        - version_id
        - created_at
        - author
        - approver
        - name
        - tags
        - status
        - comment
        - comment_rejected
    EriusScenarioList:
      type: array
      items:
        $ref: '#/components/schemas/EriusScenarioInfo'
    EriusTagInfo:
      type: object
      required: [ id, name, status, color, isMarker ]
      properties:
        color:
          type: string
        id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        isMarker:
          type: boolean
        name:
          type: string
        status:
          type: integer
          description: 1 - Created, 3 - Deleted
    taskHumanStatus:
      type: string
      description: Task human readable status
      enum:
        - new
        - approvement
        - approve-view
        - approve-inform
        - approve-sign
        - approve-sign_ukep
        - approve-confirm
        - processing
        - executor-reject
        - approved
        - approve-viewed
        - approve-informed
        - approve-signed
        - approve-confirmed
        - approvement-reject
        - done
        - wait
        - revoke
        - cancel
    TasksMeta:
      type: object
      description: Tasks list meta
      properties:
        blueprints:
          type: object
          description: Blueprints ids
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - blueprints
    EriusTask:
      type: object
      properties:
        author:
          type: string
        blueprint_id:
          type: string
        debug:
          type: boolean
        description:
          type: string
        human_status:
          $ref: '#/components/schemas/taskHumanStatus'
        human_status_comment:
          type: string
        id:
          type: string
        last_changed_at:
          type: string
        name:
          type: string
        parameters:
          type: object
          properties: { }
        started_at:
          type: string
        status:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Step'
        version_id:
          type: string
        work_number:
          type: string
        comment:
          type: string
        rate:
          type: integer
        attachments_count:
          type: integer
        node_group:
          type: array
          items:
            $ref: '#/components/schemas/NodeGroup'
        approval_list:
          type: object
          properties: { }
          description: мапа листов согласований из настроек сценария
        current_executor:
          $ref: '#/components/schemas/CurrentExecutorData'
        current_execution_start:
          type: string
          description: Current execution start time (UTC)
        current_approvement_start:
          type: string
          description: Current approvement start time (UTC)
        is_paused:
          type: boolean
      required:
        - id
        - version_id
        - started_at
        - last_changed_at
        - name
        - description
        - status
        - human_status
        - author
        - debug
        - parameters
        - steps
        - work_number
        - blueprint_id
        - approval_list
        - current_executor
        - is_paused

    CurrentExecutorData:
      type: object
      description: Current task execution data
      properties:
        people:
          type: array
          description: Executors logins
          items:
            type: string
        initial_people:
          type: array
          description: Initial executors logins
          items:
            type: string
        execution_group_id:
          type: string
          description: Execution group ID
        execution_group_name:
          type: string
          description: Execution group name
      required:
        - people
        - initial_people

    NodeGroup:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/NodeGroup'
        start_node:
          type: string
        end_node:
          type: string
        prev:
          type: string
      required:
        - start_node
        - end_node
    EriusTasks:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/EriusTask'
    TasksUniquePersons:
      type: object
      properties:
        persons:
          type: array
          items:
            type: string
      required:
        - persons
    UniquePersons:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UniqueUser'
        logins:
          type: array
          items:
            type: string
        groups:
          type: array
          items:
            type: string
      required:
        - tasks
        - total
        - tasks_meta
    UniqueUser:
      type: object
      properties:
        username:
          type: string
        tab_num:
          type: string
        full_name:
          type: string
      required:
        - username
        - tab_num
        - full_name
    EriusTasksPage:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/EriusTask'
        total:
          type: integer
        tasks_meta:
          $ref: '#/components/schemas/TasksMeta'
      required:
        - tasks
        - total
        - tasks_meta
    MonitoringTasksPage:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/MonitoringTableTask'
        total:
          type: integer
          description: total number of tasks
      required:
        - tasks
        - total
    MonitoringTableTask:
      type: object
      properties:
        status:
          type: string
          enum: [ "В работе", "Завершен", "Остановлен", "Неизвестный статус" ]
          description: task status
        process_name:
          type: string
          description: name of the process
        initiator:
          type: string
          description: login of initiator
        initiator_fullname:
          type: string
          description: fullname of the initiator
        work_number:
          type: string
        started_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        finished_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        paused_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
      required:
        - id
        - status
        - process_name
        - work_number
        - started_at
        - finished_at
        - initiator
        - initiator_fullname
        - paused_at
    EriusVersionInfo:
      type: object
      properties:
        version_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        approved_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        approver:
          type: string
          example: testApprover
        author:
          type: string
          example: testAuthor
        created_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        updated_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        usage_count:
          type: integer
          description: How many times is the version used as a subprocess
        is_actual:
          type: boolean
          description: If the version is currently used as an actual one
        status:
          $ref: '#/components/schemas/scenarioStatus'
      required:
        - version_id
        - approved_at
        - author
        - created_at
        - updated_at
        - usage_count
        - is_actual
        - status
    scenarioStatus:
      type: integer
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
      description: >
        Tag status:

         * 1 - Draft
         * 2 - Approved
         * 3 - Deleted
         * 4 - Rejected
         * 5 - On approve
    sendEditAppUpdateParams:
      type: object
      description: Send application to edit from approver
      properties:
        comment:
          type: string
          description: Comment from approver
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required:
        - comment
        - attachments
    createNewWorkUpdateParams:
      type: object
      description: Send edited application to new process
    RunResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        output:
          type: object
          properties: { }
        pipeline_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        status:
          type: string
          example: runned
        work_number:
          type: string
      required:
        - pipeline_id
        - work_number
        - status
        - output
        - errors
    Step:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        has_error:
          type: boolean
        name:
          type: string
        state:
          type: object
          properties: { }
        status:
          type: string
          description: Task step execution status
          enum:
            - idle
            - ready
            - running
            - finished
        steps:
          type: array
          items:
            type: string
        storage:
          type: object
          properties: { }
        time:
          type: string
        type:
          type: string
        is_paused:
          type: boolean
      required:
        - time
        - type
        - name
        - state
        - storage
        - errors
        - steps
        - has_error
        - status
        - is_paused
    TaskUpdate:
      type: object
      properties:
        action:
          type: string
          example: approvement
          enum:
            - approvement
            - additional_approvement
            - execution
            - change_executor
            - request_execution_info
            - executor_start_work
            - request_add_info
            - fill_form
            - cancel_app
            - approver_send_edit_app
            - executor_send_edit_app
            - add_approvers
            - form_executor_start_work
            - sign
            - sign_change_work_status
        step_names:
          type: array
          description: Array of step names
          items:
            type: string
        parameters:
          type: object
          description: Task update params
          oneOf:
            - $ref: '#/components/schemas/ApproverUpdateParams'
            - $ref: '#/components/schemas/AdditionalApproverUpdateParams'
            - $ref: '#/components/schemas/ExecutionUpdateParams'
            - $ref: '#/components/schemas/ExecutorChangeParams'
            - $ref: '#/components/schemas/RequestInfoUpdateParams'
            - $ref: '#/components/schemas/ReplyInfoUpdateParams'
            - $ref: '#/components/schemas/ExecutableFunctionParams'
            - $ref: '#/components/schemas/FillFormUpdateParams'
            - $ref: '#/components/schemas/AddApproversParams'
            - $ref: '#/components/schemas/CancelAppParams'
            - $ref: '#/components/schemas/SignUpdateParams'
            - $ref: '#/components/schemas/ChangeWorkStatusParams'
      required:
        - action
        - parameters
        - step_names
    TaskMeanSolveTime:
      type: object
      properties:
        meanWorkHours:
          type: number
      required:
        - meanWorkHours
    TasksStop:
      type: object
      properties:
        tasks:
          type: array
          description: Array of work numbers
          items:
            type: string
      required:
        - tasks
    TasksStopped:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskStatus'
      required:
        - tasks
    TaskStatus:
      type: object
      properties:
        status:
          type: string
          description: Task status
        work_number:
          type: string
          description: Task work number
        finished_at:
          type: string
          format: 'date-time'
          example: 2020-07-16T17:10:25.112704+03:00
      required:
        - status
        - work_number
        - finished_at
    FillFormUpdateParams:
      type: object
      description: Fill form
      properties:
        description:
          type: string
          description: form data
        application_body:
          type: object
          properties: { }
        block_id:
          type: string
          description: Form block id
      required:
        - description
        - application_body
        - block_id
    ApproverUpdateParams:
      type: object
      description: Approver update params
      properties:
        decision:
          $ref: '#/components/schemas/approverDecision'
        comment:
          type: string
          description: Comment from approver
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required:
        - decision
        - comment
        - attachments
    SignUpdateParams:
      type: object
      description: Sign update params
      properties:
        signatures:
          description: files to sign
          type: array
          items:
            type: object
            properties:
              file_id:
                description: id file which was signed
                type: string
              signature_file_id:
                description: id file of detached signature which was created at the moment of signing
                type: string
            required:
              - file_id
              - signature_file_id
        decision:
          $ref: '#/components/schemas/signDecision'
        comment:
          type: string
          description: Comment from signer
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required:
        - decision
    AdditionalApproverUpdateParams:
      type: object
      description: Approver update params
      properties:
        decision:
          $ref: '#/components/schemas/additionalApproverDecision'
        comment:
          type: string
          description: Comment from approver
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required:
        - decision
        - comment
        - attachments
    ExecutionUpdateParams:
      type: object
      description: Executor update params
      properties:
        decision:
          $ref: '#/components/schemas/executionDecision'
        comment:
          type: string
          description: Comment from executor
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required:
        - decision
        - comment
        - attachments
    AddApproversParams:
      type: object
      description: Add Approver params
      properties:
        additionalApprovers:
          type: array
          items:
            type: string
          description: logins of additional approvers
        question:
          type: string
          description: Question from approver
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required:
        - additionalApprovers
        - question
        - attachments
    CancelAppParams:
      type: object
      properties:
        comment:
          type: string
      required:
        - comment
    ChangeWorkStatusParams:
      type: object
      description: Sign update params
      properties:
        status:
          type: string
          enum:
            - start
            - end
      required:
        - status
    signDecision:
      type: string
      enum:
        - signed
        - rejected
        - error
      description: >
        Approver decision:

         * signed - Согласовано
         * rejected - Отклонено
         * error - Произошла ошибка
    approverDecision:
      type: string
      enum:
        - approve
        - reject
        - viewed
        - informed
        - sign
        - confirm
        - sign_ukep
      description: >
        Approver decision:

         * approve - Согласовать
         * reject - Отклонить
         * viewed - Ознакомлен
         * informed - Проинформирован
         * sign - Подписать
         * confirm - Утвердить
         * sign_ukep - Подписать УКЭП
    additionalApproverDecision:
      type: string
      enum:
        - approved
        - rejected
      description: >
        Approver decision:

         * approved - Согласовать
         * rejected - Отклонить
    executionDecision:
      type: string
      enum:
        - executed
        - rejected
      description: >
        Executor decision:

         * executed - executor executed block
         * rejected - executor rejected block
    ExecutorChangeParams:
      type: object
      description: Executor change params
      properties:
        newExecutorLogin:
          type: string
          description: New executor login
        comment:
          type: string
          description: Comment from executor
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required:
        - newExecutorLogin
        - comment
        - attachments
    ReplyInfoUpdateParams:
      type: object
      description: Executor reply info params
      properties:
        executorLogin:
          type: string
          description: executor login
        comment:
          type: string
          description: Comment from executor
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required:
        - comment
        - attachments
        - executorLogin
    RequestInfoUpdateParams:
      type: object
      description: Executor request info params
      properties:
        reqType:
          $ref: '#/components/schemas/RequestExecutionInfoType'
        executorLogin:
          type: string
          description: executor login
        comment:
          type: string
          description: Comment from executor
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required:
        - reqType
        - comment
        - attachments
        - executorLogin
    ExecutableFunctionParams:
      type: object
      description: Chosen function to be executed
      properties:
        name:
          type: string
          description: Function name
        version:
          type: string
          description: Used function version
        mapping:
          $ref: '#/components/schemas/JSONSchemaProperties'
        waitCorrectRes:
          type: integer
          description: Days to wait correct answer
        constants:
          type: object
          description: Constant values for function parameters (key of object is variable name)
        check_sla:
          type: boolean
          description: Is active SLA
        sla:
          type: integer
          description: in seconds
          minimum: 1
        need_retry:
          type: boolean
        retry_count:
          type: integer
          description: count of repetitions for the function
          minimum: 1
        retry_policy:
          type: string
          enum:
            - simple
            - fibonacci
            - exponential
          description: policy of repetitions for the function
        retry_interval:
          type: integer
          description: in seconds
          minimum: 1
      required:
        - name
        - version
        - mapping
        - waitCorrectRes
        - constants
        - check_sla
        - sla
        - need_retry
    JSONSchema:
      type: object
      properties:
        type:
          type: string
          enum: [ object ]
        properties:
          $ref: '#/components/schemas/JSONSchemaProperties'
        required:
          type: array
          items:
            type: string
      required:
        - type
        - properties
    FormReEnterSettings:
      type: object
      description: Настройки блока при повторном заходе в этот блок
      properties:
        form_executor_type:
          $ref: '#/components/schemas/FormExecutorType'
        value:
          type: string
          description: Executor login, variable or group id
        group_path:
          type: string
          description: path to group id
    JSONSchemaProperties:
      type: object
      description: Представляет из себя набор ключ-значение, где ключ - это название переменной/поля объекта, а значение - это структура, которая описывает переменную(или поле объекта). Причём, если переменная - это объект, тогда должно быть заполнено поле propeties(описание полей). Если переменная - массив, тогда должно быть заполнено поле items(описание типа, который хранится в массиве).
      additionalProperties:
        type: object
        properties:
          title:
            type: string
            description: Title of param
          description:
            type: string
            description: Description of param
          # add enum to validate values of type, not possible now coz bug in codegen
          type:
            type: string
            description: Type of param
          global:
            type: string
            description: Format of param
          format:
            type: string
            description: Format of param
          default:
            oneOf:
              - type: string
              - type: number
              - type: boolean
            description: Default value
          required:
            type: array
            items:
              type: string
            description: Required fields for type = object
          properties:
            $ref: '#/components/schemas/JSONSchemaProperties'
          items:
            $ref: '#/components/schemas/ArrayItems'
          fieldHidden:
            type: boolean
          value:
            type: string
            description: Здесь хранится маппинг переменной, то место, откуда нужно взять значение переменной
            example: form_0.application_body.passport_number
        required:
          - title
          - type
    ArrayItems:
      type: object
      description: Описание типа, который хранится в массиве. Если type = object, тогда поле properties обязательное. Оно нужно для описание конкретного типа объектов, которые хранятся в массиве. Если type = array(многомерный массив у нас то есть), тогда поле items обязательное. Оно описывает тип массивов.
      properties:
        type:
          type: string
          description: Тип элементов массива
        format:
          type: string
        properties:
          $ref: '#/components/schemas/JSONSchemaProperties'
        items:
          $ref: '#/components/schemas/ArrayItems'
      required:
        - type
    EndSystemSettings:
      type: object
      properties:
        microservice_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        URL:
          type: string
        method:
          type: string
          enum: [ "POST" ]
      required:
        - microservice_id
        - URL
        - method
    AllowRunAsOthers:
      type: boolean
      description: Разрешить системе запуск заявки от третьего лица
    SaveApprovalListSettings:
      type: object
      description: Add approval list settings
      properties:
        name:
          type: string
        steps:
          type: array
          items:
            type: string
        context_mapping:
          $ref: '#/components/schemas/JSONSchemaProperties'
        forms_mapping:
          $ref: '#/components/schemas/JSONSchemaProperties'
      required:
        - name
    UpdateApprovalListSettings:
      type: object
      description: Update approval list settings
      properties:
        name:
          type: string
        steps:
          type: array
          items:
            type: string
        context_mapping:
          $ref: '#/components/schemas/JSONSchemaProperties'
        forms_mapping:
          $ref: '#/components/schemas/JSONSchemaProperties'
      required:
        - name
        - steps
        - context_mapping
        - forms_mapping
    RequestExecutionInfoType:
      type: string
      description: Type of execution info
      enum:
        - question
        - answer
    VersionApprovalList:
      type: object
      properties:
        id:
          type: string
        version_id:
          type: string
        name:
          type: string
        steps:
          type: array
          items:
            type: string
          description: названия блоков
        context_mapping:
          $ref: '#/components/schemas/JSONSchemaProperties'
        forms_mapping:
          $ref: '#/components/schemas/JSONSchemaProperties'
      required:
        - id
        - name
        - version_id
        - steps
        - context_mapping
        - forms_mapping
    ResponseVersionApprovalList:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/taskResponseStep'
        context_variables:
          type: object
          description: мапа ключ значение, контекстные переменные
          properties: { }
        forms_variables:
          type: object
          description: мапа ключ значение, переменные форм
          properties: { }
      required:
        - id
        - name
        - steps
        - context_variables
        - forms_variables
    ResponsePipelineSearch:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SearchPipelineItem'
          description: list of pipelines
        total:
          type: integer
      required:
        - items
        - total
    SearchPipelineItem:
      type: object
      properties:
        name:
          type: string
          description: Имя пайплайна
        pipeline_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
          description: ID пайплайна
    UsageResponse:
      type: object
      properties:
        name:
          type: string
          description: Имя блока
        pipelines:
          type: array
          items:
            $ref: '#/components/schemas/UsedBy'
        used:
          type: boolean
      required:
        - name
        - used
        - pipelines
    UsedBy:
      type: object
      properties:
        id:
          type: string
          description: ID сценария
        name:
          type: string
          description: Имя сценария
      required:
        - name
        - id
    RateApplicationRequest:
      type: object
      properties:
        comment:
          type: string
        rate:
          type: integer
    CreateTaskRequest:
      type: object
      required: [ parameters, version_id ]
      properties:
        parameters:
          type: object
          properties: { }
        version_id:
          type: string
          format: uuid
    DebugRunRequest:
      type: object
      required: [ action, break_points, work_number ]
      properties:
        action:
          type: string
          example: step_over,resume
        break_points:
          type: array
          items:
            type: string
        work_number:
          type: string
    RunPipelineBody:
      type: object
    RunVersionBody:
      type: object
    RunVersionsByPipelineIdRequest:
      required: [ application_body, pipeline_id, description, keys, attachment_fields ]
      type: object
      properties:
        application_body:
          type: object
          properties: { }
        pipeline_id:
          type: string
        is_test_application:
          type: boolean
        custom_title:
          type: string
        description:
          type: string
        keys:
          type: object
          additionalProperties:
            type: string
        attachment_fields:
          type: array
          items:
            type: string
    RunNewVersionByPrevVersionRequest:
      required: [ work_number, description, application_body, keys, attachment_fields ]
      type: object
      properties:
        work_number:
          type: string
        description:
          type: string
        application_body:
          type: object
          properties: { }
        keys:
          type: object
          additionalProperties:
            type: string
        attachment_fields:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
    eriusTaskResponse:
      type: object
      properties:
        author:
          type: string
          description: Логин инициатора
        blueprint_id:
          type: string
          description: ID шаблона SD, на основании которого запускалась заявка
        debug:
          type: boolean
          description: Запускалась ли заявка в режиме отладки
        description:
          type: string
          description: Описание заявки (основной текст)
        human_status:
          $ref: '#/components/schemas/taskHumanStatus'
        id:
          type: string
          description: ID заявки
        last_changed_at:
          type: string
          description: Время последнего изменения
        name:
          type: string
          description: Название заявки
        parameters:
          type: object
          description: Параметры заявки
          properties: { }
        started_at:
          type: string
          description: Время начала исполнения заявки
        status:
          type: string
          description: Технический статус заявки
          enum:
            - finished
            - error
            - run
            - stopped
            - created
        steps:
          type: array
          items:
            $ref: '#/components/schemas/taskResponseStep'
        version_id:
          type: string
          description: Версия процесса заявки
        work_number:
          type: string
          description: Номер заявки
        finished_at:
          type: string
          description: Время окончания заявки
        rate:
          type: integer
          description: Оценка для выполненной заявки
        rate_comment:
          type: string
          description: Комментарий к оценке
        available_actions:
          type: array
          description: Доступные действия
          items:
            $ref: '#/components/schemas/action'
        status_comment:
          type: string
          description: Комментарий статуса
        process_deadline:
          type: string
          description: Плановая дата завершения процесса
        approval_list:
          type: object
          properties: { }
          description: мапа листов согласований из настроек сценария
      required:
        - id
        - version_id
        - started_at
        - last_changed_at
        - name
        - description
        - status
        - human_status
        - author
        - debug
        - parameters
        - steps
        - work_number
        - blueprint_id
        - rate
        - rate_comment
        - status_comment
        - process_deadline
        - approval_list
    httpError:
      type: object
      properties:
        description:
          type: string
        error:
          type: string
        status_code:
          type: integer
    taskResponseStep:
      type: object
      properties:
        errors:
          type: array
          description: Массив ошибок
          items:
            type: string
        has_error:
          type: boolean
          description: Была ли ошибка
        is_delegate_of_any_step_member:
          type: boolean
          description: Является ли пользователь, запрашивающий заявку, делегатом кого-либо на этом шаге
        name:
          type: string
          description: Наименование шага
        short_title:
          type: string
          description: Короткое название ноды
        state:
          type: object
          description: Объект состояния
          properties: { }
        status:
          description: Статус шага
          type: string
        steps:
          type: array
          items:
            type: string
        storage:
          type: object
          properties: { }
        time:
          type: string
        updateTime:
          type: string
        type:
          type: string
    action:
      type: object
      properties:
        id:
          type: string
          description: UUID действия
        button_type:
          type: string
          description: Тип отображаемой кнопки (primary, secondary, other, none)
        title:
          type: string
          description: Человекочитаемое наименование действия
        comment_enabled:
          type: boolean
          description: Возможность прикреплять комментарий к действию
        attachments_enabled:
          type: boolean
          description: Возможность прикреплять вложение к действию
        params:
          type: object
          description: Дополнительные параметры действия
          additionalProperties: true
      required:
        - id
        - button_type
        - comment_enabled
        - attachments_enabled
    Attachment:
      type: object
      properties:
        file_id:
          type: string
          description: "Id файла в file registry"
        external_link:
          type: string
          description: "Ссылка на файл в сторонней системе"
    blockType:
      type: string
      description: Block type (language)
      enum:
        - python3
        - go
        - scenario
    FunctionModel:
      type: object
      properties:
        block_type:
          $ref: '#/components/schemas/blockType'
        id:
          type: string
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/FunctionValueModel'
        outputs:
          $ref: '#/components/schemas/JSONSchema'
        params:
          $ref: '#/components/schemas/FunctionParams'
        shape_type:
          type: integer
        sockets:
          type: array
          items:
            $ref: '#/components/schemas/Socket'
        title:
          type: string
      required:
        - block_type
        - title
        - shape_type
        - next_funcs
        - id
        - sockets
    Socket:
      type: object
      description: Socket object
      properties:
        id:
          type: string
          description: Id of socket
        title:
          type: string
          description: User-friendly title of socket for user
        nextBlockIds:
          type: array
          items:
            type: string
          description: IDs of next blocks
        actionType:
          type: string
          enum: [ "primary", "secondary", "other" ]
          description: action type
      required:
        - id
    Params:
      type: object
      description: Block constant params
      oneOf:
        - $ref: '#/components/schemas/ApproverParams'
        - $ref: '#/components/schemas/ExecutionParams'
        - $ref: '#/components/schemas/ExecutableFunctionParams'
        - $ref: '#/components/schemas/SdApplicationParams'
        - $ref: '#/components/schemas/NotificationParams'
        - $ref: "#/components/schemas/ConditionParams"
        - $ref: "#/components/schemas/FormParams"
        - $ref: "#/components/schemas/TimerParams"
        - $ref: "#/components/schemas/PlaceholderParams"
        - $ref: "#/components/schemas/SignParams"
    ConditionGroup:
      type: object
      description: Group with conditions
      properties:
        id:
          type: string
        name:
          type: string
        logicalOperator:
          type: string
          enum: [ "or", "and" ]
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
      required:
        - id
        - logicalOperator
        - conditions
    Condition:
      type: object
      description: Compare operands using operator
      properties:
        leftOperand:
          $ref: '#/components/schemas/operand'
        rightOperand:
          $ref: '#/components/schemas/operand'
        operator:
          oneOf:
            - $ref: '#/components/schemas/compareStringOperator'
            - $ref: '#/components/schemas/compareIntegerOperator'
            - $ref: '#/components/schemas/compareNumberOperator'
            - $ref: '#/components/schemas/compareBooleanOperator'
            - $ref: '#/components/schemas/compareDateOperator'
      required:
        - leftOperand
        - rightOperand
        - operator
    operand:
      description: Operand for comparison
      oneOf:
        - $ref: '#/components/schemas/variableOperand'
        - $ref: '#/components/schemas/valueOperand'
      discriminator:
        propertyName: operandType
        mapping:
          varOperand: variableOperand
          valOperand: valueOperand
    StringOperand:
      type: object
      description: Basic string operand, can provide working compare types for this type
      properties:
        dataType:
          type: string
          enum: [ "integer", "number", "date", "boolean", "string" ]
        operandType:
          type: string
          enum: [ "variableOperand", "valueOperand" ]
      required:
        - dataType
        - operandType
    IntegerOperand:
      type: object
      description: Basic integer operand, can provide working compare types for this type
      properties:
        dataType:
          type: string
          enum: [ "integer", "number", "boolean" ]
        operandType:
          type: string
          enum: [ "variableOperand", "valueOperand" ]
      required:
        - dataType
        - operandType
    NumberOperand:
      type: object
      description: Basic number operand, can provide working compare types for this type
      properties:
        dataType:
          type: string
          enum: [ "integer", "number", "string" ]
        operandType:
          type: string
          enum: [ "variableOperand", "valueOperand" ]
      required:
        - dataType
        - operandType
    BooleanOperand:
      type: object
      description: Basic boolean operand, can provide working compare types for this type
      properties:
        dataType:
          type: string
          enum: [ "integer", "boolean", "string" ]
        operandType:
          type: string
          enum: [ "variableOperand", "valueOperand" ]
      required:
        - dataType
        - operandType
    DateOperand:
      type: object
      description: Basic date operand, can provide working compare types for this type
      properties:
        dataType:
          type: string
          enum: [ "date", "string" ]
        operandType:
          type: string
          enum: [ "variableOperand", "valueOperand" ]
      required:
        - dataType
        - operandType
    variableOperand:
      description: Operand which uses variable to compare in conditions. You can use for accessing object variable members (i.e. "applicationData", "applicationData.comment"), required one Operand
      allOf:
        - type: object
          properties:
            variableRef:
              type: string
          required:
            - variableRef
        - oneOf:
            - $ref: '#/components/schemas/StringOperand'
            - $ref: '#/components/schemas/IntegerOperand'
            - $ref: '#/components/schemas/NumberOperand'
            - $ref: '#/components/schemas/BooleanOperand'
            - $ref: '#/components/schemas/DateOperand'
    valueOperand:
      description: Operand which uses simple value to compare in conditions, required one Operand
      allOf:
        - type: object
          properties:
            value:
              type: string
          required:
            - value
        - oneOf:
            - $ref: '#/components/schemas/StringOperand'
            - $ref: '#/components/schemas/IntegerOperand'
            - $ref: '#/components/schemas/NumberOperand'
            - $ref: '#/components/schemas/BooleanOperand'
            - $ref: '#/components/schemas/DateOperand'
    compareStringOperator:
      type: string
      description: Used operator to compare string operands
      enum: [ "Равно", "Не равно", "Содержит", "Не Содержит", "Не Пустое", "Пустое" ]
      x-enum-varnames: [ "Equal", "NotEqual", "Contain", "NotContain", "Exists", "NotExists" ]
    compareIntegerOperator:
      type: string
      description: Used operator to compare integer operands
      enum: [ "Равно", "Не равно", "Больше", "Больше или равно", "Меньше", "Меньше или равно", "Не Пустое", "Пустое" ]
      x-enum-varnames: [ "Equal", "NotEqual", "More", "MoreOrEqual", "Less", "LessOrEqual", "Exists", "NotExists" ]
    compareNumberOperator:
      type: string
      description: Used operator to compare number operands
      enum: [ "Равно", "Не равно", "Больше", "Больше или равно", "Меньше", "Меньше или равно", "Не Пустое", "Пустое" ]
      x-enum-varnames: [ "Equal", "NotEqual", "More", "MoreOrEqual", "Less", "LessOrEqual", "Exists", "NotExists" ]
    compareBooleanOperator:
      type: string
      description: Used operator to compare bool operands
      enum: [ "Равно", "Не равно", "Не Пустое", "Пустое" ]
      x-enum-varnames: [ "Equal", "NotEqual", "Exists", "NotExists" ]
    compareDateOperator:
      type: string
      description: Used operator to compare date operands
      enum: [ "Равно", "Не равно", "Больше", "Больше или равно", "Меньше", "Меньше или равно", "Не Пустое", "Пустое" ]
      x-enum-varnames: [ "Equal", "NotEqual", "More", "MoreOrEqual", "Less", "LessOrEqual", "Exists", "NotExists" ]
    ConditionParams:
      type: object
      description: Condition params
      properties:
        conditionGroups:
          type: array
          description: Groups with conditions
          items:
            $ref: '#/components/schemas/ConditionGroup'
    NotificationParams:
      type: object
      description: Notification params
      properties:
        people:
          type: array
          description: People to get notifications
          items:
            type: string
            description: Logins
        emails:
          type: array
          description: Emails to get notifications
          items:
            type: string
            description: Emails
        usersFromSchema:
          type: string
          description: UsersFromSchema to get notifications
          example: form_0.UserFromSchema.username;form_1.UserFromSchema.username (format for many signers from schema)
        subject:
          type: string
          description: Notification subject
        text:
          type: string
          description: либо текст если своё значение либо путь к переменной если textSourceType = context
        textSourceType:
          type: string
          enum: [ field, context ]
          description: context для переменной из контекста, field для своего значения
          default: field
      required:
        - people
        - emails
        - usersFromSchema
        - subject
        - text
    SdApplicationParams:
      type: object
      description: SD Application params
      properties:
        blueprint_id:
          type: string
          description: Template application ID
      required:
        - blueprint_id
    ExecutionParams:
      type: object
      description: Execution params
      properties:
        type:
          type: string
          enum:
            - user
            - group
            - from_schema
          description: >
            Execution type:

             * user - Single user
             * group - Execution group ID
             * from_schema - Selected by initiator
        executors:
          type: string
          description: Executor value (depends on type)
          example: form_0.user.username;form_1.user.username (format for many executors from schema)
        sla:
          type: integer
          description: Execution SLA (in working hours)
          minimum: 1
        check_sla:
          type: boolean
          description: Is active SLA
        rework_sla:
          type: integer
          description: Execution rework SLA (in working hours)
          minimum: 16
        check_rework_sla:
          type: boolean
          description: Is rework SLA active
        forms_accessibility:
          type: array
          description: List of accessibility properties for forms
          items:
            $ref: '#/components/schemas/FormsAccessibility'
        executors_group_id:
          type: string
          description: Executors group id in SD
        executors_group_name:
          type: string
          description: Executors group name in SD
        executors_group_id_path:
          type: string
          description: Path to executors group id
        repeat_prev_decision:
          type: boolean
          description: auto apply prev decision
        is_editable:
          type: boolean
          description: Show action edit application in SD
        use_actual_executor:
          type: boolean
          description: flag to use actual executor
        work_type:
          $ref: "#/components/schemas/WorkType"
        hide_executor:
          type: boolean
          description: flag to show executor
      required:
        - type
        - executors
        - sla
        - check_sla
        - rework_sla
        - check_rework_sla
        - executors_group_id
        - executors_group_name
        - repeat_prev_decision
        - is_editable
        - use_actual_executor
    PlaceholderParams:
      type: object
      description: Placeholder block params
      properties:
        name:
          type: string
          description: New task name
        description:
          type: string
          description: New task description
      required:
        - name
        - description
    FormParams:
      type: object
      description: Form params
      properties:
        form_executor_type:
          $ref: '#/components/schemas/FormExecutorType'
        executor:
          type: string
          description: Executor value
        schema_id:
          type: string
          description: form template id
        sla:
          type: integer
          description: form sla
          minimum: 1
        check_sla:
          type: boolean
          description: Is active SLA
        forms_accessibility:
          type: array
          description: List of accessibility properties for forms
          items:
            $ref: '#/components/schemas/FormsAccessibility'
        hide_executor_from_initiator:
          type: boolean
          description: Hide executor from initiator
        mapping:
          $ref: '#/components/schemas/JSONSchemaProperties'
        form_group_id:
          type: string
          description: Form group id in SD
        full_form_mapping:
          type: string
          description: 'Object address for object mapping'
        form_group_id_path:
          type: string
          description: Path to form group id
        constants:
          type: object
          description: Constant values for function parameters (key of object is variable name)
        work_type:
          $ref: "#/components/schemas/WorkType"
        is_editable:
          type: boolean
          description: true - need manual fill when reenter in block
        check_required_fill:
          type: boolean
          description: true - if you need to set required fill fields in form (for auto fill)
        form_re_enter_settings:
          $ref: '#/components/schemas/FormReEnterSettings'
      required:
        - sla
        - check_sla
        - blueprint_id
        - blueprint_name
        - hide_executor_from_initiator
        - is_editable
        - constants
    FormExecutorType:
      type: string
      enum:
        - user
        - group
        - initiator
        - from_schema
        - auto_fill
      description: >
        Form executor type:

          * User - Single user
          * group - Form group ID
          * Initiator - Process initiator
          * From_schema - Selected by initiator
          * Auto_Fill - Auto Fill form by system
    ApproverType:
      type: string
      enum:
        - user
        - group
        - head
        - fromSchema
      description: >
        Approver type:

          * user - Single user
          * group - Approver group ID
          * head - Receiver's head
          * FromSchema - Selected by initiator
    SignerType:
      type: string
      enum:
        - user
        - group
        - fromSchema
      description: >
        Signer type:

          * user - Single user
          * group - Group ID
          * FromSchema - Selected by initiator
    SignatureType:
      type: string
      enum:
        - pep
        - unep
        - ukep
    TimerParams:
      type: object
      description: Timer params
      properties:
        duration:
          type: string
          description: duration for timer
      required:
        - duration
    SignatureCarrier:
      type: string
      enum:
        - all
        - cloud
        - token
    SignatureCarrierTranslated:
      type: string
      enum: [ "Все", "Облачный", "Токен" ]
      x-enum-varnames: [ "all", "cloud", "token" ]
    SigningParams:
      type: object
      properties:
        inn:
          description: Path to inn in context
          example: form_0.application_body.inn
          type: string
        snils:
          description: Path to snils in context
          example: form_0.application_body.snils
          type: string
        files:
          description: Paths to files in context
          type: array
          items:
            type: string
            example: form_0.application_body.file
    SignParams:
      type: object
      description: Signature params
      properties:
        signerType:
          $ref: '#/components/schemas/SignerType'
        signer:
          type: string
          description: Signer value (depends on type)
          example: form_0.user.username;form_1.user.username (format for many signers from schema)
        signerGroupId:
          type: string
          description: Singer group id in SD
        signerGroupName:
          type: string
          description: Signer group name in SD
        signerGroupIdPath:
          type: string
          description: Path to singer group id
        signatureCarrier:
          $ref: '#/components/schemas/SignatureCarrier'
        signingRule:
          $ref: '#/components/schemas/SigningRule'
        signingParams:
          $ref: '#/components/schemas/SigningParams'
        signatureType:
          $ref: '#/components/schemas/SignatureType'
        formsAccessibility:
          type: array
          description: List of accessibility properties for forms
          items:
            $ref: '#/components/schemas/FormsAccessibility'
        sla:
          type: integer
          description: Sign SLA (in working hours)
          minimum: 1
        checkSLA:
          type: boolean
          description: Is active SLA
        autoReject:
          type: boolean
          description: reject after expire sla
        workType:
          $ref: "#/components/schemas/WorkType"
      required:
        - signerType
        - signatureType
        - formsAccessibility
    ApproverParams:
      type: object
      description: Approver params
      properties:
        type:
          $ref: '#/components/schemas/ApproverType'
        approver:
          type: string
          description: Approver value (depends on type)
          example: form_0.user.username;form_1.user.username (format for many approvers from schema)
        approvementRule:
          $ref: '#/components/schemas/ApprovementRule'
        forms_accessibility:
          type: array
          description: List of accessibility properties for forms
          items:
            $ref: '#/components/schemas/FormsAccessibility'
        sla:
          type: integer
          description: Approvement SLA (in working hours)
          minimum: 1
        check_sla:
          type: boolean
          description: Is active SLA
        rework_sla:
          type: integer
          description: Approvement rework SLA (in working hours)
          minimum: 16
        check_rework_sla:
          type: boolean
          description: Is rework SLA active
        auto_action:
          type: string
          description: Auto action to do (from action list)
        repeat_prev_decision:
          type: boolean
        is_editable:
          type: boolean
          description: Show action edit application in SD
        approvers_group_id:
          type: string
          description: Approvers group id in SD
        approvers_group_name:
          type: string
          description: Approvers group name in SD
        approvers_group_id_path:
          type: string
          description: Path to approvers group id
        approve_status_name:
          type: string
          description: Approvement status
        work_type:
          $ref: "#/components/schemas/WorkType"
      required:
        - type
        - approver
        - sla
        - check_sla
        - rework_sla
        - check_rework_sla
        - repeat_prev_decision
        - is_editable
        - approvers_group_id
        - approvers_group_name
        - approve_status_name
    FormsChangelogResponse:
      type: array
      items:
        $ref: '#/components/schemas/FormChangelogItem'
      description: Changelog of filled form data
    FormChangelogItem:
      type: object
      properties:
        schema_id:
          type: string
          description: id of form schema id
        application_body:
          type: object
          properties: { }
          description: Filled form values
        description:
          type: string
          description: Compiled field keys and values of form used for notifications
        created_at:
          type: string
          description: Date of log item creation
        executor:
          type: string
          description: Login of form executor
    FormsAccessibility:
      type: object
      properties:
        node_id:
          type: string
          description: Form node ID
        name:
          type: string
          description: Form name
        description:
          type: string
          description: Form short description
        accessType:
          $ref: '#/components/schemas/FormAccessType'
      required:
        - node_id
        - name
        - accessType
    FormAccessType:
      type: string
      enum:
        - None
        - Read
        - ReadWrite
        - RequiredFill
      description: Form accessibility preferences for certain node
    FormAccessTypeTranslated:
      type: string
      enum: [ "Скрыть", "Только для чтения", "Чтение и редактирование", "Обязательное заполнение" ]
      x-enum-varnames: [ 'None', 'Read', 'ReadWrite', 'RequiredFill' ]
      description: Form accessibility preferences for certain node (translated)
    ApprovementRule:
      type: string
      enum:
        - AnyOf
        - AllOf
      description: Count of approvers which will participate in approvement will depends of approvement type. 'Any of' will check only first approvement action, when 'all of' will be waiting for all approvers or auto actions.
    SigningRule:
      type: string
      enum:
        - AnyOf
        - AllOf
      description: Count of singers which will participate in signing will depends of signing type. 'Any of' will check only first sign action, when 'all of' will be waiting for all signers.
    SigningRuleTranslated:
      type: string
      enum: [ "Один из подписантов", "Все подписанты" ]
      x-enum-varnames: [ 'AnyOf', 'AllOf' ]
      description: Count of signers which will participate in signing will depends of signing type. 'Any of' will check only first signing action, when 'all of' will be waiting for all signers.
    ApprovementRuleTranslated:
      type: string
      enum: [ "Один из согласующих", "Все согласующие" ]
      x-enum-varnames: [ 'AnyOf', 'AllOf' ]
      description: Count of approvers which will participate in approvement will depends of approvement type. 'Any of' will check only first approvement action, when 'all of' will be waiting for all approvers or auto actions (translated).
    FunctionParams:
      type: object
      properties:
        type:
          type: string
          description: Params type
          enum:
            - approver
            - servicedesk_application
            - execution
            - executable_function
            - notification
            - form
            - if
            - placeholder
            - timer
            - sign
        params:
          $ref: '#/components/schemas/Params'
      required:
        - type
    FunctionValueModel:
      type: object
      properties:
        comment:
          type: string
        name:
          type: string
        type:
          type: string
    ShapeEntity:
      type: object
      properties:
        icon:
          type: string
        id:
          type: integer
        title:
          type: string
      required:
        - id
        - title
        - icon
    Created:
      type: object
      properties:
        start:
          type: integer
        end:
          type: integer
      required:
        - start
        - end
    httpResponse:
      type: object
      properties:
        data:
          type: object
          properties: { }
        status_code:
          type: integer
      required:
        - status_code
    MonitoringTaskActionRequest:
      type: object
      properties:
        action:
          type: string
          enum:
            - pause
            - start
            - startByOne
            - edit
          description: "Действия с заявкой"
        params:
          $ref: '#/components/schemas/MonitoringTaskActionParams'
      required:
        - work_number
        - action

    MonitoringTaskActionParams:
      type: object
      description: "Параметры действия"
      properties:
        change_type:
          type: string
          description: "Что редактировалось 'Контекст', 'Состояние', 'Output'"
        data:
          type: object
          description: "Данные которые редактировались"
        steps:
          type: array
          description: "ID блоков"
          items:
            type: string

    MonitoringTaskUpdateBlockRequest:
      type: object
      properties:
        change_type:
          type: string
          enum: [ "state", "output", "context"]
          description: "Переменные в какой части блока редактируем"
        change_data:
          type: object
          description: Стейт блока
          additionalProperties:
            $ref: '#/components/schemas/MonitoringEditBlockData'
      required:
        - change_type
        - change_data

    MonitoringUpdateBlockInputsRequest:
      type: object
      properties:
        work_id:
          type: string
          description: "uuid таски"
        step_name:
          type: string
          description: "Имя блока"
          example: "approver_0"
        inputs:
          type: object
          description: "Мапа инпутов"
          additionalProperties:
            $ref: '#/components/schemas/MonitoringEditBlockData'
      required:
        - work_id
        - step_name
        - inputs

    MonitoringTask:
      type: object
      properties:
        version_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
          description: "Айди версии сценария для мониторинга"
        work_number:
          type: string
          description: "Номер заявки для мониторинга"
        work_id:
          type: string
          description: "UUID заявки"
        is_finished:
          type: boolean
          description: "Признак завершенности"
        scenario_info:
          $ref: '#/components/schemas/MonitoringScenarioInfo'
        history:
          type: array
          items:
            $ref: '#/components/schemas/MonitoringHistory'
        is_paused:
          type: boolean
          description: "Флаг паузы процесса"
        task_runs:
          type: array
          items:
            $ref: '#/components/schemas/MonitoringTaskRun'
      required:
        - version_id
        - work_id
        - work_number
        - scenario_info
        - history
        - is_paused
        - task_runs
        - is_finished

    MonitoringTaskEvents:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/MonitoringTaskEvent'
      required:
        - events

    MonitoringTaskEvent:
      type: object
      properties:
        id:
          type: string
          description: "id ивента"
        run_index:
          type: integer
          description: "номер запуска (старт - пауза) в котором произошел этот ивент"
        author:
          type: string
          description: "имя автора ивента"
        event_type:
          type: string
          enum:
            - pause
            - start
            - startByOne
            - edit
          description: "тип ивента"
        params:
          $ref: '#/components/schemas/MonitoringTaskActionParams'
        created_at:
          type: string
          format: 'date-time'
          example: 2020-07-16T17:10:25.112704+03:00
      required:
        - id
        - run_index
        - author
        - event_type
        - params
        - created_at

    MonitoringTaskRun:
      type: object
      properties:
        start_event_id:
          type: string
          format: uuid
          description: "Айди ивента старта таски"
        end_event_id:
          type: string
          format: uuid
          description: "Айди ивента паузы таски"
        start_event_at:
          type: string
          format: 'date-time'
          description: "Дата старта"
        end_event_at:
          type: string
          format: 'date-time'
          description: "Дата паузы"
        index:
          type: integer
          description: "Порядковый номер пары ивентов старт - пауза"
      required:
        - start_event_id
        - end_event_id
        - start_event_at
        - end_event_at
        - index

    MonitoringHistory:
      type: object
      properties:
        block_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
          description: "Айди ноды в variable_storage"
        status:
          type: string
          enum: [ "running", "finished" ]
          description: "Статус ноды"
        node_id:
          type: string
          description: "id ноды в заявке"
        real_name:
          type: string
          description: "читаемое имя ноды"
        block_date_init:
          type: string
          description: "Время перехода на конкретный блок"
          example: "2020-07-16T17:10:25.112704+03:00"
        is_paused:
          type: boolean
          description: "Флаг паузы блока"
      required:
        - node_id
        - status
        - block_id
        - real_name
        - is_paused
    MonitoringScenarioInfo:
      type: object
      properties:
        scenario_name:
          type: string
          description: "Имя сценария"
        creation_time:
          type: string
          description: "Время создания сценария"
        author:
          type: string
          description: "Автор сценария"
      required:
        - scenario_name
        - creation_time
        - author
    BlockContextResponse:
      type: object
      properties:
        while_running:
          type: object
          description: Ноды
          additionalProperties:
            $ref: '#/components/schemas/MonitoringBlockOutput'
        edited:
          type: object
          description: Отредактированны ноды
          additionalProperties:
            $ref: '#/components/schemas/MonitoringBlockOutput'
    BlockStateResponse:
      type: object
      properties:
        while_running:
          type: object
          description: Стейт блока
          additionalProperties:
            $ref: '#/components/schemas/MonitoringBlockState'
        edited:
          type: object
          description: Отредактированный стейт блока
          additionalProperties:
            $ref: '#/components/schemas/MonitoringBlockState'
    BlockErrorResponse:
      type: object
      properties:        
        url:
          type: string
          description: Ссылка на OpenSearch
        description:
          type: string
          description: Описание способа просмотра ошибок
      required:
        - description
        - url
    MonitoringBlockOutput:
      type: object
      properties:
        name:
          type: string
          description: Имя поля
        type:
          type: string
          description: Тип поля
        description:
          type: string
          description: Описание поля
        value:
          oneOf:
            - type: string
            - type: number
            - type: integer
            - type: array
            - type: object
            - type: boolean
          description: Значение поля
      required:
        - name
        - type
        - description
        - value
    MonitoringBlockState:
      type: object
      properties:
        name:
          type: string
          description: Имя поля
        type:
          type: string
          description: Тип поля
        description:
          type: string
          description: Описание поля
        value:
          oneOf:
            - type: string
            - type: number
            - type: integer
            - type: array
            - type: object
            - type: boolean
          description: Значение поля
      required:
        - name
        - type
        - description
        - value      
    MonitoringInputsResponse:
      type: object
      properties:
        started_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        finished_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        while_running:
          type: object
          description: Входные параметы с которыми запускался блок
          additionalProperties:
            $ref: '#/components/schemas/MonitoringBlockParam'
        edited:
          type: object
          description: Входные параметы которые были изменены
          additionalProperties:
            $ref: '#/components/schemas/MonitoringBlockParam'
    MonitoringOutputsResponse:
      type: object
      properties:
        started_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        finished_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        while_running:
          type: object
          description: Выходные параметы
          additionalProperties:
            $ref: '#/components/schemas/MonitoringBlockParam'
        edited:
          type: object
          description: Выходные параметы
          additionalProperties:
            $ref: '#/components/schemas/MonitoringBlockParam'
    MonitoringBlockParam:
      type: object
      properties:
        name:
          type: string
          description: Имя поля
        type:
          type: string
          description: Тип поля
        description:
          type: string
          description: Описание поля
        value:
          oneOf:
            - type: string
            - type: number
            - type: integer
            - type: array
            - type: object
            - type: boolean
          description: Значение поля
      required:
        - name
        - type
        - description
        - value
    BlockEditResponse:
      type: object
      properties:
        blocks:
          type: object
          description: Ноды
          additionalProperties:
            $ref: '#/components/schemas/MonitoringEditBlockData'
    MonitoringEditBlockData:
      type: object
      properties:
        name:
          type: string
          description: Имя поля
        type:
          type: string
          description: Тип поля
        description:
          type: string
          description: Описание поля
        value:
          oneOf:
            - type: string
            - type: number
            - type: integer
            - type: array
            - type: object
            - type: boolean
          description: Значение поля
      required:
        - name
        - type
        - description
        - value
        -
    NameExists:
      type: object
      properties:
        exists:
          type: boolean
          description: Существует ли имя
      required:
        - exists
    WorkType:
      type: string
      description: Рабочий режим
      enum:
        - 24/7
        - 8/5
        - 12/5
    NodeDecision:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "5547e7a4-338d-4b1a-b7c2-d0a7ef7fe063"
          description: "Айди решения нод"
        node_type:
          type: string
          description: "Тип ноды"
        decision:
          type: string
          description: "Название решения"
        title:
          type: string
          description: "Название решения на русском"
      required:
        - id
        - node_type
        - decision
        - title