openapi: 3.0.1
info:
  title: Pipeliner API
  contact: {}
  version: "0.1"
servers:
  - url: //localhost:8181/api/pipeliner/v1
paths:
  /debug/:
    post:
      tags:
        - debug
      summary: Create debug task
      description: Создать сессию отладки
      operationId: create-debug-task
      requestBody:
        description: New debug task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTask'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: debug
  /debug/{workNumber}:
    get:
      tags:
        - tasks
      summary: Debug task
      description: Получить debug-задачу
      operationId: debug-task
      parameters:
        - name: workNumber
          in: path
          description: work number
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DebugResult'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /debug/run:
    post:
      tags:
        - debug
      summary: Start debug task
      description: Начать отладку
      operationId: start-debug-task
      requestBody:
        description: debug request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DebugRunRequest'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTask'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /modules:
    get:
      tags:
        - modules
      summary: Get list of modules
      description: Список блоков
      operationId: get-modules
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusFunctionList'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /modules/{moduleName}/usage:
    get:
      tags:
        - modules
      summary: Usage of module in pipelines
      description: Сценарии, в которых используется блок
      operationId: module-usage
      parameters:
        - name: moduleName
          in: path
          description: module name
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UsageResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /modules/usage:
    get:
      tags:
        - modules
      summary: Get list of modules usage
      description: Блоки и сценарии, в которых они используются
      operationId: all-modules-usage
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AllUsageResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines:
    get:
      tags:
        - pipeline
      summary: Get list of pipelines
      description: Список сценариев
      operationId: list-pipelines
      parameters:
        - name: my
          in: query
          description: Show my pipelines only
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenarioList'
                  status_code:
                    type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    post:
      tags:
        - pipeline
      summary: Create pipeline
      description: Создать новый сценарий
      operationId: create-pipeline
      requestBody:
        description: New scenario
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusScenario'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: pipeline
  /pipelines/{pipelineID}:
    get:
      tags:
        - pipeline
      summary: Get pipeline
      description: Получить сценарий по ID
      operationId: get-pipeline
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    delete:
      tags:
        - pipeline
      summary: Delete Pipeline
      description: Удалить сценарий
      operationId: delete-pipeline
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'

  /pipelines/{pipelineID}/versions:
    get:
      tags:
        - pipeline
      summary: Get pipeline versions
      description: Получить все версии сценария по ID
      operationId: get-pipeline-versions
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ScenarioVersionInfoList'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'

  /pipelines/{pipelineID}/scheduler-tasks:
    post:
      tags:
        - pipeline
      summary: Active scheduler tasks
      description: Наличие у сценария активных заданий в шедулере
      operationId: list-scheduler-tasks
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SchedulerTasksResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/{pipelineID}/tags:
    get:
      tags:
        - pipeline
        - tags
      summary: Get Pipeline Tags
      description: Список тегов сценария
      operationId: get-pipeline-tags
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EriusTagInfo'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/{pipelineID}/tags/{ID}:
    put:
      tags:
        - pipeline
        - tags
      summary: Attach Tag
      description: Прикрепить тег к сценарию
      operationId: attach-tag
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: ID
          in: path
          description: Tag ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTagInfo'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    delete:
      tags:
        - pipeline
        - tags
      summary: Detach Tag
      description: Открепить тег от сценария
      operationId: detach-tag
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
        - name: ID
          in: path
          description: Tag ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'

  /pipelines/copy:
    post:
      tags:
        - pipeline
      summary: Creates copy of pipeline
      description: Создать собственную копию процесса
      operationId: copy-pipeline
      requestBody:
        description: Version body to copy
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusScenario'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'

  /pipelines/version:
    put:
      tags:
        - pipeline
      summary: Edit Draft
      description: Изменить черновик
      operationId: edit-version
      requestBody:
        description: New draft
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusScenario'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: draft
  /pipelines/version/{ID}:
    get:
      tags:
        - version
      summary: Get pipeline version
      description: Получить версию сценария по ID
      operationId: get-pipeline-version
      parameters:
        - name: ID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    post:
      tags:
        - version
      summary: Create pipeline version
      description: Создать новую версию сценария
      operationId: create-pipeline-version
      parameters:
        - name: ID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      requestBody:
        description: New version
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusScenario'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusScenario'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: pipeline
    delete:
      tags:
        - version
      summary: Delete Version
      description: Удалить версию
      operationId: delete-version
      parameters:
        - name: ID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /pipelines/name:
    put:
      tags:
        - pipeline
      summary: Rename Pipeline
      description: Изменить имя черновика
      operationId: rename-pipeline
      requestBody:
        description: New name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pipelineRename'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: draft
  /run/{pipelineID}:
    post:
      tags:
        - pipeline
        - run
      summary: Run Pipeline
      description: Запустить сценарий
      operationId: run-pipeline
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      requestBody:
        description: pipeline input
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunPipelineBody'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RunResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /run/version/{versionID}:
    post:
      tags:
        - version
        - run
      summary: Run Version
      description: Запустить версию
      operationId: run-version
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      requestBody:
        description: pipeline input
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunVersionBody'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RunResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /run/versions/blueprint_id:
    post:
      tags:
        - version
        - run
      summary: Run Version By blueprintID
      description: Запустить все версии c blueprintID и первым блоком sd_application
      operationId: run-versions-by-blueprint-id
      requestBody:
        description: pipeline input
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunVersionsByBlueprintIdRequest'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RunResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /run/version/new_version:
    post:
      tags:
        - version
        - run
      summary: Run Version
      description: Запустить версию
      operationId: run-new-version-by-prev-version
      requestBody:
        description: pipeline input
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunNewVersionByPrevVersionRequest'
        required: false
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: variables
  /tags:
    get:
      tags:
        - tags
      summary: Get Tags
      description: Cписок тегов
      operationId: get-tags
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EriusTagInfo'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    put:
      tags:
        - tags
      summary: Edit Tag
      description: Изменить тег
      operationId: edit-tag
      requestBody:
        description: Modified tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusTagInfo'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTagInfo'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: tag
    post:
      tags:
        - tags
      summary: Create Tag
      description: Создать новый тег
      operationId: create-tag
      requestBody:
        description: New tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EriusTagInfo'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTagInfo'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: tag
  /tags/{ID}:
    delete:
      tags:
        - tags
      summary: Remove Tag
      description: Удалить тег
      operationId: remove-tag
      parameters:
        - name: ID
          in: path
          description: Tag ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks:
    get:
      tags:
        - pipeline
        - tasks
      summary: Get Tasks
      description: Получить задачи
      operationId: get-tasks
      parameters:
        - name: name
          in: query
          description: Pipeline name
          schema:
            type: string
        - name: taskIDs
          in: query
          description: Task IDs
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: order
          in: query
          description: Order
          schema:
            type: string
        - name: limit
          in: query
          description: Limit
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Offset
          schema:
            type: integer
            default: 0
        - name: created
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Created'
        - name: archived
          in: query
          schema:
            type: boolean
        - name: selectAs
          in: query
          schema:
            type: string
        - name: forCarousel
          in: query
          schema:
            type: boolean
          description: get tasks with status wait or done
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTasksPage'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/{workNumber}:
    get:
      tags:
        - tasks
      summary: Get Task
      description: Получить экземпляр задачи
      operationId: get-task
      parameters:
        - name: workNumber
          in: path
          description: work number
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/eriusTaskResponse'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
    post:
      tags:
        - tasks
      summary: Update Task
      description: Update task
      operationId: update-task
      parameters:
        - name: workNumber
          in: path
          description: work number
          required: true
          schema:
            type: string
      requestBody:
        description: Task update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
      x-codegen-request-body-name: data
  /tasks/count:
    get:
      tags:
        - pipeline
        - tasks
      summary: Get amount of tasks
      description: Получить количество задач по каждой категории
      operationId: get-tasks-count
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CountTasks'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/last-by-version/{versionID}:
    get:
      tags:
        - tasks
      summary: Get last debug task for version
      description: Получить последнюю debug-задачу версии сценария
      operationId: last-version-debug-task
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTask'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/pipeline/{pipelineID}:
    get:
      tags:
        - pipeline
        - tasks
      summary: Get Pipeline Tasks
      description: Получить задачи по сценарию
      operationId: get-pipeline-tasks
      parameters:
        - name: pipelineID
          in: path
          description: Pipeline ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTasks'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
  /tasks/version/{versionID}:
    get:
      tags:
        - version
        - tasks
      summary: Get Version Tasks
      description: Получить задачи по версии сценарию
      operationId: get-version-tasks
      parameters:
        - name: versionID
          in: path
          description: Version ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EriusTasks'
                  status_code:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpError'
components:
  schemas:
    AllUsageResponse:
      type: object
      properties:
        pipelines:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - pipelines

    CountTasks:
      type: object
      properties:
        active:
          type: integer
        approve:
          type: integer
        execute:
          type: integer
      required:
        - active
        - approve
        - execute

    DebugResult:
      type: object
      properties:
        block_name:
          type: string
        break_points:
          type: array
          items:
            type: string
        status:
          type: string
          description: todo define values
          example: run,error,finished,created
        task:
          $ref: '#/components/schemas/EriusTask'
      required:
        - block_name
        - status
        - break_points
        - task

    EriusFunc:
      type: object
      properties:
        block_type:
          $ref: '#/components/schemas/blockType'
        input:
          type: array
          items:
            $ref: '#/components/schemas/EriusFunctionValue'
        next:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        sockets:
          type: array
          items:
            $ref: '#/components/schemas/Socket'
        output:
          type: array
          items:
            $ref: '#/components/schemas/EriusFunctionValue'
        param_type:
          type: string
        params:
          type: object
          properties: {}
        short_title:
          type: string
          example: lock-bts
        title:
          type: string
          example: lock-bts
        type_id:
          type: string
          example: approver
        x:
          type: integer
        y:
          type: integer
      required:
        - type_id
        - block_type
        - title
        - next

    EriusFunctionList:
      type: object
      properties:
        funcs:
          type: array
          description: Block modules
          items:
            $ref: '#/components/schemas/FunctionModel'
        shapes:
          type: array
          description: Block shapes
          items:
            $ref: '#/components/schemas/ShapeEntity'
      required:
        - funcs
        - shapes

    EriusFunctionValue:
      type: object
      properties:
        global:
          type: string
          example: block.some_data
        name:
          type: string
          example: some_data
        type:
          type: string
          example: string
      required:
        - name
        - type
        - global

    pipeline:
      type: object
      properties:
        blocks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EriusFunc'
        entrypoint:
          type: string
      required:
        - entrypoint
        - blocks
    pipelineRename:
      type: object
      properties:
        name:
          type: string
          description: Новое имя сценария
        id:
          type: string
          description: ID сценария для переименования
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
      required:
        - name
        - id
    EriusScenario:
      type: object
      description: A single scenario with all content
      properties:
        approved_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        author:
          type: string
          example: testAuthor
        comment:
          type: string
        comment_rejected:
          type: string
        created_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        hasDraft:
          type: boolean
        id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        input:
          type: array
          items:
            $ref: '#/components/schemas/EriusFunctionValue'
        name:
          type: string
          example: ScenarioName
        output:
          type: array
          items:
            $ref: '#/components/schemas/EriusFunctionValue'
        pipeline:
          $ref: '#/components/schemas/pipeline'
        status:
          type: integer
          description: 1 - Draft, 2 - Approved, 3 - Deleted, 4 - Rejected, 5 - On
            Approve
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EriusTagInfo'
        version_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
      required:
        - id
        - version_id
        - status
        - name
        - pipeline
        - author
        - tags
        - comment
        - comment_rejected

    ScenarioVersionInfoList:
      type: array
      items:
        $ref: '#/components/schemas/EriusVersionInfo'

    EriusScenarioInfo:
      type: object
      properties:
        approved_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        approver:
          type: string
          example: testApprover
        author:
          type: string
          example: testAuthor
        comment:
          type: string
        comment_rejected:
          type: string
        created_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        last_run:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        last_run_status:
          type: string
        name:
          type: string
          example: ScenarioName
        status:
          $ref: '#/components/schemas/scenarioStatus'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/EriusTagInfo'
        version_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2

      required:
        - id
        - version_id
        - created_at
        - author
        - approver
        - name
        - tags
        - status
        - comment
        - comment_rejected

    EriusScenarioList:
      type: array
      items:
        $ref: '#/components/schemas/EriusScenarioInfo'

    EriusTagInfo:
      type: object
      required: [id,name,status,color,isMarker]
      properties:
        color:
          type: string
        id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        isMarker:
          type: boolean
        name:
          type: string
        status:
          type: integer
          description: 1 - Created, 3 - Deleted

    taskHumanStatus:
      type: string
      description: Task human readable status
      enum:
        - new
        - approvement
        - approved
        - done

    EriusTask:
      type: object
      properties:
        author:
          type: string
        blueprint_id:
          type: string
        debug:
          type: boolean
        description:
          type: string
        human_status:
          $ref: '#/components/schemas/taskHumanStatus'
        id:
          type: string
        last_changed_at:
          type: string
        name:
          type: string
        parameters:
          type: object
          properties: {}
        started_at:
          type: string
        status:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Step'
        version_id:
          type: string
        work_number:
          type: string
      required:
        - id
        - version_id
        - started_at
        - last_changed_at
        - name
        - description
        - status
        - human_status
        - author
        - debug
        - parameters
        - steps
        - work_number
        - blueprint_id

    EriusTasks:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/EriusTask'
    EriusTasksPage:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/EriusTask'
        total:
          type: integer
      required:
        - tasks
        - total

    EriusVersionInfo:
      type: object
      properties:
        version_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        approved_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        approver:
          type: string
          example: testApprover
        author:
          type: string
          example: testAuthor
        created_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        updated_at:
          type: string
          example: 2020-07-16T17:10:25.112704+03:00
        usage_count:
          type: integer
          description: How many times is the version used as a subprocess
        is_actual:
          type: boolean
          description: If the version is currently used as an actual one
        status:
          $ref: '#/components/schemas/scenarioStatus'
      required:
        - version_id
        - approved_at
        - author
        - created_at
        - updated_at
        - usage_count
        - is_actual
        - status

    scenarioStatus:
      type: integer
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
      description: >
        Tag status:
         * 1 - Draft
         * 2 - Approved
         * 3 - Deleted
         * 4 - Rejected
         * 5 - On approve
    sendEditAppUpdateParams:
      type: object
      description: Send application to edit from approver
      properties:
        comment:
          type: string
          description: Comment from approver
        attachments:
          type: array
          items:
            type: string
      required:
        - comment
        - attachments
    createNewWorkUpdateParams:
      type: object
      description: Send edited application to new process
    RunResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        output:
          type: object
          properties: {}
        pipeline_id:
          type: string
          format: uuid
          example: 916ad995-8d13-49fb-82ee-edd4f97649e2
        status:
          type: string
          example: runned
        work_number:
          type: string
      required:
        - pipeline_id
        - work_number
        - status
        - output
        - errors

    SchedulerTasksResponse:
      type: object
      properties:
        result:
          type: boolean
          description: If active tasks exist
      required:
        - result

    Step:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        has_error:
          type: boolean
        name:
          type: string
        state:
          type: object
          properties: {}
        status:
          type: string
          description: Task step execution status
          enum:
            - idle
            - ready
            - running
            - finished
        steps:
          type: array
          items:
            type: string
        storage:
          type: object
          properties: {}
        time:
          type: string
        type:
          type: string
      required:
        - time
        - type
        - name
        - state
        - storage
        - errors
        - steps
        - has_error
        - status

    TaskUpdate:
      type: object
      properties:
        action:
          type: string
          example: approvement
          enum:
            - approvement
            - execution
            - change_executor
            - request_execution_info
            - executor_start_work
            - request_add_info
        parameters:
          type: object
          description: Task update params
          oneOf:
            - $ref: '#/components/schemas/ApproverUpdateParams'
            - $ref: '#/components/schemas/ExecutionUpdateParams'
            - $ref: '#/components/schemas/ExecutorChangeParams'
            - $ref: '#/components/schemas/RequestInfoUpdateParams'
            - $ref: '#/components/schemas/ExecutableFunctionParams'
      required:
        - action
        - parameters

    ApproverUpdateParams:
      type: object
      description: Approver update params
      properties:
        decision:
          $ref: '#/components/schemas/approverDecision'
        comment:
          type: string
          description: Comment from approver
      required:
        - decision
        - comment

    ExecutionUpdateParams:
      type: object
      description: Executor update params
      properties:
        decision:
          $ref: '#/components/schemas/executionDecision'
        comment:
          type: string
          description: Comment from executor
      required:
        - decision
        - comment

    approverDecision:
      type: string
      enum:
        - approved
        - rejected
      description: >
        Approver decision:
         * approved - approver approved block
         * rejected - approver rejected block

    executionDecision:
      type: string
      enum:
        - executed
        - rejected
      description: >
        Executor decision:
         * executed - executor executed block
         * rejected - executor rejected block

    ExecutorChangeParams:
      type: object
      description: Executor change params
      properties:
        newExecutorLogin:
          type: string
          description: New executor login
        comment:
          type: string
          description: Comment from executor
      required:
        - newExecutorLogin
        - comment

    RequestInfoUpdateParams:
      type: object
      description: Executor request info params
      properties:
        reqType:
          $ref: '#/components/schemas/RequestExecutionInfoType'
        executorLogin:
          type: string
          description: executor login
        comment:
          type: string
          description: Comment from executor
        attachments:
          type: array
          items:
            type: string
      required:
        - reqType
        - comment
        - attachments
        - executorLogin

    ExecutableFunctionParams:
      type: object
      description: Chosen function to be executed
      properties:
        name:
          type: string
          description: Function name
        version:
          type: string
          description: Used function version
      required:
        - name
        - version

    RequestExecutionInfoType:
      type: string
      description: Type of execution info
      enum:
        - question
        - answer

    UsageResponse:
      type: object
      properties:
        name:
          type: string
          description: Имя блока
        pipelines:
          type: array
          items:
            $ref: '#/components/schemas/UsedBy'
        used:
          type: boolean
      required:
        - name
        - used
        - pipelines

    UsedBy:
      type: object
      properties:
        id:
          type: string
          description: ID сценария
        name:
          type: string
          description: Имя сценария
      required:
        - name
        - id

    CreateTaskRequest:
      type: object
      required: [parameters,version_id]
      properties:
        parameters:
          type: object
          properties: {}
        version_id:
          type: string
          format: uuid
    DebugRunRequest:
      type: object
      required: [action,break_points,work_number]
      properties:
        action:
          type: string
          example: step_over,resume
        break_points:
          type: array
          items:
            type: string
        work_number:
          type: string
    RunPipelineBody:
      type: object
    RunVersionBody:
      type: object
    RunVersionsByBlueprintIdRequest:
      required: [application_body,blueprint_id,description]
      type: object
      properties:
        application_body:
          type: object
          properties: {}
        blueprint_id:
          type: string
        description:
          type: string
    RunNewVersionByPrevVersionRequest:
      required: [work_number,blueprint_id,description,application_body]
      type: object
      properties:
        work_number:
          type: string
        blueprint_id:
          type: string
        description:
          type: string
        application_body:
          type: object
          properties: {}
    eriusTaskResponse:
      type: object
      properties:
        author:
          type: string
        blueprint_id:
          type: string
        debug:
          type: boolean
        description:
          type: string
        human_status:
          $ref: '#/components/schemas/taskHumanStatus'
        id:
          type: string
        last_changed_at:
          type: string
        name:
          type: string
        parameters:
          type: object
          properties: {}
        started_at:
          type: string
        status:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/step'
        version_id:
          type: string
        work_number:
          type: string
      required:
        - id
        - version_id
        - started_at
        - last_changed_at
        - name
        - description
        - status
        - human_status
        - author
        - debug
        - parameters
        - steps
        - work_number
        - blueprint_id

    httpError:
      type: object
      properties:
        description:
          type: string
        error:
          type: string
        status_code:
          type: integer

    step:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        has_error:
          type: boolean
        name:
          type: string
        state:
          type: object
          properties: {}
        status:
          type: string
        steps:
          type: array
          items:
            type: string
        storage:
          type: object
          properties: {}
        time:
          type: string
        type:
          type: string

    blockType:
      type: string
      description: Block type (language)
      enum:
        - python3
        - go
        - scenario

    FunctionModel:
      type: object
      properties:
        block_type:
          $ref: '#/components/schemas/blockType'
        id:
          type: string
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/FunctionValueModel'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/FunctionValueModel'
        params:
          $ref: '#/components/schemas/FunctionParams'
        shape_type:
          type: integer
        sockets:
          type: array
          items:
            $ref: '#/components/schemas/Socket'
        title:
          type: string
      required:
        - block_type
        - title
        - shape_type
        - next_funcs
        - id
        - sockets

    Socket:
      type: object
      description: Socket object
      properties:
        id:
          type: string
          description: Id of socket
        title:
          type: string
          description: User-friendly title of socket for user
        nextBlockIds:
          type: array
          items:
            type: string
          description: IDs of next blocks
      required:
        - id

    Params:
      type: object
      description: Block constant params
      oneOf:
        - $ref: '#/components/schemas/ApproverParams'
        - $ref: '#/components/schemas/ExecutionParams'
        - $ref: '#/components/schemas/SdApplicationParams'
        - $ref: '#/components/schemas/NotificationParams'
        - $ref: "#/components/schemas/ConditionParams"

    ConditionGroup:
      type: object
      description: Group with conditions
      properties:
        id:
          type: string
        name:
          type: string
        logicalOperator:
          type: string
          enum: [ "or", "and" ]
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
      required:
        - id
        - logicalOperator
        - conditions

    Condition:
      type: object
      description: Compare operands using operator
      properties:
        leftOperand:
          $ref: '#/components/schemas/operand'
        rightOperand:
          $ref: '#/components/schemas/operand'
        operator:
          oneOf:
            - $ref: '#/components/schemas/compareStringOperator'
            - $ref: '#/components/schemas/compareIntegerOperator'
            - $ref: '#/components/schemas/compareNumberOperator'
            - $ref: '#/components/schemas/compareBooleanOperator'
            - $ref: '#/components/schemas/compareDateOperator'
      required:
        - leftOperand
        - rightOperand
        - operator

    operand:
      description: Operand for comparison
      oneOf:
        - $ref: '#/components/schemas/variableOperand'
        - $ref: '#/components/schemas/valueOperand'
      discriminator:
        propertyName: operandType
        mapping:
          varOperand: variableOperand
          valOperand: valueOperand

    StringOperand:
      type: object
      description: Basic string operand, can provide working compare types for this type
      properties:
        dataType:
          type: string
          enum: ["integer", "number", "date", "boolean", "string"]
        operandType:
          type: string
          enum: ["variableOperand", "valueOperand"]
      required:
        - dataType
        - operandType

    IntegerOperand:
      type: object
      description: Basic integer operand, can provide working compare types for this type
      properties:
        dataType:
          type: string
          enum: ["integer", "number",  "boolean" ]
        operandType:
          type: string
          enum: ["variableOperand", "valueOperand"]
      required:
        - dataType
        - operandType

    NumberOperand:
      type: object
      description: Basic number operand, can provide working compare types for this type
      properties:
        dataType:
          type: string
          enum: ["integer", "number", "string"]
        operandType:
          type: string
          enum: ["variableOperand", "valueOperand"]
      required:
        - dataType
        - operandType

    BooleanOperand:
      type: object
      description: Basic boolean operand, can provide working compare types for this type
      properties:
        dataType:
          type: string
          enum: ["integer", "boolean", "string"]
        operandType:
          type: string
          enum: ["variableOperand", "valueOperand"]
      required:
        - dataType
        - operandType

    DateOperand:
      type: object
      description: Basic date operand, can provide working compare types for this type
      properties:
        dataType:
          type: string
          enum: ["date", "string"]
        operandType:
          type: string
          enum: ["variableOperand", "valueOperand"]
      required:
        - dataType
        - operandType

    variableOperand:
      description: Operand which uses variable to compare in conditions. You can use for accessing object variable members (i.e. "applicationData", "applicationData.comment"), required one Operand
      allOf:
        - type: object
          properties:
            variableRef:
              type: string
          required:
            - variableRef
        - oneOf:
            - $ref: '#/components/schemas/StringOperand'
            - $ref: '#/components/schemas/IntegerOperand'
            - $ref: '#/components/schemas/NumberOperand'
            - $ref: '#/components/schemas/BooleanOperand'
            - $ref: '#/components/schemas/DateOperand'

    valueOperand:
      description: Operand which uses simple value to compare in conditions, required one Operand
      allOf:
        - type: object
          properties:
            value:
              type: string
          required:
            - value
        - oneOf:
            - $ref: '#/components/schemas/StringOperand'
            - $ref: '#/components/schemas/IntegerOperand'
            - $ref: '#/components/schemas/NumberOperand'
            - $ref: '#/components/schemas/BooleanOperand'
            - $ref: '#/components/schemas/DateOperand'

    compareStringOperator:
      type: string
      description: Used operator to compare string operands
      enum: [ "Равно", "Не равно", "Содержит", "Не Содержит" ]
      x-enum-varnames: [ "Equal", "NotEqual", "Contain", "NotContain" ]

    compareIntegerOperator:
      type: string
      description: Used operator to compare integer operands
      enum: [ "Равно", "Не равно", "Больше", "Больше или равно", "Меньше", "Меньше или равно" ]
      x-enum-varnames: [ "Equal", "NotEqual", "More", "MoreOrEqual", "Less", "LessOrEqual" ]

    compareNumberOperator:
      type: string
      description: Used operator to compare number operands
      enum: [ "Равно", "Не равно", "Больше", "Больше или равно", "Меньше", "Меньше или равно" ]
      x-enum-varnames: [ "Equal", "NotEqual", "More", "MoreOrEqual", "Less", "LessOrEqual" ]

    compareBooleanOperator:
      type: string
      description: Used operator to compare bool operands
      enum: [ "Равно", "Не равно" ]
      x-enum-varnames: [ "Equal", "NotEqual" ]

    compareDateOperator:
      type: string
      description: Used operator to compare date operands
      enum: [ "Равно", "Не равно", "Больше", "Больше или равно", "Меньше", "Меньше или равно" ]
      x-enum-varnames: [ "Equal", "NotEqual", "More", "MoreOrEqual", "Less", "LessOrEqual" ]

    ConditionParams:
      type: object
      description: Condition params
      properties:
        conditionGroups:
          type: array
          description: Groups with conditions
          items:
            $ref: '#/components/schemas/ConditionGroup'

    NotificationParams:
      type: object
      description: Notification params
      properties:
        people:
          type: array
          description: People to get notifications
          items:
            type: string
            description: Logins
        emails:
          type: array
          description: Emails to get notifications
          items:
            type: string
            description: Emails
        subject:
          type: string
          description: Notification subject
        text:
          type: string
          description: Notification body
      required:
        - people
        - emails
        - subject
        - text

    SdApplicationParams:
      type: object
      description: SD Application params
      properties:
        blueprint_id:
          type: string
          description: Template application ID
      required:
        - blueprint_id

    ExecutionParams:
      type: object
      description: Execution params
      properties:
        type:
          type: string
          enum:
            - user
            - group
          description: >
            Execution type:
             * user - Single user
             * group - Execution group ID
        executors:
          type: string
          description: Executor value (depends on type)
        sla:
          type: integer
          description: Execution SLA (in working hours)
          minimum: 1
        executors_group_id:
          type: string
          description: Executors group id in SD
        executors_group_name:
          type: string
          description: Executors group name in SD
      required:
        - type
        - executors
        - sla
        - executors_group_id
        - executors_group_name

    ApproverType:
      type: string
      enum:
        - user
        - group
        - head
        - fromSchema
      description: >
        Approver type:
          * user - Single user
          * group - Approver group ID
          * head - Receiver's head
          * FromSchema - Selected by initiator

    ApproverParams:
      type: object
      description: Approver params
      properties:
        type:
          $ref: '#/components/schemas/ApproverType'
        approver:
          type: string
          description: Approver value (depends on type)
        approvementRule:
          $ref: '#/components/schemas/ApprovementRule'
        sla:
          type: integer
          description: Approvement SLA (in working hours)
          minimum: 1
        auto_action:
          $ref: '#/components/schemas/ApproveAutoAction'
        repeat_prev_decision:
          type: boolean
        is_editable:
          type: boolean
          description: Show action edit application in SD
        approvers_group_id:
          type: string
          description: Approvers group id in SD
        approvers_group_name:
          type: string
          description: Approvers group name in SD
      required:
        - type
        - approver
        - sla
        - repeat_prev_decision
        - is_editable
        - approvers_group_id
        - approvers_group_name

    ApprovementRule:
      type: string
      enum: [ "Один из согласующих", "Все согласующие" ]
      x-enum-varnames: [ "AnyOf", "AllOf" ]
      description: Count of approvers which will participate in approvement will depends of approvement type. 'Any of' will check only first approvement action, when 'all of' will be waiting for all approvers or auto actions.

    ApproveAutoAction:
      type: string
      description: Action to do automatically in case SLA is breached
      enum:
        - approve
        - reject

    FunctionParams:
      type: object
      properties:
        type:
          type: string
          description: Params type
          enum:
            - approver
            - servicedesk_application
            - execution
            - notification
        params:
          $ref: '#/components/schemas/Params'
      required:
        - type
    FunctionValueModel:
      type: object
      properties:
        comment:
          type: string
        name:
          type: string
        type:
          type: string
    ShapeEntity:
      type: object
      properties:
        icon:
          type: string
        id:
          type: integer
        title:
          type: string
      required:
        - id
        - title
        - icon
    Created:
      type: object
      properties:
        start:
          type: integer
        end:
          type: integer
      required:
        - start
        - end
    httpResponse:
      type: object
      properties:
        data:
          type: object
          properties: { }
        status_code:
          type: integer
      required:
        - status_code